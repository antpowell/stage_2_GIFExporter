{"version":3,"sources":["src\\encoded.image.ts","src\\LZW.ts","src\\gif.generator.ts"],"names":[],"mappings":"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","file":"gif.generator.acc3c5c7.map","sourceRoot":"..","sourcesContent":["export class EncodedImage {\n\tdata: number[] = [];\n\n\tconstructor() {}\n\n\tpublic get(): number[] {\n\t\treturn this.data;\n\t}\n\n\tpublic write(byte: number): void {\n\t\tthis.data.push(byte);\n\t}\n\n\tpublic writeArray(array: number[], arraySize: number): void {\n\t\tfor (let i = 0; i < arraySize; i++) {\n\t\t\tthis.write(array[i]);\n\t\t}\n\t}\n\n\tpublic writeUTF(UTF: string): void {\n\t\tfor (let i = 0; i < UTF.length; i++) {\n\t\t\tthis.write(UTF.charCodeAt(i));\n\t\t}\n\t}\n\n\tpublic writeColor(color: string): void {\n\t\tfor (let i = 0; i < color.length; i += 2) {\n\t\t\tconst intValue: number = parseInt(color[i] + color[i + 1], 16);\n\t\t\tthis.write(intValue);\n\t\t}\n\t}\n\n\tpublic writeLittleEndian(num: number): void {\n\t\tthis.write(num & 0xff);\n\t\tthis.write((num >> 8) & 0xff);\n\t}\n\n\tpublic reset() {\n\t\tthis.data = [];\n\t}\n}\n","/**\r\n * This class handles LZW encoding\r\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\r\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n * @author Thibault Imbert (AS3 version - bytearray.org)\r\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n * @author Anthony Powell (TypeScript version)\r\n * @version 0.1 AS3 implementation\r\n */\r\n\r\nimport { EncodedImage } from './encoded.image';\r\nexport class LZWEncoder {\r\n\tprivate readonly EOF = 1;\r\n\r\n\t// GIFCOMPR.C - GIF Image compression routines\r\n\t// Lempel-Ziv compression based on 'compress'. GIF modifications by\r\n\t// David Rowley (mgardi@watdcsu.waterloo.edu)\r\n\t// General DEFINEs\r\n\r\n\tprivate readonly BITS = 12;\r\n\tprivate readonly HSIZE = 5003;\r\n\r\n\tprivate _imgW: number;\r\n\tprivate _imgH: number;\r\n\tprivate _pixels: number[];\r\n\tprivate _initCodeSize: number;\r\n\tprivate _remaining: number;\r\n\tprivate _curPixel: number;\r\n\r\n\t// GIF Image compression - modified 'compress'\r\n\t// Based on: compress.c - File compression ala IEEE Computer, June 1984.\r\n\t// By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\r\n\t// Jim McKie (decvax!mcvax!jim)\r\n\t// Steve Davies (decvax!vax135!petsd!peora!srd)\r\n\t// Ken Turkowski (decvax!decwrl!turtlevax!ken)\r\n\t// James A. Woods (decvax!ihnp4!ames!jaw)\r\n\t// Joe Orost (decvax!vax135!petsd!joe)\r\n\r\n\tprivate _n_bits: number; // number of bits/code\r\n\tprivate _maxbits = this.BITS; // user settable max # bits/code\r\n\tprivate _maxcode: number; // maximum code, given n_bits\r\n\tprivate _maxmaxcode = 1 << this.BITS; // should NEVER generate this code\r\n\tprivate _htab: number[] = [];\r\n\tprivate _codetab: number[] = [];\r\n\tprivate _hsize = this.HSIZE; // for dynamic table sizing\r\n\tprivate _free_ent = 0; // first unused entry\r\n\r\n\t// block compression parameters -- after all codes are used up,\r\n\t// and compression rate changes, start over.\r\n\r\n\tprivate _clear_flg = false;\r\n\r\n\t// Algorithm: use open addressing double hashing (no chaining) on the\r\n\t// prefix code / next character combination. We do a variant of Knuth's\r\n\t// algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\r\n\t// secondary probe. Here, the modular division first probe is gives way\r\n\t// to a faster exclusive-or manipulation. Also do block compression with\r\n\t// an adaptive reset, whereby the code table is cleared when the compression\r\n\t// ratio decreases, but after the table fills. The variable-length output\r\n\t// codes are re-sized at this point, and a special CLEAR code is generated\r\n\t// for the decompressor. Late addition: construct the table according to\r\n\t// file size for noticeable speed improvement on small files. Please direct\r\n\t// questions about this implementation to ames!jaw.\r\n\r\n\tprivate _g_init_bits: number;\r\n\tprivate _ClearCode: number;\r\n\tprivate _EOFCode: number;\r\n\r\n\t// output\r\n\t// Output the given code.\r\n\t// Inputs:\r\n\t// code: A n_bits-bit integer. If == -1, then EOF. This assumes\r\n\t// that n_bits =< wordsize - 1.\r\n\t// Outputs:\r\n\t// Outputs code to the file.\r\n\t// Assumptions:\r\n\t// Chars are 8 bits long.\r\n\t// Algorithm:\r\n\t// Maintain a BITS character long buffer (so that 8 codes will\r\n\t// fit in it exactly). Use the VAX insv instruction to insert each\r\n\t// code in turn. When the buffer fills up empty it and start over.\r\n\r\n\tprivate _cur_accum = 0;\r\n\tprivate _cur_bits = 0;\r\n\tprivate _masks = [\r\n\t\t0x0000,\r\n\t\t0x0001,\r\n\t\t0x0003,\r\n\t\t0x0007,\r\n\t\t0x000f,\r\n\t\t0x001f,\r\n\t\t0x003f,\r\n\t\t0x007f,\r\n\t\t0x00ff,\r\n\t\t0x01ff,\r\n\t\t0x03ff,\r\n\t\t0x07ff,\r\n\t\t0x0fff,\r\n\t\t0x1fff,\r\n\t\t0x3fff,\r\n\t\t0x7fff,\r\n\t\t0xffff,\r\n\t];\r\n\r\n\t// Number of characters so far in this 'packet'\r\n\tprivate _a_count: number;\r\n\r\n\t// Define the storage for the packet accumulator\r\n\tprivate _accum: number[] = [];\r\n\r\n\tconstructor(\r\n\t\twidth: number,\r\n\t\theight: number,\r\n\t\tpixels: number[],\r\n\t\tcolorDepth: number\r\n\t) {\r\n\t\tthis._imgW = width;\r\n\t\tthis._imgH = height;\r\n\t\tthis._pixels = pixels;\r\n\t\tthis._initCodeSize = Math.max(2, colorDepth);\r\n\t}\r\n\r\n\t// Add a character to the end of the current packet, and if it is 254\r\n\t// characters, flush the packet to disk.\r\n\tprivate writeCharToPacket(c: number, outs: EncodedImage): void {\r\n\t\tthis._accum[this._a_count++] = c;\r\n\t\tif (this._a_count >= 254) this.flush_char(outs);\r\n\t}\r\n\r\n\t// Clear out the hash table\r\n\t// table clear for block compress\r\n\r\n\tprivate cl_block(outs: EncodedImage): void {\r\n\t\tthis.cl_hash(this._hsize);\r\n\t\tthis._free_ent = this._ClearCode + 2;\r\n\t\tthis._clear_flg = true;\r\n\t\tthis.output(this._ClearCode, outs);\r\n\t}\r\n\r\n\t// reset code table\r\n\tpublic cl_hash(hsize: number): void {\r\n\t\tfor (let i = 0; i < hsize; ++i) this._htab[i] = -1;\r\n\t}\r\n\r\n\tprivate compress(init_bits: number, outs: EncodedImage) {\r\n\t\tlet fcode;\r\n\t\tlet i; /* = 0 */\r\n\t\tlet c;\r\n\t\tlet ent;\r\n\t\tlet disp;\r\n\t\tlet hsize_reg;\r\n\t\tlet hshift;\r\n\r\n\t\t// Set up the globals: g_init_bits - initial number of bits\r\n\t\tthis._g_init_bits = init_bits;\r\n\r\n\t\t// Set up the necessary values\r\n\t\tthis._clear_flg = false;\r\n\t\tthis._n_bits = this._g_init_bits;\r\n\t\tthis._maxcode = this.MAXCODE(this._n_bits);\r\n\r\n\t\tthis._ClearCode = 1 << (init_bits - 1);\r\n\t\tthis._EOFCode = this._ClearCode + 1;\r\n\t\tthis._free_ent = this._ClearCode + 2;\r\n\r\n\t\tthis._a_count = 0; // clear packet\r\n\r\n\t\tent = this.nextPixel();\r\n\r\n\t\thshift = 0;\r\n\t\tfor (fcode = this._hsize; fcode < 65536; fcode *= 2) ++hshift;\r\n\t\thshift = 8 - hshift; // set hash code range bound\r\n\r\n\t\thsize_reg = this._hsize;\r\n\t\tthis.cl_hash(hsize_reg); // clear hash table\r\n\r\n\t\tthis.output(this._ClearCode, outs);\r\n\r\n\t\touter_loop: while ((c = this.nextPixel()) != this.EOF) {\r\n\t\t\tfcode = (c << this._maxbits) + ent;\r\n\t\t\ti = (c << hshift) ^ ent; // xor hashing\r\n\r\n\t\t\tif (this._htab[i] == fcode) {\r\n\t\t\t\tent = this._codetab[i];\r\n\t\t\t\tcontinue;\r\n\t\t\t} else if (this._htab[i] >= 0) {\r\n\t\t\t\t// non-empty slot\r\n\r\n\t\t\t\tdisp = hsize_reg - i; // secondary hash (after G. Knott)\r\n\t\t\t\tif (i === 0) disp = 1;\r\n\r\n\t\t\t\tdo {\r\n\t\t\t\t\tif ((i -= disp) < 0) i += hsize_reg;\r\n\r\n\t\t\t\t\tif (this._htab[i] == fcode) {\r\n\t\t\t\t\t\tent = this._codetab[i];\r\n\t\t\t\t\t\tcontinue outer_loop;\r\n\t\t\t\t\t}\r\n\t\t\t\t} while (this._htab[i] >= 0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.output(ent, outs);\r\n\t\t\tent = c;\r\n\t\t\tif (this._free_ent < this._maxmaxcode) {\r\n\t\t\t\tthis._codetab[i] = this._free_ent++; // code -> hashtable\r\n\t\t\t\tthis._htab[i] = fcode;\r\n\t\t\t} else this.cl_block(outs);\r\n\t\t}\r\n\r\n\t\t// Put out the final code.\r\n\t\tthis.output(ent, outs);\r\n\t\tthis.output(this._EOFCode, outs);\r\n\t}\r\n\r\n\t// ----------------------------------------------------------------------------\r\n\tpublic encode(os: EncodedImage) {\r\n\t\tos.write(this._initCodeSize); // write \"initial code size\" byte\r\n\t\tthis._remaining = this._imgW * this._imgH; // reset navigation variables\r\n\t\tthis._curPixel = 0;\r\n\t\tthis.compress(this._initCodeSize + 1, os); // compress and write the pixel data\r\n\t\tos.write(0); // write block terminator\r\n\t}\r\n\r\n\t// Flush the packet to disk, and reset the accumulator\r\n\tprivate flush_char(outs: EncodedImage) {\r\n\t\tif (this._a_count > 0) {\r\n\t\t\touts.write(this._a_count);\r\n\t\t\touts.writeArray(this._accum, this._a_count);\r\n\t\t\tthis._a_count = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate MAXCODE(n_bits: number) {\r\n\t\treturn (1 << n_bits) - 1;\r\n\t}\r\n\r\n\t// ----------------------------------------------------------------------------\r\n\t// Return the next pixel from the image\r\n\t// ----------------------------------------------------------------------------\r\n\r\n\tprivate nextPixel() {\r\n\t\tif (this._remaining === 0) return this.EOF;\r\n\t\t--this._remaining;\r\n\t\tlet pix = this._pixels[this._curPixel++];\r\n\t\treturn pix & 0xff;\r\n\t}\r\n\r\n\tprivate output(code: number, outs: EncodedImage) {\r\n\t\tthis._cur_accum &= this._masks[this._cur_bits];\r\n\r\n\t\tif (this._cur_bits > 0) this._cur_accum |= code << this._cur_bits;\r\n\t\telse this._cur_accum = code;\r\n\r\n\t\tthis._cur_bits += this._n_bits;\r\n\r\n\t\twhile (this._cur_bits >= 8) {\r\n\t\t\tthis.writeCharToPacket(this._cur_accum & 0xff, outs);\r\n\t\t\tthis._cur_accum >>= 8;\r\n\t\t\tthis._cur_bits -= 8;\r\n\t\t}\r\n\r\n\t\t// If the next entry is going to be too big for the code size,\r\n\t\t// then increase it, if possible.\r\n\r\n\t\tif (this._free_ent > this._maxcode || this._clear_flg) {\r\n\t\t\tif (this._clear_flg) {\r\n\t\t\t\tthis._maxcode = this.MAXCODE((this._n_bits = this._g_init_bits));\r\n\t\t\t\tthis._clear_flg = false;\r\n\t\t\t} else {\r\n\t\t\t\t++this._n_bits;\r\n\t\t\t\tif (this._n_bits == this._maxbits) this._maxcode = this._maxmaxcode;\r\n\t\t\t\telse this._maxcode = this.MAXCODE(this._n_bits);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (code == this._EOFCode) {\r\n\t\t\t// At EOF, write the rest of the buffer.\r\n\t\t\twhile (this._cur_bits > 0) {\r\n\t\t\t\tthis.writeCharToPacket(this._cur_accum & 0xff, outs);\r\n\t\t\t\tthis._cur_accum >>= 8;\r\n\t\t\t\tthis._cur_bits -= 8;\r\n\t\t\t}\r\n\r\n\t\t\tthis.flush_char(outs);\r\n\t\t}\r\n\t}\r\n}\r\n","import { EncodedImage } from './encoded.image';\nimport { LZWEncoder } from './LZW';\n\nexport class GIFGenerator {\n\tprivate stream: EncodedImage = new EncodedImage();\n\tprivate width: number;\n\tprivate height: number;\n\tprivate frameIndexedPixels: number[];\n\tprivate frameCount: number = 0;\n\tprivate GCT: string[];\n\n\tconstructor() {\n\t\tconsole.log(`Generator now running...`);\n\t}\n\n\tpublic init(width: number, height: number, GCT: string[]): void {\n\t\tthis.reset();\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.GCT = GCT;\n\t\tthis.writeHeader();\n\t\tthis.writeLogicalScreenDescriptor();\n\t\tthis.writeGlobalColorTable();\n\t\tthis.writeApplicationExtension();\n\t}\n\n\tpublic generateFrame(indexedPixels: number[]): void {\n\t\tthis.frameIndexedPixels = indexedPixels;\n\t\tthis.frameCount += 1;\n\t\tconsole.log(`generating frame ${this.frameCount}`);\n\t\tthis.writeGraphicControlExtension();\n\t\tthis.writeImageDescriptor();\n\t\tthis.writeImageData();\n\t}\n\n\tpublic getStream(): number[] {\n\t\tthis.writeTrailer();\n\t\treturn this.stream.get();\n\t}\n\n\tprivate writeHeader(): void {\n\t\tthis.stream.writeUTF('GIF89a'); /* GIF Header */\n\t}\n\n\tprivate writeLogicalScreenDescriptor(): void {\n\t\tthis.stream.writeLittleEndian(this.width); /* Canvas Width */\n\t\tthis.stream.writeLittleEndian(this.height); /* Canvas Height */\n\t\tthis.stream.write(0xf7); /* Packed Field */\n\t\tthis.stream.write(0); /* Background Color Index */\n\t\tthis.stream.write(0); /* Pixel Aspect Ration */\n\t}\n\n\tprivate writeGraphicControlExtension(): void {\n\t\tthis.stream.write(0x21); /* Extension Introducer */\n\t\tthis.stream.write(0xf9); /* Graphic Control Label */\n\t\tthis.stream.write(0x4); /* Byte Size */\n\t\tthis.stream.write(0x4); /* Packed Field */\n\t\tthis.stream.writeLittleEndian(0x9); /* Delay Time */\n\t\tthis.stream.write(0x0); /* Transparent Color Index */\n\t\tthis.stream.write(0x0); /* Block Terminator */\n\t}\n\n\tprivate writeImageDescriptor(): void {\n\t\tthis.stream.write(0x2c); /* Image Seperator Always 2C */\n\t\tthis.stream.writeLittleEndian(0x0); /* Image Left */\n\t\tthis.stream.writeLittleEndian(0x0); /* Image Top */\n\t\tthis.stream.writeLittleEndian(this.width); /* Image Width */\n\t\tthis.stream.writeLittleEndian(this.height); /* Image Height */\n\t\tthis.stream.write(0x0); /* Block Terminator */\n\t}\n\n\tprivate writeApplicationExtension(): void {\n\t\tthis.stream.write(0x21); /* extension introducer */\n\t\tthis.stream.write(0xff); /* app extension label */\n\t\tthis.stream.write(11); /* block size */\n\t\tthis.stream.writeUTF('NETSCAPE' + '2.0'); /* app id + auth code */\n\t\tthis.stream.write(3); /* sub-block size */\n\t\tthis.stream.write(1); /* loop sub-block id */\n\t\tthis.stream.writeLittleEndian(0); /* loop count (extra iterations, 0=repeat forever) */\n\t\tthis.stream.write(0); /* Block Terminator */\n\t}\n\n\tprivate writeTrailer(): void {\n\t\tthis.stream.write(0x3b); /* Trailer Marker */\n\t\tconsole.log(`Generator now finished.`);\n\t\tthis.frameCount = 0; /* Reset frame count for next GIF */\n\t}\n\n\tprivate writeGlobalColorTable(): void {\n\t\tlet count = 0;\n\n\t\tthis.GCT.forEach(color => {\n\t\t\tcount += 3;\n\t\t\tthis.stream.writeColor(color);\n\t\t});\n\n\t\tfor (let i = count; i < 3 * 256; i++) {\n\t\t\tthis.stream.write(0);\n\t\t}\n\t}\n\n\tprivate async writeImageData(): Promise<void> {\n\t\tconst encoder = new LZWEncoder(this.width, this.height, this.frameIndexedPixels, 8);\n\t\tencoder.encode(this.stream);\n\t\tconsole.log(`completed frame ${this.frameCount}`);\n\t}\n\n\tprivate writeLocalColorTable(): void {}\n\n\tprivate writePlainTextExtension(): void {}\n\n\tprivate writeCommentExtension(): void {}\n\n\tprivate reset() {\n\t\tthis.stream.reset();\n\t\tthis.frameCount = 0;\n\t}\n}\n"]}