{"version":3,"sources":["src\\js\\NeuQuant.js","src\\color.table.generator.ts"],"names":["NeuQuant","toInt","v","ncycles","netsize","maxnetpos","netbiasshift","intbiasshift","intbias","gammashift","gamma","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","alphadec","radbiasshift","radbias","alpharadbshift","alpharadbias","prime1","prime2","prime3","prime4","minpicturebytes","pixels","samplefac","network","netindex","bias","freq","radpower","init","i","unbiasnet","altersingle","alpha","b","g","r","alterneigh","radius","lo","Math","abs","hi","min","j","k","m","p","a","contest","bestd","bestbiasd","bestpos","bestbiaspos","n","dist","biasdist","betafreq","inxbuild","q","smallpos","smallval","previouscol","startpos","inxsearch","best","learn","lengthcount","length","samplepixels","delta","rad","step","pix","buildColormap","getColormap","map","index","l","lookupRGB"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBA+EwBA;AA/ExB;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASC,KAAT,CAAeC,CAAf,EAAkB;AAChB,SAAO,CAAC,CAACA,CAAT;AACD;;AAED,IAAIC,UAAU,GAAd,EAAmB;AACnB,IAAIC,UAAU,GAAd,EAAmB;AACnB,IAAIC,YAAYD,UAAU,CAA1B;;AAEA;AACA,IAAIE,eAAe,CAAnB,EAAsB;AACtB,IAAIC,eAAe,EAAnB,EAAuB;AACvB,IAAIC,UAAW,KAAKD,YAApB;AACA,IAAIE,aAAa,EAAjB;AACA,IAAIC,QAAS,KAAKD,UAAlB;AACA,IAAIE,YAAY,EAAhB;AACA,IAAIC,OAAQJ,WAAWG,SAAvB,EAAmC;AACnC,IAAIE,YAAaL,WAAYC,aAAaE,SAA1C;;AAEA;AACA,IAAIG,UAAWV,WAAW,CAA1B,EAA8B;AAC9B,IAAIW,kBAAkB,CAAtB,EAAyB;AACzB,IAAIC,aAAc,KAAKD,eAAvB;AACA,IAAIE,aAAcH,UAAUE,UAA5B,EAAyC;AACzC,IAAIE,YAAY,EAAhB,EAAoB;;AAEpB;AACA,IAAIC,iBAAiB,EAArB,EAAyB;AACzB,IAAIC,YAAa,KAAKD,cAAtB;AACA,IAAIE,QAAJ,EAAc;;AAEd;AACA,IAAIC,eAAe,CAAnB;AACA,IAAIC,UAAW,KAAKD,YAApB;AACA,IAAIE,iBAAkBL,iBAAiBG,YAAvC;AACA,IAAIG,eAAgB,KAAKD,cAAzB;;AAEA;AACA;AACA,IAAIE,SAAS,GAAb;AACA,IAAIC,SAAS,GAAb;AACA,IAAIC,SAAS,GAAb;AACA,IAAIC,SAAS,GAAb;AACA,IAAIC,kBAAmB,IAAID,MAA3B;;AAEA;;;;;;;;;;;;AAYe,SAAS7B,QAAT,CAAkB+B,MAAlB,EAA0BC,SAA1B,EAAqC;AAClD,MAAIC,OAAJ,CADkD,CACrC;AACb,MAAIC,QAAJ,CAFkD,CAEpC;;AAEd;AACA,MAAIC,IAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,QAAJ;;AAEA;;;;AAKA,WAASC,IAAT,GAAgB;AACdL,cAAU,EAAV;AACAC,eAAW,EAAX;AACAC,WAAO,EAAP;AACAC,WAAO,EAAP;AACAC,eAAW,EAAX;;AAEA,QAAIE,CAAJ,EAAOrC,CAAP;AACA,SAAKqC,IAAI,CAAT,EAAYA,IAAInC,OAAhB,EAAyBmC,GAAzB,EAA8B;AAC5BrC,UAAI,CAACqC,KAAMjC,eAAe,CAAtB,IAA4BF,OAAhC;AACA6B,cAAQM,CAAR,IAAa,CAACrC,CAAD,EAAIA,CAAJ,EAAOA,CAAP,CAAb;AACAkC,WAAKG,CAAL,IAAU/B,UAAUJ,OAApB;AACA+B,WAAKI,CAAL,IAAU,CAAV;AACD;AACF;;AAED;;;;AAKA,WAASC,SAAT,GAAqB;AACnB,SAAK,IAAID,IAAI,CAAb,EAAgBA,IAAInC,OAApB,EAA6BmC,GAA7B,EAAkC;AAChCN,cAAQM,CAAR,EAAW,CAAX,MAAkBjC,YAAlB;AACA2B,cAAQM,CAAR,EAAW,CAAX,MAAkBjC,YAAlB;AACA2B,cAAQM,CAAR,EAAW,CAAX,MAAkBjC,YAAlB;AACA2B,cAAQM,CAAR,EAAW,CAAX,IAAgBA,CAAhB,CAJgC,CAIb;AACpB;AACF;;AAED;;;;AAKA,WAASE,WAAT,CAAqBC,KAArB,EAA4BH,CAA5B,EAA+BI,CAA/B,EAAkCC,CAAlC,EAAqCC,CAArC,EAAwC;AACtCZ,YAAQM,CAAR,EAAW,CAAX,KAAkBG,SAAST,QAAQM,CAAR,EAAW,CAAX,IAAgBI,CAAzB,CAAD,GAAgCvB,SAAjD;AACAa,YAAQM,CAAR,EAAW,CAAX,KAAkBG,SAAST,QAAQM,CAAR,EAAW,CAAX,IAAgBK,CAAzB,CAAD,GAAgCxB,SAAjD;AACAa,YAAQM,CAAR,EAAW,CAAX,KAAkBG,SAAST,QAAQM,CAAR,EAAW,CAAX,IAAgBM,CAAzB,CAAD,GAAgCzB,SAAjD;AACD;;AAED;;;;AAKA,WAAS0B,UAAT,CAAoBC,MAApB,EAA4BR,CAA5B,EAA+BI,CAA/B,EAAkCC,CAAlC,EAAqCC,CAArC,EAAwC;AACtC,QAAIG,KAAKC,KAAKC,GAAL,CAASX,IAAIQ,MAAb,CAAT;AACA,QAAII,KAAKF,KAAKG,GAAL,CAASb,IAAIQ,MAAb,EAAqB3C,OAArB,CAAT;;AAEA,QAAIiD,IAAId,IAAI,CAAZ;AACA,QAAIe,IAAIf,IAAI,CAAZ;AACA,QAAIgB,IAAI,CAAR;;AAEA,QAAIC,CAAJ,EAAOC,CAAP;AACA,WAAQJ,IAAIF,EAAL,IAAaG,IAAIN,EAAxB,EAA6B;AAC3BS,UAAIpB,SAASkB,GAAT,CAAJ;;AAEA,UAAIF,IAAIF,EAAR,EAAY;AACVK,YAAIvB,QAAQoB,GAAR,CAAJ;AACAG,UAAE,CAAF,KAASC,KAAKD,EAAE,CAAF,IAAOb,CAAZ,CAAD,GAAmBlB,YAA3B;AACA+B,UAAE,CAAF,KAASC,KAAKD,EAAE,CAAF,IAAOZ,CAAZ,CAAD,GAAmBnB,YAA3B;AACA+B,UAAE,CAAF,KAASC,KAAKD,EAAE,CAAF,IAAOX,CAAZ,CAAD,GAAmBpB,YAA3B;AACD;;AAED,UAAI6B,IAAIN,EAAR,EAAY;AACVQ,YAAIvB,QAAQqB,GAAR,CAAJ;AACAE,UAAE,CAAF,KAASC,KAAKD,EAAE,CAAF,IAAOb,CAAZ,CAAD,GAAmBlB,YAA3B;AACA+B,UAAE,CAAF,KAASC,KAAKD,EAAE,CAAF,IAAOZ,CAAZ,CAAD,GAAmBnB,YAA3B;AACA+B,UAAE,CAAF,KAASC,KAAKD,EAAE,CAAF,IAAOX,CAAZ,CAAD,GAAmBpB,YAA3B;AACD;AACF;AACF;;AAED;;;;AAKA,WAASiC,OAAT,CAAiBf,CAAjB,EAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AACxB;;;;;;;AAOA,QAAIc,QAAQ,EAAE,KAAK,EAAP,CAAZ;AACA,QAAIC,YAAYD,KAAhB;AACA,QAAIE,UAAU,CAAC,CAAf;AACA,QAAIC,cAAcD,OAAlB;;AAEA,QAAItB,CAAJ,EAAOwB,CAAP,EAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,QAA1B;AACA,SAAK3B,IAAI,CAAT,EAAYA,IAAInC,OAAhB,EAAyBmC,GAAzB,EAA8B;AAC5BwB,UAAI9B,QAAQM,CAAR,CAAJ;;AAEAyB,aAAOf,KAAKC,GAAL,CAASa,EAAE,CAAF,IAAOpB,CAAhB,IAAqBM,KAAKC,GAAL,CAASa,EAAE,CAAF,IAAOnB,CAAhB,CAArB,GAA0CK,KAAKC,GAAL,CAASa,EAAE,CAAF,IAAOlB,CAAhB,CAAjD;AACA,UAAImB,OAAOL,KAAX,EAAkB;AAChBA,gBAAQK,IAAR;AACAH,kBAAUtB,CAAV;AACD;;AAED0B,iBAAWD,QAAS7B,KAAKI,CAAL,CAAD,IAAchC,eAAeD,YAArC,CAAX;AACA,UAAI2D,WAAWL,SAAf,EAA0B;AACxBA,oBAAYK,QAAZ;AACAH,sBAAcvB,CAAd;AACD;;AAED2B,iBAAY9B,KAAKG,CAAL,KAAW5B,SAAvB;AACAyB,WAAKG,CAAL,KAAW2B,QAAX;AACA/B,WAAKI,CAAL,KAAY2B,YAAYzD,UAAxB;AACD;;AAED2B,SAAKyB,OAAL,KAAiBjD,IAAjB;AACAuB,SAAK0B,OAAL,KAAiBhD,SAAjB;;AAEA,WAAOiD,WAAP;AACD;;AAED;;;;AAKA,WAASK,QAAT,GAAoB;AAClB,QAAI5B,CAAJ;AAAA,QAAOc,CAAP;AAAA,QAAUG,CAAV;AAAA,QAAaY,CAAb;AAAA,QAAgBC,QAAhB;AAAA,QAA0BC,QAA1B;AAAA,QAAoCC,cAAc,CAAlD;AAAA,QACEC,WAAW,CADb;AAEA,SAAKjC,IAAI,CAAT,EAAYA,IAAInC,OAAhB,EAAyBmC,GAAzB,EAA8B;AAC5BiB,UAAIvB,QAAQM,CAAR,CAAJ;AACA8B,iBAAW9B,CAAX;AACA+B,iBAAWd,EAAE,CAAF,CAAX,CAH4B,CAGX;AACjB;AACA,WAAKH,IAAId,IAAI,CAAb,EAAgBc,IAAIjD,OAApB,EAA6BiD,GAA7B,EAAkC;AAChCe,YAAInC,QAAQoB,CAAR,CAAJ;AACA,YAAIe,EAAE,CAAF,IAAOE,QAAX,EAAqB;AAAE;AACrBD,qBAAWhB,CAAX;AACAiB,qBAAWF,EAAE,CAAF,CAAX,CAFmB,CAEF;AAClB;AACF;AACDA,UAAInC,QAAQoC,QAAR,CAAJ;AACA;AACA,UAAI9B,KAAK8B,QAAT,EAAmB;AACjBhB,YAAIe,EAAE,CAAF,CAAJ;AACAA,UAAE,CAAF,IAAOZ,EAAE,CAAF,CAAP;AACAA,UAAE,CAAF,IAAOH,CAAP;AACAA,YAAIe,EAAE,CAAF,CAAJ;AACAA,UAAE,CAAF,IAAOZ,EAAE,CAAF,CAAP;AACAA,UAAE,CAAF,IAAOH,CAAP;AACAA,YAAIe,EAAE,CAAF,CAAJ;AACAA,UAAE,CAAF,IAAOZ,EAAE,CAAF,CAAP;AACAA,UAAE,CAAF,IAAOH,CAAP;AACAA,YAAIe,EAAE,CAAF,CAAJ;AACAA,UAAE,CAAF,IAAOZ,EAAE,CAAF,CAAP;AACAA,UAAE,CAAF,IAAOH,CAAP;AACD;AACD;;AAEA,UAAIiB,YAAYC,WAAhB,EAA6B;AAC3BrC,iBAASqC,WAAT,IAAyBC,WAAWjC,CAAZ,IAAkB,CAA1C;AACA,aAAKc,IAAIkB,cAAc,CAAvB,EAA0BlB,IAAIiB,QAA9B,EAAwCjB,GAAxC;AACEnB,mBAASmB,CAAT,IAAcd,CAAd;AADF,SAEAgC,cAAcD,QAAd;AACAE,mBAAWjC,CAAX;AACD;AACF;AACDL,aAASqC,WAAT,IAAyBC,WAAWnE,SAAZ,IAA0B,CAAlD;AACA,SAAKgD,IAAIkB,cAAc,CAAvB,EAA0BlB,IAAI,GAA9B,EAAmCA,GAAnC;AACEnB,eAASmB,CAAT,IAAchD,SAAd;AADF,KA1CkB,CA2CS;AAC5B;;AAED;;;;AAKA,WAASoE,SAAT,CAAmB9B,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC1B,QAAIY,CAAJ,EAAOD,CAAP,EAAUQ,IAAV;;AAEA,QAAIL,QAAQ,IAAZ,CAH0B,CAGR;AAClB,QAAIe,OAAO,CAAC,CAAZ;;AAEA,QAAInC,IAAIL,SAASU,CAAT,CAAR,CAN0B,CAML;AACrB,QAAIS,IAAId,IAAI,CAAZ,CAP0B,CAOX;;AAEf,WAAQA,IAAInC,OAAL,IAAkBiD,KAAK,CAA9B,EAAkC;AAChC,UAAId,IAAInC,OAAR,EAAiB;AACfoD,YAAIvB,QAAQM,CAAR,CAAJ;AACAyB,eAAOR,EAAE,CAAF,IAAOZ,CAAd,CAFe,CAEE;AACjB,YAAIoB,QAAQL,KAAZ,EAAmBpB,IAAInC,OAAJ,CAAnB,CAAgC;AAAhC,aACK;AACHmC;AACA,gBAAIyB,OAAO,CAAX,EAAcA,OAAO,CAACA,IAAR;AACdP,gBAAID,EAAE,CAAF,IAAOb,CAAX;AACA,gBAAIc,IAAI,CAAR,EAAWA,IAAI,CAACA,CAAL;AACXO,oBAAQP,CAAR;AACA,gBAAIO,OAAOL,KAAX,EAAkB;AAChBF,kBAAID,EAAE,CAAF,IAAOX,CAAX;AACA,kBAAIY,IAAI,CAAR,EAAWA,IAAI,CAACA,CAAL;AACXO,sBAAQP,CAAR;AACA,kBAAIO,OAAOL,KAAX,EAAkB;AAChBA,wBAAQK,IAAR;AACAU,uBAAOlB,EAAE,CAAF,CAAP;AACD;AACF;AACF;AACF;AACD,UAAIH,KAAK,CAAT,EAAY;AACVG,YAAIvB,QAAQoB,CAAR,CAAJ;AACAW,eAAOpB,IAAIY,EAAE,CAAF,CAAX,CAFU,CAEO;AACjB,YAAIQ,QAAQL,KAAZ,EAAmBN,IAAI,CAAC,CAAL,CAAnB,CAA2B;AAA3B,aACK;AACHA;AACA,gBAAIW,OAAO,CAAX,EAAcA,OAAO,CAACA,IAAR;AACdP,gBAAID,EAAE,CAAF,IAAOb,CAAX;AACA,gBAAIc,IAAI,CAAR,EAAWA,IAAI,CAACA,CAAL;AACXO,oBAAQP,CAAR;AACA,gBAAIO,OAAOL,KAAX,EAAkB;AAChBF,kBAAID,EAAE,CAAF,IAAOX,CAAX;AACA,kBAAIY,IAAI,CAAR,EAAWA,IAAI,CAACA,CAAL;AACXO,sBAAQP,CAAR;AACA,kBAAIO,OAAOL,KAAX,EAAkB;AAChBA,wBAAQK,IAAR;AACAU,uBAAOlB,EAAE,CAAF,CAAP;AACD;AACF;AACF;AACF;AACF;;AAED,WAAOkB,IAAP;AACD;;AAED;;;;AAKA,WAASC,KAAT,GAAiB;AACf,QAAIpC,CAAJ;;AAEA,QAAIqC,cAAc7C,OAAO8C,MAAzB;AACA,QAAIxD,WAAWpB,MAAM,KAAM,CAAC+B,YAAY,CAAb,IAAkB,CAA9B,CAAf;AACA,QAAI8C,eAAe7E,MAAM2E,eAAe,IAAI5C,SAAnB,CAAN,CAAnB;AACA,QAAI+C,QAAQ9E,MAAM6E,eAAe3E,OAArB,CAAZ;AACA,QAAIuC,QAAQtB,SAAZ;AACA,QAAI2B,SAAS9B,UAAb;;AAEA,QAAI+D,MAAMjC,UAAUhC,eAApB;;ACpVJ,ADsVI,ICtVJ,IDsVQiE,OAAO,CAAX,CCtVJ,CDsVkBA,MAAM,CAAN,QCtVlB,QAAA,eAAA,CAAA,CAAA;AACA,ADsVI,ICtVJ,KDsVSzC,IAAI,CAAT,EAAYA,IAAIyC,GAAhB,EAAqBzC,CCtVzB,EDsVI,WCtVJ,YAAA;AASC,AD8UKF,aC9UL,ED8UcE,CAAT,IAActC,MAAMyC,MC9UzB,CAAY,ED8UuB,CAACsC,EC9UpC,EAA6B,ED8UaA,GAAN,GAAYzC,IAAIA,CAAjB,IAAsBhB,OAAvB,IAAmCyD,MAAMA,GAAzC,CAAT,CAAN,CAAd;ACtVG,ADqVL,KAGA,IAAIC,ICxVC,ADwVL,WCxVK,GAAwB,EAAxB;AACA,ADwVL,QAAIL,KCxVC,IAAA,GAAiB,EAAjB,ADwVa9C,eAAlB,EAAmC;ACtV9B,ADuVHE,aCvVG,KDuVS,CAAZ,OCvVG,GAAgB,EAAhB;AACA,ADuVHiD,aCvVG,ADuVI,CAAP,WCvVG,GAEJ,EAFI;AAKP,ADmVG,KAHD,MAGO,ECnVJ,EDmVSL,OCnVd,GAAiB,IAAI,ADmVOlD,MAAf,KCnVQ,ADmVmB,CAA/B,EAAkC,ICnV1B,CAAa,KAAb,EAAoB,EAApB,CAAjB;AACA,ADmVIuD,aCnVC,ADmVM,IAAIvD,KCnVf,CAAe,ADmVX,aCnVJ;AACA,ADmVG,KAFM,MAEA,ECnVJ,EDmVSkD,SCnVd,GAAmB,EDmVSjD,GCnVJ,GDmVX,KAA2B,CCnVrB,ADmVV,CCnVyB,CDmVS,UCnVxB,EAAnB;AACA,ADmVIsD,aAAO,IAAItD,MAAX;ACjVE,ADkVH,KAFM,MAEA,IAAKiD,SClVR,KDkVsBhD,IClVtB,CAAA,CDkVO,KAA2B,CAA/B,CClVH,CDkVqC,EClV5C,YAAA;AAAA,ADmVKqD,YCnVL,CDmVY,IAAIrD,GCnVhB,GDmVK,CCnVL;AACC,ADmVG,KAFM,MAEA,ICnVF,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AAClC,ADmVGqD,aAAO,GCnVN,CDmVUpD,MAAX,CCnViB,EAApB;AACA,ADmVE,gBCnVE,QAAQ,CAAZ;AACA,kBAAK,WAAL,CAAiB,OAAjB,CAAyB,UAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAoB;AAC5C,ADmVA,QAAIc,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaQ,CAAb,OCnVS,MAAK,GAAL,CAAS,KAAT,CAAT;AACA,ADmVA,QAAI6B,MAAM,CAAV,CA/Be,CA+BF,GCnVT,CAAC,QAAQ,CAAT,IAAc,CAAd,KAAoB,CAAxB,EAA2B;AAC1B,0BAAK,IAAL,CAAU,IAAV,CAAe,KAAf;AACA,ADmVD3C,QAAI,CAAJ,iBCnVM,YAAL,CAAkB,KAAlB,IAA2B,KAA3B;AACA,ADmVD,WAAOA,IAAIuC,YAAX,EAAyB;AClVxB,ADmVCnC,UAAI,CAACZ,OAAOmD,GAAP,IAAc,GCnVZ,CDmVH,CCnVL,IDmV6B5E,YAA5B;AClVD,ADmVCsC,UAAI,CAACb,OAAOmD,MAAM,CAAb,IAAkB,IAAnB,KAA4B5E,YAAhC;AClVF,ADmVEuC,UAAI,CAACd,OAAOmD,ECnVV,IDmVgB,CAAb,IAAkB,CCnVX,GDmVR,GCnVa,EDmVe5E,SCnVpB,CAAiB,EDmV7B,ICnVY,GAA0B,CAAxC,EAA2C,QAAQ,CAAC,MAAK,YAAN,EAAoB,MAAK,IAAzB,CAAR;AAC3C,aATD;AAUA,ADmVG+C,SChWG,CAAP,ADgWQK,QAAQf,CAAR,EAAWC,CAAX,EAAcC,CAAd,CAAJ;AClVJ,KAfM;AAiBA,ADkVFJ,kBAAYC,KAAZ,CClVE,CDkViBW,CAAnB,EAAsBV,CAAtB,EAAyBC,CAAzB,CClVE,CAAA,ADkV0BC,CAA5B,QClVE,GAAP,UAAiB,KAAjB,EAA8B;AAC7B,ADkVI,UAAImC,EClVF,IAAI,EDkVM,CAAZ,EAAelC,IClVA,MAAM,CDkVKkC,GAAX,EClVA,ADkVgB3B,CClVH,ADkVb,CClVA,CDkVmBV,CClVH,ADkVhB,CClVA,CAAT,ADkV+BC,CAAtB,CClVoB,CDkVKC,CClVlC,ADkVS,CClVnB,CD0U2B,CAQqB;ACjVhD,YAAM,IAAI,SAAS,MAAM,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAT,EAA6B,EAA7B,CAAV;AACA,ADkVIqC,YClVE,CDkVKD,GClVD,CDkVN,QClVe,MAAM,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAT,EAA6B,EAA7B,CAAV;AACA,ADkVI,UAAIC,EClVF,KDkVSN,QClVI,GDkVf,EClVoB,ADkVIM,OAAON,EClVhB,CAAe,QDkVN,CClVT,CAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,CAAnB;AAEA,eAAO,UAAP;AACA,ADiVIrC,KCxVE;AASC,wBAAA,SAAA,CAAA,GAAA,GAAR,UAAY,KAAZ,EAAyB;AACxB,ADgVI,UAAIwC,EChVJ,QAAQ,ADgVM,CAAd,CChVJ,CDgVqBA,CChVL,ODgVa,CAAR;AC/UpB,ADgVG,UAAIxC,IAAIwC,KChVJ,ADgVA,KAAc,CChVV,ADgVR,EAAqB,IChVP,QAAN,CAAe,EAAf,CAAX;AACA,ADgVKrC,SClVN,MAEO,EDgVQA,QAAQrB,QAAjB;AC/UL,ADgVK0B,kBAAUA,CChVR,MAAM,EDgVW7B,MChVjB,CAAe,EAAf,ADgVF,CChVL;AACA,ADgVK8D,cAAMjC,UAAUhC,eAAhB;AC/UN,KANO;AAOT,ADgVQ,WChVR,CDgVYiE,OAAO,CAAX,EAAcA,MAAM,CAAN,CChVtB;AAhDA,ADiYQ,CCjYR,EAAA,UDiYa3B,IAAI,CAAT,EAAYA,IAAI2B,GAAhB,EAAqB3B,GAArB;ACjYK,ADkYHhB,QClYG,WDkYMgB,CAAT,IAAcpD,GClYX,GAAA,ADkYiByC,SAAU,CAACsC,MAAMA,GClYlC,ADkY4B,GAAY3B,IAAIA,CAAjB,IAAsB9B,OAAvB,IAAmCyD,MAAMA,GAAzC,CAAT,CAAN,CAAd;AADF;AAED;AACF;AACF;;AAED;;;;;;;AAQA,WAASG,aAAT,GAAyB;AACvB7C;AACAqC;AACAnC;AACA2B;AACD;AACD,OAAKgB,aAAL,GAAqBA,aAArB;;AAEA;;;;;;;;AAWA,WAASC,WAAT,GAAuB;AACrB,QAAIC,MAAM,EAAV;AACA,QAAIC,QAAQ,EAAZ;;AAEA,SAAK,IAAI/C,IAAI,CAAb,EAAgBA,IAAInC,OAApB,EAA6BmC,GAA7B;AACE+C,YAAMrD,QAAQM,CAAR,EAAW,CAAX,CAAN,IAAuBA,CAAvB;AADF,KAGA,IAAIe,IAAI,CAAR;AACA,SAAK,IAAIiC,IAAI,CAAb,EAAgBA,IAAInF,OAApB,EAA6BmF,GAA7B,EAAkC;AAChC,UAAIlC,IAAIiC,MAAMC,CAAN,CAAR;AACAF,UAAI/B,GAAJ,IAAYrB,QAAQoB,CAAR,EAAW,CAAX,CAAZ;AACAgC,UAAI/B,GAAJ,IAAYrB,QAAQoB,CAAR,EAAW,CAAX,CAAZ;AACAgC,UAAI/B,GAAJ,IAAYrB,QAAQoB,CAAR,EAAW,CAAX,CAAZ;AACD;AACD,WAAOgC,GAAP;AACD;AACD,OAAKD,WAAL,GAAmBA,WAAnB;;AAEA;;;;;AAMA,OAAKI,SAAL,GAAiBf,SAAjB;AACD;;AAED","file":"color.table.generator.e0bc49c8.map","sourceRoot":"..","sourcesContent":["/* NeuQuant Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n * See \"Kohonen neural networks for optimal colour quantization\"\n * in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n * for a discussion of the algorithm.\n * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal\n * in this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons who receive\n * copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n *\n * (JavaScript port 2012 by Johan Nordberg)\n */\n\nfunction toInt(v) {\n  return ~~v;\n}\n\nvar ncycles = 100; // number of learning cycles\nvar netsize = 256; // number of colors used\nvar maxnetpos = netsize - 1;\n\n// defs for freq and bias\nvar netbiasshift = 4; // bias for colour values\nvar intbiasshift = 16; // bias for fractions\nvar intbias = (1 << intbiasshift);\nvar gammashift = 10;\nvar gamma = (1 << gammashift);\nvar betashift = 10;\nvar beta = (intbias >> betashift); /* beta = 1/1024 */\nvar betagamma = (intbias << (gammashift - betashift));\n\n// defs for decreasing radius factor\nvar initrad = (netsize >> 3); // for 256 cols, radius starts\nvar radiusbiasshift = 6; // at 32.0 biased by 6 bits\nvar radiusbias = (1 << radiusbiasshift);\nvar initradius = (initrad * radiusbias); //and decreases by a\nvar radiusdec = 30; // factor of 1/30 each cycle\n\n// defs for decreasing alpha factor\nvar alphabiasshift = 10; // alpha starts at 1.0\nvar initalpha = (1 << alphabiasshift);\nvar alphadec; // biased by 10 bits\n\n/* radbias and alpharadbias used for radpower calculation */\nvar radbiasshift = 8;\nvar radbias = (1 << radbiasshift);\nvar alpharadbshift = (alphabiasshift + radbiasshift);\nvar alpharadbias = (1 << alpharadbshift);\n\n// four primes near 500 - assume no image has a length so large that it is\n// divisible by all four primes\nvar prime1 = 499;\nvar prime2 = 491;\nvar prime3 = 487;\nvar prime4 = 503;\nvar minpicturebytes = (3 * prime4);\n\n/*\n  Constructor: NeuQuant\n\n  Arguments:\n\n  pixels - array of pixels in RGB format\n  samplefac - sampling factor 1 to 30 where lower is better quality\n\n  >\n  > pixels = [r, g, b, r, g, b, r, g, b, ..]\n  >\n*/\nexport default function NeuQuant(pixels, samplefac) {\n  var network; // int[netsize][4]\n  var netindex; // for network lookup - really 256\n\n  // bias and freq arrays for learning\n  var bias;\n  var freq;\n  var radpower;\n\n  /*\n    Private Method: init\n\n    sets up arrays\n  */\n  function init() {\n    network = [];\n    netindex = [];\n    bias = [];\n    freq = [];\n    radpower = [];\n\n    var i, v;\n    for (i = 0; i < netsize; i++) {\n      v = (i << (netbiasshift + 8)) / netsize;\n      network[i] = [v, v, v];\n      freq[i] = intbias / netsize;\n      bias[i] = 0;\n    }\n  }\n\n  /*\n    Private Method: unbiasnet\n\n    unbiases network to give byte values 0..255 and record position i to prepare for sort\n  */\n  function unbiasnet() {\n    for (var i = 0; i < netsize; i++) {\n      network[i][0] >>= netbiasshift;\n      network[i][1] >>= netbiasshift;\n      network[i][2] >>= netbiasshift;\n      network[i][3] = i; // record color number\n    }\n  }\n\n  /*\n    Private Method: altersingle\n\n    moves neuron *i* towards biased (b,g,r) by factor *alpha*\n  */\n  function altersingle(alpha, i, b, g, r) {\n    network[i][0] -= (alpha * (network[i][0] - b)) / initalpha;\n    network[i][1] -= (alpha * (network[i][1] - g)) / initalpha;\n    network[i][2] -= (alpha * (network[i][2] - r)) / initalpha;\n  }\n\n  /*\n    Private Method: alterneigh\n\n    moves neurons in *radius* around index *i* towards biased (b,g,r) by factor *alpha*\n  */\n  function alterneigh(radius, i, b, g, r) {\n    var lo = Math.abs(i - radius);\n    var hi = Math.min(i + radius, netsize);\n\n    var j = i + 1;\n    var k = i - 1;\n    var m = 1;\n\n    var p, a;\n    while ((j < hi) || (k > lo)) {\n      a = radpower[m++];\n\n      if (j < hi) {\n        p = network[j++];\n        p[0] -= (a * (p[0] - b)) / alpharadbias;\n        p[1] -= (a * (p[1] - g)) / alpharadbias;\n        p[2] -= (a * (p[2] - r)) / alpharadbias;\n      }\n\n      if (k > lo) {\n        p = network[k--];\n        p[0] -= (a * (p[0] - b)) / alpharadbias;\n        p[1] -= (a * (p[1] - g)) / alpharadbias;\n        p[2] -= (a * (p[2] - r)) / alpharadbias;\n      }\n    }\n  }\n\n  /*\n    Private Method: contest\n\n    searches for biased BGR values\n  */\n  function contest(b, g, r) {\n    /*\n      finds closest neuron (min dist) and updates freq\n      finds best neuron (min dist-bias) and returns position\n      for frequently chosen neurons, freq[i] is high and bias[i] is negative\n      bias[i] = gamma * ((1 / netsize) - freq[i])\n    */\n\n    var bestd = ~(1 << 31);\n    var bestbiasd = bestd;\n    var bestpos = -1;\n    var bestbiaspos = bestpos;\n\n    var i, n, dist, biasdist, betafreq;\n    for (i = 0; i < netsize; i++) {\n      n = network[i];\n\n      dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\n      if (dist < bestd) {\n        bestd = dist;\n        bestpos = i;\n      }\n\n      biasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));\n      if (biasdist < bestbiasd) {\n        bestbiasd = biasdist;\n        bestbiaspos = i;\n      }\n\n      betafreq = (freq[i] >> betashift);\n      freq[i] -= betafreq;\n      bias[i] += (betafreq << gammashift);\n    }\n\n    freq[bestpos] += beta;\n    bias[bestpos] -= betagamma;\n\n    return bestbiaspos;\n  }\n\n  /*\n    Private Method: inxbuild\n\n    sorts network and builds netindex[0..255]\n  */\n  function inxbuild() {\n    var i, j, p, q, smallpos, smallval, previouscol = 0,\n      startpos = 0;\n    for (i = 0; i < netsize; i++) {\n      p = network[i];\n      smallpos = i;\n      smallval = p[1]; // index on g\n      // find smallest in i..netsize-1\n      for (j = i + 1; j < netsize; j++) {\n        q = network[j];\n        if (q[1] < smallval) { // index on g\n          smallpos = j;\n          smallval = q[1]; // index on g\n        }\n      }\n      q = network[smallpos];\n      // swap p (i) and q (smallpos) entries\n      if (i != smallpos) {\n        j = q[0];\n        q[0] = p[0];\n        p[0] = j;\n        j = q[1];\n        q[1] = p[1];\n        p[1] = j;\n        j = q[2];\n        q[2] = p[2];\n        p[2] = j;\n        j = q[3];\n        q[3] = p[3];\n        p[3] = j;\n      }\n      // smallval entry is now in position i\n\n      if (smallval != previouscol) {\n        netindex[previouscol] = (startpos + i) >> 1;\n        for (j = previouscol + 1; j < smallval; j++)\n          netindex[j] = i;\n        previouscol = smallval;\n        startpos = i;\n      }\n    }\n    netindex[previouscol] = (startpos + maxnetpos) >> 1;\n    for (j = previouscol + 1; j < 256; j++)\n      netindex[j] = maxnetpos; // really 256\n  }\n\n  /*\n    Private Method: inxsearch\n\n    searches for BGR values 0..255 and returns a color index\n  */\n  function inxsearch(b, g, r) {\n    var a, p, dist;\n\n    var bestd = 1000; // biggest possible dist is 256*3\n    var best = -1;\n\n    var i = netindex[g]; // index on g\n    var j = i - 1; // start at netindex[g] and work outwards\n\n    while ((i < netsize) || (j >= 0)) {\n      if (i < netsize) {\n        p = network[i];\n        dist = p[1] - g; // inx key\n        if (dist >= bestd) i = netsize; // stop iter\n        else {\n          i++;\n          if (dist < 0) dist = -dist;\n          a = p[0] - b;\n          if (a < 0) a = -a;\n          dist += a;\n          if (dist < bestd) {\n            a = p[2] - r;\n            if (a < 0) a = -a;\n            dist += a;\n            if (dist < bestd) {\n              bestd = dist;\n              best = p[3];\n            }\n          }\n        }\n      }\n      if (j >= 0) {\n        p = network[j];\n        dist = g - p[1]; // inx key - reverse dif\n        if (dist >= bestd) j = -1; // stop iter\n        else {\n          j--;\n          if (dist < 0) dist = -dist;\n          a = p[0] - b;\n          if (a < 0) a = -a;\n          dist += a;\n          if (dist < bestd) {\n            a = p[2] - r;\n            if (a < 0) a = -a;\n            dist += a;\n            if (dist < bestd) {\n              bestd = dist;\n              best = p[3];\n            }\n          }\n        }\n      }\n    }\n\n    return best;\n  }\n\n  /*\n    Private Method: learn\n\n    \"Main Learning Loop\"\n  */\n  function learn() {\n    var i;\n\n    var lengthcount = pixels.length;\n    var alphadec = toInt(30 + ((samplefac - 1) / 3));\n    var samplepixels = toInt(lengthcount / (3 * samplefac));\n    var delta = toInt(samplepixels / ncycles);\n    var alpha = initalpha;\n    var radius = initradius;\n\n    var rad = radius >> radiusbiasshift;\n\n    if (rad <= 1) rad = 0;\n    for (i = 0; i < rad; i++)\n      radpower[i] = toInt(alpha * (((rad * rad - i * i) * radbias) / (rad * rad)));\n\n    var step;\n    if (lengthcount < minpicturebytes) {\n      samplefac = 1;\n      step = 3;\n    } else if ((lengthcount % prime1) !== 0) {\n      step = 3 * prime1;\n    } else if ((lengthcount % prime2) !== 0) {\n      step = 3 * prime2;\n    } else if ((lengthcount % prime3) !== 0) {\n      step = 3 * prime3;\n    } else {\n      step = 3 * prime4;\n    }\n\n    var b, g, r, j;\n    var pix = 0; // current pixel\n\n    i = 0;\n    while (i < samplepixels) {\n      b = (pixels[pix] & 0xff) << netbiasshift;\n      g = (pixels[pix + 1] & 0xff) << netbiasshift;\n      r = (pixels[pix + 2] & 0xff) << netbiasshift;\n\n      j = contest(b, g, r);\n\n      altersingle(alpha, j, b, g, r);\n      if (rad !== 0) alterneigh(rad, j, b, g, r); // alter neighbours\n\n      pix += step;\n      if (pix >= lengthcount) pix -= lengthcount;\n\n      i++;\n\n      if (delta === 0) delta = 1;\n      if (i % delta === 0) {\n        alpha -= alpha / alphadec;\n        radius -= radius / radiusdec;\n        rad = radius >> radiusbiasshift;\n\n        if (rad <= 1) rad = 0;\n        for (j = 0; j < rad; j++)\n          radpower[j] = toInt(alpha * (((rad * rad - j * j) * radbias) / (rad * rad)));\n      }\n    }\n  }\n\n  /*\n    Method: buildColormap\n\n    1. initializes network\n    2. trains it\n    3. removes misconceptions\n    4. builds colorindex\n  */\n  function buildColormap() {\n    init();\n    learn();\n    unbiasnet();\n    inxbuild();\n  }\n  this.buildColormap = buildColormap;\n\n  /*\n    Method: getColormap\n\n    builds colormap from the index\n\n    returns array in the format:\n\n    >\n    > [r, g, b, r, g, b, r, g, b, ..]\n    >\n  */\n  function getColormap() {\n    var map = [];\n    var index = [];\n\n    for (var i = 0; i < netsize; i++)\n      index[network[i][3]] = i;\n\n    var k = 0;\n    for (var l = 0; l < netsize; l++) {\n      var j = index[l];\n      map[k++] = (network[j][0]);\n      map[k++] = (network[j][1]);\n      map[k++] = (network[j][2]);\n    }\n    return map;\n  }\n  this.getColormap = getColormap;\n\n  /*\n    Method: lookupRGB\n\n    looks for the closest *r*, *g*, *b* color in the map and\n    returns its index\n  */\n  this.lookupRGB = inxsearch;\n}\n\n// export default NeuQuant;","import NeuQuant from './js/NeuQuant';\nexport class ColorTableGenerator {\n\tprivate _colorTable: number[] = [];\n\tprivate _GCT: string[] = [];\n\tprivate _neuQuant: NeuQuant;\n\tprivate _distribution = 51;\n\tprivate _colorLookup: {\n\t\t[index: string]: number;\n\t} = {};\n\n\tconstructor(frame: Uint8Array) {\n\t\tthis._neuQuant = new NeuQuant(frame, 20);\n\t\tthis._neuQuant.buildColormap();\n\t\tthis._colorTable = this._neuQuant.getColormap();\n\t}\n\n\tpublic generate(): Promise<[{ [index: string]: number }, string[]]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet pixel: string = '';\n\t\t\tlet count = 0;\n\t\t\tthis._colorTable.forEach((value, index, array) => {\n\t\t\t\tpixel += this.pad(value);\n\t\t\t\tif ((index + 1) % 3 === 0) {\n\t\t\t\t\tthis._GCT.push(pixel);\n\t\t\t\t\tthis._colorLookup[pixel] = count;\n\t\t\t\t\tcount++;\n\t\t\t\t\tpixel = '';\n\t\t\t\t}\n\t\t\t\tif (index === this._colorTable.length - 1) resolve([this._colorLookup, this._GCT]);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic lookupRGB(pixel: string): number {\n\t\tconst R = parseInt(pixel.substr(0, 2), 16);\n\t\tconst G = parseInt(pixel.substr(2, 2), 16);\n\t\tconst B = parseInt(pixel.substr(4, 2), 16);\n\t\tconst pixelIndex = this._neuQuant.lookupRGB(R, G, B);\n\n\t\treturn pixelIndex as number;\n\t}\n\n\tprivate pad(color: number): string {\n\t\tif (color < 16) {\n\t\t\treturn `0${color.toString(16)}`;\n\t\t} else {\n\t\t\treturn color.toString(16);\n\t\t}\n\t}\n}\n"]}