{"version":3,"sources":["src\\lzw.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","file":"lzw.service.44e164f1.map","sourceRoot":"..","sourcesContent":["// /**\r\n//  * This class handles LZW encoding\r\n//  * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\r\n//  * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n//  * @author Thibault Imbert (AS3 version - bytearray.org)\r\n//  * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n//  * @version 0.1 AS3 implementation\r\n//  */\r\n\r\n// import { EncodedImage } from './encoded.image';\r\n\r\n// LZWEncoder = function() {\r\n// \tvar exports = {};\r\n// \tvar EOF = -1;\r\n// \tvar imgW;\r\n// \tvar imgH;\r\n// \tvar pixAry;\r\n// \tvar initCodeSize;\r\n// \tvar remaining;\r\n// \tvar curPixel;\r\n\r\n// \t// GIFCOMPR.C - GIF Image compression routines\r\n// \t// Lempel-Ziv compression based on 'compress'. GIF modifications by\r\n// \t// David Rowley (mgardi@watdcsu.waterloo.edu)\r\n// \t// General DEFINEs\r\n\r\n// \tvar BITS = 12;\r\n// \tvar HSIZE = 5003; // 80% occupancy\r\n\r\n// \t// GIF Image compression - modified 'compress'\r\n// \t// Based on: compress.c - File compression ala IEEE Computer, June 1984.\r\n// \t// By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\r\n// \t// Jim McKie (decvax!mcvax!jim)\r\n// \t// Steve Davies (decvax!vax135!petsd!peora!srd)\r\n// \t// Ken Turkowski (decvax!decwrl!turtlevax!ken)\r\n// \t// James A. Woods (decvax!ihnp4!ames!jaw)\r\n// \t// Joe Orost (decvax!vax135!petsd!joe)\r\n\r\n// \tvar n_bits; // number of bits/code\r\n// \tvar maxbits = BITS; // user settable max # bits/code\r\n// \tvar maxcode; // maximum code, given n_bits\r\n// \tvar maxmaxcode = 1 << BITS; // should NEVER generate this code\r\n// \tvar htab = [];\r\n// \tvar codetab = [];\r\n// \tvar hsize = HSIZE; // for dynamic table sizing\r\n// \tvar free_ent = 0; // first unused entry\r\n\r\n// \t// block compression parameters -- after all codes are used up,\r\n// \t// and compression rate changes, start over.\r\n\r\n// \tvar clear_flg = false;\r\n\r\n// \t// Algorithm: use open addressing double hashing (no chaining) on the\r\n// \t// prefix code / next character combination. We do a variant of Knuth's\r\n// \t// algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\r\n// \t// secondary probe. Here, the modular division first probe is gives way\r\n// \t// to a faster exclusive-or manipulation. Also do block compression with\r\n// \t// an adaptive reset, whereby the code table is cleared when the compression\r\n// \t// ratio decreases, but after the table fills. The variable-length output\r\n// \t// codes are re-sized at this point, and a special CLEAR code is generated\r\n// \t// for the decompressor. Late addition: construct the table according to\r\n// \t// file size for noticeable speed improvement on small files. Please direct\r\n// \t// questions about this implementation to ames!jaw.\r\n\r\n// \tvar g_init_bits;\r\n// \tvar ClearCode;\r\n// \tvar EOFCode;\r\n\r\n// \t// output\r\n// \t// Output the given code.\r\n// \t// Inputs:\r\n// \t// code: A n_bits-bit integer. If == -1, then EOF. This assumes\r\n// \t// that n_bits =< wordsize - 1.\r\n// \t// Outputs:\r\n// \t// Outputs code to the file.\r\n// \t// Assumptions:\r\n// \t// Chars are 8 bits long.\r\n// \t// Algorithm:\r\n// \t// Maintain a BITS character long buffer (so that 8 codes will\r\n// \t// fit in it exactly). Use the VAX insv instruction to insert each\r\n// \t// code in turn. When the buffer fills up empty it and start over.\r\n\r\n// \tvar cur_accum = 0;\r\n// \tvar cur_bits = 0;\r\n// \tvar masks = [\r\n// \t\t0x0000,\r\n// \t\t0x0001,\r\n// \t\t0x0003,\r\n// \t\t0x0007,\r\n// \t\t0x000f,\r\n// \t\t0x001f,\r\n// \t\t0x003f,\r\n// \t\t0x007f,\r\n// \t\t0x00ff,\r\n// \t\t0x01ff,\r\n// \t\t0x03ff,\r\n// \t\t0x07ff,\r\n// \t\t0x0fff,\r\n// \t\t0x1fff,\r\n// \t\t0x3fff,\r\n// \t\t0x7fff,\r\n// \t\t0xffff,\r\n// \t];\r\n\r\n// \t// Number of characters so far in this 'packet'\r\n// \tvar a_count;\r\n\r\n// \t// Define the storage for the packet accumulator\r\n// \tvar accum = [];\r\n\r\n// \tvar LZWEncoder = (exports.LZWEncoder = function LZWEncoder(\r\n// \t\twidth,\r\n// \t\theight,\r\n// \t\tpixels,\r\n// \t\tcolor_depth\r\n// \t) {\r\n// \t\timgW = width;\r\n// \t\timgH = height;\r\n// \t\tpixAry = pixels;\r\n// \t\tinitCodeSize = Math.max(2, color_depth);\r\n// \t});\r\n\r\n// \t// Add a character to the end of the current packet, and if it is 254\r\n// \t// characters, flush the packet to disk.\r\n// \tvar char_out = function char_out(c, outs) {\r\n// \t\taccum[a_count++] = c;\r\n// \t\tif (a_count >= 254) flush_char(outs);\r\n// \t};\r\n\r\n// \t// Clear out the hash table\r\n// \t// table clear for block compress\r\n\r\n// \tvar cl_block = function cl_block(outs) {\r\n// \t\tcl_hash(hsize);\r\n// \t\tfree_ent = ClearCode + 2;\r\n// \t\tclear_flg = true;\r\n// \t\toutput(ClearCode, outs);\r\n// \t};\r\n\r\n// \t// reset code table\r\n// \tvar cl_hash = function cl_hash(hsize) {\r\n// \t\tfor (var i = 0; i < hsize; ++i) htab[i] = -1;\r\n// \t};\r\n\r\n// \tvar compress = (exports.compress = function compress(init_bits, outs) {\r\n// \t\tvar fcode;\r\n// \t\tvar i; /* = 0 */\r\n// \t\tvar c;\r\n// \t\tvar ent;\r\n// \t\tvar disp;\r\n// \t\tvar hsize_reg;\r\n// \t\tvar hshift;\r\n\r\n// \t\t// Set up the globals: g_init_bits - initial number of bits\r\n// \t\tg_init_bits = init_bits;\r\n\r\n// \t\t// Set up the necessary values\r\n// \t\tclear_flg = false;\r\n// \t\tn_bits = g_init_bits;\r\n// \t\tmaxcode = MAXCODE(n_bits);\r\n\r\n// \t\tClearCode = 1 << (init_bits - 1);\r\n// \t\tEOFCode = ClearCode + 1;\r\n// \t\tfree_ent = ClearCode + 2;\r\n\r\n// \t\ta_count = 0; // clear packet\r\n\r\n// \t\tent = nextPixel();\r\n\r\n// \t\thshift = 0;\r\n// \t\tfor (fcode = hsize; fcode < 65536; fcode *= 2) ++hshift;\r\n// \t\thshift = 8 - hshift; // set hash code range bound\r\n\r\n// \t\thsize_reg = hsize;\r\n// \t\tcl_hash(hsize_reg); // clear hash table\r\n\r\n// \t\toutput(ClearCode, outs);\r\n\r\n// \t\touter_loop: while ((c = nextPixel()) != EOF) {\r\n// \t\t\tfcode = (c << maxbits) + ent;\r\n// \t\t\ti = (c << hshift) ^ ent; // xor hashing\r\n\r\n// \t\t\tif (htab[i] == fcode) {\r\n// \t\t\t\tent = codetab[i];\r\n// \t\t\t\tcontinue;\r\n// \t\t\t} else if (htab[i] >= 0) {\r\n// \t\t\t\t// non-empty slot\r\n\r\n// \t\t\t\tdisp = hsize_reg - i; // secondary hash (after G. Knott)\r\n// \t\t\t\tif (i === 0) disp = 1;\r\n\r\n// \t\t\t\tdo {\r\n// \t\t\t\t\tif ((i -= disp) < 0) i += hsize_reg;\r\n\r\n// \t\t\t\t\tif (htab[i] == fcode) {\r\n// \t\t\t\t\t\tent = codetab[i];\r\n// \t\t\t\t\t\tcontinue outer_loop;\r\n// \t\t\t\t\t}\r\n// \t\t\t\t} while (htab[i] >= 0);\r\n// \t\t\t}\r\n\r\n// \t\t\toutput(ent, outs);\r\n// \t\t\tent = c;\r\n// \t\t\tif (free_ent < maxmaxcode) {\r\n// \t\t\t\tcodetab[i] = free_ent++; // code -> hashtable\r\n// \t\t\t\thtab[i] = fcode;\r\n// \t\t\t} else cl_block(outs);\r\n// \t\t}\r\n\r\n// \t\t// Put out the final code.\r\n// \t\toutput(ent, outs);\r\n// \t\toutput(EOFCode, outs);\r\n// \t});\r\n\r\n// \t// ----------------------------------------------------------------------------\r\n// \tvar encode = (exports.encode = function encode(os) {\r\n// \t\tconsole.log(os);\r\n// \t\tos.write(initCodeSize); // write \"initial code size\" byte\r\n// \t\tremaining = imgW * imgH; // reset navigation variables\r\n// \t\tcurPixel = 0;\r\n// \t\tcompress(initCodeSize + 1, os); // compress and write the pixel data\r\n// \t\tos.write(0); // write block terminator\r\n// \t});\r\n\r\n// \t// Flush the packet to disk, and reset the accumulator\r\n// \tvar flush_char = function flush_char(outs) {\r\n// \t\tif (a_count > 0) {\r\n// \t\t\touts.write(a_count);\r\n// \t\t\touts.writeArray(accum, a_count);\r\n// \t\t\ta_count = 0;\r\n// \t\t}\r\n// \t};\r\n\r\n// \tvar MAXCODE = function MAXCODE(n_bits) {\r\n// \t\treturn (1 << n_bits) - 1;\r\n// \t};\r\n\r\n// \t// ----------------------------------------------------------------------------\r\n// \t// Return the next pixel from the image\r\n// \t// ----------------------------------------------------------------------------\r\n\r\n// \tvar nextPixel = function nextPixel() {\r\n// \t\tif (remaining === 0) return EOF;\r\n// \t\t--remaining;\r\n// \t\tvar pix = pixAry[curPixel++];\r\n// \t\treturn pix & 0xff;\r\n// \t};\r\n\r\n// \tvar output = function output(code, outs) {\r\n// \t\tcur_accum &= masks[cur_bits];\r\n\r\n// \t\tif (cur_bits > 0) cur_accum |= code << cur_bits;\r\n// \t\telse cur_accum = code;\r\n\r\n// \t\tcur_bits += n_bits;\r\n\r\n// \t\twhile (cur_bits >= 8) {\r\n// \t\t\tchar_out(cur_accum & 0xff, outs);\r\n// \t\t\tcur_accum >>= 8;\r\n// \t\t\tcur_bits -= 8;\r\n// \t\t}\r\n\r\n// \t\t// If the next entry is going to be too big for the code size,\r\n// \t\t// then increase it, if possible.\r\n\r\n// \t\tif (free_ent > maxcode || clear_flg) {\r\n// \t\t\tif (clear_flg) {\r\n// \t\t\t\tmaxcode = MAXCODE((n_bits = g_init_bits));\r\n// \t\t\t\tclear_flg = false;\r\n// \t\t\t} else {\r\n// \t\t\t\t++n_bits;\r\n// \t\t\t\tif (n_bits == maxbits) maxcode = maxmaxcode;\r\n// \t\t\t\telse maxcode = MAXCODE(n_bits);\r\n// \t\t\t}\r\n// \t\t}\r\n\r\n// \t\tif (code == EOFCode) {\r\n// \t\t\t// At EOF, write the rest of the buffer.\r\n// \t\t\twhile (cur_bits > 0) {\r\n// \t\t\t\tchar_out(cur_accum & 0xff, outs);\r\n// \t\t\t\tcur_accum >>= 8;\r\n// \t\t\t\tcur_bits -= 8;\r\n// \t\t\t}\r\n\r\n// \t\t\tflush_char(outs);\r\n// \t\t}\r\n// \t};\r\n\r\n// \tLZWEncoder.apply(this, arguments);\r\n// \treturn exports;\r\n// };\r\n\r\n// onmessage = e => {\r\n// \tconst {\r\n// \t\tdata: { width, height, data, colorDepth, gif },\r\n// \t} = e;\r\n\r\n// \tconst encoder = new LZWEncoder(width, height, data, colorDepth);\r\n// \tencoder.encode(gif as EncodedImage);\r\n// \tconsole.log(gif);\r\n// };\r\n"]}