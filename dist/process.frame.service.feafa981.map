{"version":3,"sources":["src\\process.frame.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,YAAY,mBAAC,EAAD,EAA4B;QAAzB,KAAA,GAAA;QAAQ,UAAA,GAAA;QAAS,OAAA,GAAA;AAC/B,YAAQ,OAAR;AACC,aAAK,cAAL;AACC,uBAAW,IAAX;AACA;AACD;AACC,kBAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACA;AANF;AAQA,CATD;AAWA,SAAA,UAAA,CAAoB,EAApB,EAAkG;QAA5E,QAAA,GAAA;QAAO,QAAA,GAAA;QAAO,SAAA,GAAA;AACnC,QAAM,MAAO,SAAS,CAAV,GAAe,CAA3B;AACA,QAAM,SAAS,QAAQ,CAAvB;AAEA,QAAI,UAAU,IAAI,UAAJ,CAAe,MAAf,CAAd;AACA,SAAK,IAAI,SAAS,CAAlB,EAAqB,SAAS,GAA9B,EAAmC,EAAE,MAArC,EAA6C;AAC5C,YAAI,aAAa,SAAS,MAA1B;AACA,YAAI,gBAAgB,CAAC,SAAS,MAAT,GAAkB,CAAnB,IAAwB,MAA5C;AAEA,gBAAQ,GAAR,CAAY,MAAM,QAAN,CAAe,UAAf,EAA2B,aAAa,MAAxC,CAAZ;AACA,cAAM,UAAN,CAAiB,UAAjB,EAA6B,aAA7B,EAA4C,gBAAgB,MAA5D;AACA,cAAM,GAAN,CAAU,OAAV,EAAmB,aAAnB;AACA;AACD,cAAU,EAAE,OAAK,KAAP,EAAS,OAAK,KAAd,EAAgB,QAAM,MAAtB,EAAV;AACA;AAED;;;;;;;;AAQA,SAAA,SAAA,CAAmB,EAAnB,EAAiG;AAChG;AACA;AACA;QAHoB,QAAA,GAAA;QAAO,SAAA,GAAA;QAAQ,QAAA,GAAA;AAKnC,QAAM,mBAAmB,MAAM,MAAN,CAAa,UAAC,KAAD,EAAgB,KAAhB,EAA6B;AAAK,eAAA,CAAC,QAAQ,CAAT,IAAc,CAAd,KAAoB,CAApB;AAAqB,KAApE,CAAzB;AACA,QAAM,gBAA0B,EAAhC;AACA,QAAI,QAAQ,EAAZ;AACA,qBAAiB,OAAjB,CAAyB,UAAC,KAAD,EAAQ,KAAR,EAAa;AACrC,iBAAS,IAAI,KAAJ,CAAT;AACA,YAAI,CAAC,QAAQ,CAAT,IAAc,CAAd,KAAoB,CAAxB,EAA2B;AAC1B,0BAAc,IAAd,CAAmB,KAAnB;AACA,oBAAQ,EAAR;AACA;AACD,KAND;AAOA,YAAQ,GAAR,CAAY,eAAZ,EAA6B,aAA7B;AAEA,gBAAY,EAAE,SAAS,uBAAX,EAAoC,MAAM,EAAE,kBAAgB,gBAAlB,EAAoB,eAAa,aAAjC,EAA1C,EAAZ;AACA;AAED,SAAA,GAAA,CAAa,KAAb,EAA0B;AACzB,QAAI,QAAQ,EAAZ,EAAgB;AACf,eAAO,MAAI,MAAM,QAAN,CAAe,EAAf,CAAX;AACA,KAFD,MAEO;AACN,eAAO,MAAM,QAAN,CAAe,EAAf,CAAP;AACA;AACD","file":"process.frame.service.feafa981.map","sourceRoot":"..","sourcesContent":["onmessage = ({ data: { message, data } }) => {\r\n\tswitch (message) {\r\n\t\tcase 'processFrame':\r\n\t\t\tflipFrames(data);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error('invalid message to GIF worker');\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n\r\nfunction flipFrames({ frame, width, height }: { frame: Uint8Array; width: number; height: number }) {\r\n\tconst mid = (height / 2) | 0;\r\n\tconst rowLen = width * 4;\r\n\r\n\tlet flipRow = new Uint8Array(rowLen);\r\n\tfor (let rowNum = 0; rowNum < mid; ++rowNum) {\r\n\t\tlet topPointer = rowNum * rowLen;\r\n\t\tlet bottomPointer = (height - rowNum - 1) * rowLen;\r\n\r\n\t\tflipRow.set(frame.subarray(topPointer, topPointer + rowLen));\r\n\t\tframe.copyWithin(topPointer, bottomPointer, bottomPointer + rowLen);\r\n\t\tframe.set(flipRow, bottomPointer);\r\n\t}\r\n\ttoRGBData({ frame, width, height });\r\n}\r\n\r\n/**\r\n * Removes Alpha values from frame and transform data into number[] and string[]\r\n *\r\n * @param frame\r\n * @param width\r\n * @param hieght\r\n * @return { rgbData:number[], rgbData: string[]}\r\n */\r\nfunction toRGBData({ frame, height, width }: { frame: Uint8Array; height: number; width: number }) {\r\n\t//create pixels from frame\r\n\t//remove alpha\r\n\t//transform pixels into string formated version\r\n\r\n\tconst numericalRGBData = frame.filter((pixel: number, index: number) => (index + 1) % 4 !== 0);\r\n\tconst stringRGBData: string[] = [];\r\n\tlet pixel = '';\r\n\tnumericalRGBData.forEach((color, index) => {\r\n\t\tpixel += pad(color);\r\n\t\tif ((index + 1) % 3 === 0) {\r\n\t\t\tstringRGBData.push(pixel);\r\n\t\t\tpixel = '';\r\n\t\t}\r\n\t});\r\n\tconsole.log('stringRGBData', stringRGBData);\r\n\r\n\tpostMessage({ message: 'processFrame complete', data: { numericalRGBData, stringRGBData } });\r\n}\r\n\r\nfunction pad(color: number): string {\r\n\tif (color < 16) {\r\n\t\treturn `0${color.toString(16)}`;\r\n\t} else {\r\n\t\treturn color.toString(16);\r\n\t}\r\n}\r\n"]}