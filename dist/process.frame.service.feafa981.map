{"version":3,"sources":["src\\process.frame.service.ts"],"names":[],"mappings":"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","file":"process.frame.service.feafa981.map","sourceRoot":"..","sourcesContent":["const ctx: Worker = self as any;\naddEventListener('message', async ({ data: { job, params } }) => {\n\tswitch (job) {\n\t\tcase 'flipFrame':\n\t\t\tconsole.log(`recieved request to ${job}...ðŸ’«`);\n\t\t\tconst { frame, width, height } = params;\n\t\t\tpostMessage(await flipFrame(frame, width, height));\n\t\t\tbreak;\n\t}\n});\n\nonmessage = routeCall;\n\nexport function flipFrame(\n\tframe: Uint8Array,\n\twidth: number,\n\theight: number\n): Promise<{ numericalRGBData: Uint8Array; stringRGBData: string[] }> {\n\treturn new Promise(async (resolve, reject) => {\n\t\tconst mid = (height / 2) | 0;\n\t\tconst rowLen = width * 4;\n\n\t\tlet flipRow = new Uint8Array(rowLen);\n\t\tfor (let rowNum = 0; rowNum < mid; ++rowNum) {\n\t\t\tlet topPointer = rowNum * rowLen;\n\t\t\tlet bottomPointer = (height - rowNum - 1) * rowLen;\n\t\t\tif (frame === undefined) reject();\n\t\t\tflipRow.set(frame.subarray(topPointer, topPointer + rowLen));\n\t\t\tframe.copyWithin(topPointer, bottomPointer, bottomPointer + rowLen);\n\t\t\tframe.set(flipRow, bottomPointer);\n\t\t}\n\t\tresolve(toRGBData(frame));\n\t});\n}\n\n/**\n * Removes Alpha values from frame and transform data into number[] and string[]\n *\n * @param frame\n * @param width\n * @param hieght\n * @return { rgbData:number[], rgbData: string[]}\n */\nfunction toRGBData(frame: Uint8Array): Promise<{ numericalRGBData: Uint8Array; stringRGBData: string[] }> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst numericalRGBData = frame.filter((pixel: number, index: number) => (index + 1) % 4 !== 0);\n\t\tconst stringRGBData: string[] = [];\n\t\tlet pixel = '';\n\t\tnumericalRGBData.forEach((color, index) => {\n\t\t\tpixel += pad(color);\n\t\t\tif ((index + 1) % 3 === 0) {\n\t\t\t\tstringRGBData.push(pixel);\n\t\t\t\tpixel = '';\n\t\t\t}\n\t\t});\n\t\tctx.postMessage({ message: 'processFrame complete', data: { numericalRGBData, stringRGBData } });\n\t\t// resolve({ numericalRGBData, stringRGBData });\n\t});\n}\n\nfunction pad(color: number): string {\n\tif (color < 16) {\n\t\treturn `0${color.toString(16)}`;\n\t} else {\n\t\treturn color.toString(16);\n\t}\n}\n\nfunction finished(numericalRGBFrames: Uint8Array[], stringRGBFrames: string[][]) {\n\tctx.postMessage({ message: 'processFrame complete', data: { numericalRGBFrames, stringRGBFrames } });\n}\n\nasync function routeCall({\n\tdata: { job, params },\n}: {\n\tdata: { job: string; params: { frames: Uint8Array[]; width: number; height: number } };\n}) {\n\tswitch (job) {\n\t\tcase 'flipFrame':\n\t\t\tconsole.log(`recieved request to ${job}...ðŸ’«`);\n\t\t\tconst { frames, width, height } = params;\n\t\t\tif (frames === undefined) break;\n\n\t\t\tconst numericalRGBFrames: Uint8Array[] = [];\n\t\t\tconst stringRGBFrames: string[][] = [];\n\t\t\tconsole.log(frames);\n\t\t\tframes.forEach(async frame => {\n\t\t\t\tif (frame === undefined) {\n\t\t\t\t} else {\n\t\t\t\t\tconst { numericalRGBData, stringRGBData } = await flipFrame(frame, width, height);\n\t\t\t\t\tnumericalRGBFrames.push(numericalRGBData);\n\t\t\t\t\tstringRGBFrames.push(stringRGBData);\n\t\t\t\t}\n\t\t\t});\n\t\t\tfinished(numericalRGBFrames, stringRGBFrames);\n\t\t\tbreak;\n\t}\n}\n"]}