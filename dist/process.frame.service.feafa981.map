{"version":3,"sources":["src\\process.frame.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAM,MAAc,IAApB;AAEA,iBAAiB,SAAjB,EAA4B,UAAC,EAAD,EAA0B;QAAvB,KAAA,GAAA;QAAQ,MAAA,GAAA;QAAK,SAAA,GAAA;AAC3C,YAAQ,GAAR;AACC,aAAK,YAAL;AACS,gBAAA,SAAA,OAAA,MAAA;AAAA,gBAAQ,QAAA,OAAA,KAAR;AAAA,gBAAe,SAAA,OAAA,MAAf;AACR,uBAAW,MAAX,EAAmB,KAAnB,EAA0B,MAA1B;AAHF;AAKA,CAND;AAQA,SAAA,UAAA,CAA2B,MAA3B,EAAiD,KAAjD,EAAgE,MAAhE,EAA8E;AAC7E,QAAM,qBAAmC,EAAzC;AACA,QAAM,kBAA8B,EAApC;AACA,WAAO,OAAP,CAAe,UAAA,KAAA,EAAK;AACnB,YAAM,MAAO,SAAS,CAAV,GAAe,CAA3B;AACA,YAAM,SAAS,QAAQ,CAAvB;AAEA,YAAI,UAAU,IAAI,UAAJ,CAAe,MAAf,CAAd;AACA,aAAK,IAAI,SAAS,CAAlB,EAAqB,SAAS,GAA9B,EAAmC,EAAE,MAArC,EAA6C;AAC5C,gBAAI,aAAa,SAAS,MAA1B;AACA,gBAAI,gBAAgB,CAAC,SAAS,MAAT,GAAkB,CAAnB,IAAwB,MAA5C;AACA,oBAAQ,GAAR,CAAY,MAAM,QAAN,CAAe,UAAf,EAA2B,aAAa,MAAxC,CAAZ;AACA,kBAAM,UAAN,CAAiB,UAAjB,EAA6B,aAA7B,EAA4C,gBAAgB,MAA5D;AACA,kBAAM,GAAN,CAAU,OAAV,EAAmB,aAAnB;AACA;AACK,YAAA,KAAA,UAAA,KAAA,CAAA;AAAA,YAAE,mBAAA,GAAA,gBAAF;AAAA,YAAoB,gBAAA,GAAA,aAApB;AACN,2BAAmB,IAAnB,CAAwB,gBAAxB;AACA,wBAAgB,IAAhB,CAAqB,aAArB;AACA,KAfD;AAgBA,QAAI,WAAJ,CAAgB,EAAE,oBAAkB,kBAApB,EAAsB,iBAAe,eAArC,EAAhB;AACA;AApBD,QAAA,UAAA,GAAA,UAAA;AAsBA,SAAA,SAAA,CAAmB,KAAnB,EAAoC;AACnC,QAAM,mBAAmB,MAAM,MAAN,CAAa,UAAC,KAAD,EAAgB,KAAhB,EAA6B;AAAK,eAAA,CAAC,QAAQ,CAAT,IAAc,CAAd,KAAoB,CAApB;AAAqB,KAApE,CAAzB;AAEA,QAAM,gBAA0B,EAAhC;AACA,QAAI,QAAQ,EAAZ;AACA,qBAAiB,OAAjB,CAAyB,UAAC,KAAD,EAAQ,KAAR,EAAa;AACrC,iBAAS,IAAI,KAAJ,CAAT;AACA,YAAI,CAAC,QAAQ,CAAT,IAAc,CAAd,KAAoB,CAAxB,EAA2B;AAC1B,0BAAc,IAAd,CAAmB,KAAnB;AACA,oBAAQ,EAAR;AACA;AACD,KAND;AAOA,WAAO,EAAE,kBAAgB,gBAAlB,EAAoB,eAAa,aAAjC,EAAP;AACA;AAED,SAAA,GAAA,CAAa,KAAb,EAA0B;AACzB,QAAI,QAAQ,EAAZ,EAAgB;AACf,eAAO,MAAI,MAAM,QAAN,CAAe,EAAf,CAAX;AACA,KAFD,MAEO;AACN,eAAO,MAAM,QAAN,CAAe,EAAf,CAAP;AACA;AACD","file":"process.frame.service.feafa981.map","sourceRoot":"..","sourcesContent":["const ctx: Worker = self as any;\n\naddEventListener('message', ({ data: { job, params } }) => {\n\tswitch (job) {\n\t\tcase 'flipFrames':\n\t\t\tconst { frames, width, height } = params;\n\t\t\tflipFrames(frames, width, height);\n\t}\n});\n\nexport function flipFrames(frames: Uint8Array[], width: number, height: number) {\n\tconst numericalRGBFrames: Uint8Array[] = [];\n\tconst stringRGBFrames: string[][] = [];\n\tframes.forEach(frame => {\n\t\tconst mid = (height / 2) | 0;\n\t\tconst rowLen = width * 4;\n\n\t\tlet flipRow = new Uint8Array(rowLen);\n\t\tfor (let rowNum = 0; rowNum < mid; ++rowNum) {\n\t\t\tlet topPointer = rowNum * rowLen;\n\t\t\tlet bottomPointer = (height - rowNum - 1) * rowLen;\n\t\t\tflipRow.set(frame.subarray(topPointer, topPointer + rowLen));\n\t\t\tframe.copyWithin(topPointer, bottomPointer, bottomPointer + rowLen);\n\t\t\tframe.set(flipRow, bottomPointer);\n\t\t}\n\t\tconst { numericalRGBData, stringRGBData } = toRGBData(frame);\n\t\tnumericalRGBFrames.push(numericalRGBData);\n\t\tstringRGBFrames.push(stringRGBData);\n\t});\n\tctx.postMessage({ numericalRGBFrames, stringRGBFrames });\n}\n\nfunction toRGBData(frame: Uint8Array): { numericalRGBData: Uint8Array; stringRGBData: string[] } {\n\tconst numericalRGBData = frame.filter((pixel: number, index: number) => (index + 1) % 4 !== 0);\n\n\tconst stringRGBData: string[] = [];\n\tlet pixel = '';\n\tnumericalRGBData.forEach((color, index) => {\n\t\tpixel += pad(color);\n\t\tif ((index + 1) % 3 === 0) {\n\t\t\tstringRGBData.push(pixel);\n\t\t\tpixel = '';\n\t\t}\n\t});\n\treturn { numericalRGBData, stringRGBData };\n}\n\nfunction pad(color: number): string {\n\tif (color < 16) {\n\t\treturn `0${color.toString(16)}`;\n\t} else {\n\t\treturn color.toString(16);\n\t}\n}\n"]}