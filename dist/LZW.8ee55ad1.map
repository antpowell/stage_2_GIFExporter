{"version":3,"sources":["src\\LZW.ts"],"names":[],"mappings":"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","file":"LZW.8ee55ad1.map","sourceRoot":"..","sourcesContent":["/**\n * This class handles LZW encoding\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\n * @author Thibault Imbert (AS3 version - bytearray.org)\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\n * @author Anthony Powell (TypeScript version)\n * @version 0.1 AS3 implementation\n */\n\nimport { EncodedImage } from './encoded.image';\nexport class LZWEncoder {\n\tprivate readonly EOF = 1;\n\n\t// GIFCOMPR.C - GIF Image compression routines\n\t// Lempel-Ziv compression based on 'compress'. GIF modifications by\n\t// David Rowley (mgardi@watdcsu.waterloo.edu)\n\t// General DEFINEs\n\n\tprivate readonly BITS = 12;\n\tprivate readonly HSIZE = 5003;\n\n\tprivate _imgW: number;\n\tprivate _imgH: number;\n\tprivate _pixels: number[];\n\tprivate _initCodeSize: number;\n\tprivate _remaining: number;\n\tprivate _curPixel: number;\n\n\t// GIF Image compression - modified 'compress'\n\t// Based on: compress.c - File compression ala IEEE Computer, June 1984.\n\t// By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n\t// Jim McKie (decvax!mcvax!jim)\n\t// Steve Davies (decvax!vax135!petsd!peora!srd)\n\t// Ken Turkowski (decvax!decwrl!turtlevax!ken)\n\t// James A. Woods (decvax!ihnp4!ames!jaw)\n\t// Joe Orost (decvax!vax135!petsd!joe)\n\n\tprivate _n_bits: number; // number of bits/code\n\tprivate _maxbits = this.BITS; // user settable max # bits/code\n\tprivate _maxcode: number; // maximum code, given n_bits\n\tprivate _maxmaxcode = 1 << this.BITS; // should NEVER generate this code\n\tprivate _htab: number[] = [];\n\tprivate _codetab: number[] = [];\n\tprivate _hsize = this.HSIZE; // for dynamic table sizing\n\tprivate _free_ent = 0; // first unused entry\n\n\t// block compression parameters -- after all codes are used up,\n\t// and compression rate changes, start over.\n\n\tprivate _clear_flg = false;\n\n\t// Algorithm: use open addressing double hashing (no chaining) on the\n\t// prefix code / next character combination. We do a variant of Knuth's\n\t// algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n\t// secondary probe. Here, the modular division first probe is gives way\n\t// to a faster exclusive-or manipulation. Also do block compression with\n\t// an adaptive reset, whereby the code table is cleared when the compression\n\t// ratio decreases, but after the table fills. The variable-length output\n\t// codes are re-sized at this point, and a special CLEAR code is generated\n\t// for the decompressor. Late addition: construct the table according to\n\t// file size for noticeable speed improvement on small files. Please direct\n\t// questions about this implementation to ames!jaw.\n\n\tprivate _g_init_bits: number;\n\tprivate _ClearCode: number;\n\tprivate _EOFCode: number;\n\n\t// output\n\t// Output the given code.\n\t// Inputs:\n\t// code: A n_bits-bit integer. If == -1, then EOF. This assumes\n\t// that n_bits =< wordsize - 1.\n\t// Outputs:\n\t// Outputs code to the file.\n\t// Assumptions:\n\t// Chars are 8 bits long.\n\t// Algorithm:\n\t// Maintain a BITS character long buffer (so that 8 codes will\n\t// fit in it exactly). Use the VAX insv instruction to insert each\n\t// code in turn. When the buffer fills up empty it and start over.\n\n\tprivate _cur_accum = 0;\n\tprivate _cur_bits = 0;\n\tprivate _masks = [\n\t\t0x0000,\n\t\t0x0001,\n\t\t0x0003,\n\t\t0x0007,\n\t\t0x000f,\n\t\t0x001f,\n\t\t0x003f,\n\t\t0x007f,\n\t\t0x00ff,\n\t\t0x01ff,\n\t\t0x03ff,\n\t\t0x07ff,\n\t\t0x0fff,\n\t\t0x1fff,\n\t\t0x3fff,\n\t\t0x7fff,\n\t\t0xffff,\n\t];\n\n\t// Number of characters so far in this 'packet'\n\tprivate _a_count: number;\n\n\t// Define the storage for the packet accumulator\n\tprivate _accum: number[] = [];\n\n\tconstructor(width: number, height: number, pixels: number[], colorDepth: number) {\n\t\tthis._imgW = width;\n\t\tthis._imgH = height;\n\t\tthis._pixels = pixels;\n\t\tthis._initCodeSize = Math.max(2, colorDepth);\n\t}\n\n\t// Add a character to the end of the current packet, and if it is 254\n\t// characters, flush the packet to disk.\n\tprivate writeCharToPacket(c: number, outs: EncodedImage): void {\n\t\tthis._accum[this._a_count++] = c;\n\t\tif (this._a_count >= 254) this.flush_char(outs);\n\t}\n\n\t// Clear out the hash table\n\t// table clear for block compress\n\n\tprivate cl_block(outs: EncodedImage): void {\n\t\tthis.cl_hash(this._hsize);\n\t\tthis._free_ent = this._ClearCode + 2;\n\t\tthis._clear_flg = true;\n\t\tthis.output(this._ClearCode, outs);\n\t}\n\n\t// reset code table\n\tprivate cl_hash(hsize: number): void {\n\t\tfor (let i = 0; i < hsize; ++i) this._htab[i] = -1;\n\t}\n\n\tprivate compress(init_bits: number, outs: EncodedImage) {\n\t\tlet fcode;\n\t\tlet i; /* = 0 */\n\t\tlet c;\n\t\tlet ent;\n\t\tlet disp;\n\t\tlet hsize_reg;\n\t\tlet hshift;\n\n\t\t// Set up the globals: g_init_bits - initial number of bits\n\t\tthis._g_init_bits = init_bits;\n\n\t\t// Set up the necessary values\n\t\tthis._clear_flg = false;\n\t\tthis._n_bits = this._g_init_bits;\n\t\tthis._maxcode = this.MAXCODE(this._n_bits);\n\n\t\tthis._ClearCode = 1 << (init_bits - 1);\n\t\tthis._EOFCode = this._ClearCode + 1;\n\t\tthis._free_ent = this._ClearCode + 2;\n\n\t\tthis._a_count = 0; // clear packet\n\n\t\tent = this.nextPixel();\n\n\t\thshift = 0;\n\t\tfor (fcode = this._hsize; fcode < 65536; fcode *= 2) ++hshift;\n\t\thshift = 8 - hshift; // set hash code range bound\n\n\t\thsize_reg = this._hsize;\n\t\tthis.cl_hash(hsize_reg); // clear hash table\n\n\t\tthis.output(this._ClearCode, outs);\n\n\t\touter_loop: while ((c = this.nextPixel()) != this.EOF) {\n\t\t\tfcode = (c << this._maxbits) + ent;\n\t\t\ti = (c << hshift) ^ ent; // xor hashing\n\n\t\t\tif (this._htab[i] == fcode) {\n\t\t\t\tent = this._codetab[i];\n\t\t\t\tcontinue;\n\t\t\t} else if (this._htab[i] >= 0) {\n\t\t\t\t// non-empty slot\n\n\t\t\t\tdisp = hsize_reg - i; // secondary hash (after G. Knott)\n\t\t\t\tif (i === 0) disp = 1;\n\n\t\t\t\tdo {\n\t\t\t\t\tif ((i -= disp) < 0) i += hsize_reg;\n\n\t\t\t\t\tif (this._htab[i] == fcode) {\n\t\t\t\t\t\tent = this._codetab[i];\n\t\t\t\t\t\tcontinue outer_loop;\n\t\t\t\t\t}\n\t\t\t\t} while (this._htab[i] >= 0);\n\t\t\t}\n\n\t\t\tthis.output(ent, outs);\n\t\t\tent = c;\n\t\t\tif (this._free_ent < this._maxmaxcode) {\n\t\t\t\tthis._codetab[i] = this._free_ent++; // code -> hashtable\n\t\t\t\tthis._htab[i] = fcode;\n\t\t\t} else this.cl_block(outs);\n\t\t}\n\n\t\t// Put out the final code.\n\t\tthis.output(ent, outs);\n\t\tthis.output(this._EOFCode, outs);\n\t}\n\n\t// ----------------------------------------------------------------------------\n\tpublic encode(os: EncodedImage) {\n\t\tos.write(this._initCodeSize); // write \"initial code size\" byte\n\t\tthis._remaining = this._imgW * this._imgH; // reset navigation variables\n\t\tthis._curPixel = 0;\n\t\tthis.compress(this._initCodeSize + 1, os); // compress and write the pixel data\n\t\tos.write(0); // write block terminator\n\t}\n\n\t// Flush the packet to disk, and reset the accumulator\n\tprivate flush_char(outs: EncodedImage) {\n\t\tif (this._a_count > 0) {\n\t\t\touts.write(this._a_count);\n\t\t\touts.writeArray(this._accum, this._a_count);\n\t\t\tthis._a_count = 0;\n\t\t}\n\t}\n\n\tprivate MAXCODE(n_bits: number) {\n\t\treturn (1 << n_bits) - 1;\n\t}\n\n\t// ----------------------------------------------------------------------------\n\t// Return the next pixel from the image\n\t// ----------------------------------------------------------------------------\n\n\tprivate nextPixel() {\n\t\tif (this._remaining === 0) return this.EOF;\n\t\t--this._remaining;\n\t\tlet pix = this._pixels[this._curPixel++];\n\t\treturn pix & 0xff;\n\t}\n\n\tprivate output(code: number, outs: EncodedImage) {\n\t\tthis._cur_accum &= this._masks[this._cur_bits];\n\n\t\tif (this._cur_bits > 0) this._cur_accum |= code << this._cur_bits;\n\t\telse this._cur_accum = code;\n\n\t\tthis._cur_bits += this._n_bits;\n\n\t\twhile (this._cur_bits >= 8) {\n\t\t\tthis.writeCharToPacket(this._cur_accum & 0xff, outs);\n\t\t\tthis._cur_accum >>= 8;\n\t\t\tthis._cur_bits -= 8;\n\t\t}\n\n\t\t// If the next entry is going to be too big for the code size,\n\t\t// then increase it, if possible.\n\n\t\tif (this._free_ent > this._maxcode || this._clear_flg) {\n\t\t\tif (this._clear_flg) {\n\t\t\t\tthis._maxcode = this.MAXCODE((this._n_bits = this._g_init_bits));\n\t\t\t\tthis._clear_flg = false;\n\t\t\t} else {\n\t\t\t\t++this._n_bits;\n\t\t\t\tif (this._n_bits == this._maxbits) this._maxcode = this._maxmaxcode;\n\t\t\t\telse this._maxcode = this.MAXCODE(this._n_bits);\n\t\t\t}\n\t\t}\n\n\t\tif (code == this._EOFCode) {\n\t\t\t// At EOF, write the rest of the buffer.\n\t\t\twhile (this._cur_bits > 0) {\n\t\t\t\tthis.writeCharToPacket(this._cur_accum & 0xff, outs);\n\t\t\t\tthis._cur_accum >>= 8;\n\t\t\t\tthis._cur_bits -= 8;\n\t\t\t}\n\n\t\t\tthis.flush_char(outs);\n\t\t}\n\t}\n}\n"]}