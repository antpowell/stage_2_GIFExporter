{"version":3,"sources":["src\\gif.creator.service.ts"],"names":[],"mappings":"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","file":"gif.creator.service.df1e0f74.map","sourceRoot":"..","sourcesContent":["/* ----------------------------------------------NeuQuant START---------------------------------------------------------- */\r\n/* NeuQuant Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\r\n * See \"Kohonen neural networks for optimal colour quantization\"\r\n * in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\r\n * for a discussion of the algorithm.\r\n * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal\r\n * in this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons who receive\r\n * copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n *\r\n * (JavaScript port 2012 by Johan Nordberg)\r\n */\r\n\r\nfunction toInt(v) {\r\n\treturn ~~v;\r\n}\r\n\r\nvar ncycles = 100; // number of learning cycles\r\nvar netsize = 256; // number of colors used\r\nvar maxnetpos = netsize - 1;\r\n\r\n// defs for freq and bias\r\nvar netbiasshift = 4; // bias for colour values\r\nvar intbiasshift = 16; // bias for fractions\r\nvar intbias = 1 << intbiasshift;\r\nvar gammashift = 10;\r\nvar gamma = 1 << gammashift;\r\nvar betashift = 10;\r\nvar beta = intbias >> betashift; /* beta = 1/1024 */\r\nvar betagamma = intbias << (gammashift - betashift);\r\n\r\n// defs for decreasing radius factor\r\nvar initrad = netsize >> 3; // for 256 cols, radius starts\r\nvar radiusbiasshift = 6; // at 32.0 biased by 6 bits\r\nvar radiusbias = 1 << radiusbiasshift;\r\nvar initradius = initrad * radiusbias; //and decreases by a\r\nvar radiusdec = 30; // factor of 1/30 each cycle\r\n\r\n// defs for decreasing alpha factor\r\nvar alphabiasshift = 10; // alpha starts at 1.0\r\nvar initalpha = 1 << alphabiasshift;\r\nvar alphadec; // biased by 10 bits\r\n\r\n/* radbias and alpharadbias used for radpower calculation */\r\nvar radbiasshift = 8;\r\nvar radbias = 1 << radbiasshift;\r\nvar alpharadbshift = alphabiasshift + radbiasshift;\r\nvar alpharadbias = 1 << alpharadbshift;\r\n\r\n// four primes near 500 - assume no image has a length so large that it is\r\n// divisible by all four primes\r\nvar prime1 = 499;\r\nvar prime2 = 491;\r\nvar prime3 = 487;\r\nvar prime4 = 503;\r\nvar minpicturebytes = 3 * prime4;\r\n\r\n/*\r\n    Constructor: NeuQuant\r\n  \r\n    Arguments:\r\n  \r\n    pixels - array of pixels in RGB format\r\n    samplefac - sampling factor 1 to 30 where lower is better quality\r\n  \r\n    >\r\n    > pixels = [r, g, b, r, g, b, r, g, b, ..]\r\n    >\r\n  */\r\nexport default function NeuQuant(pixels, samplefac) {\r\n\tvar network; // int[netsize][4]\r\n\tvar netindex; // for network lookup - really 256\r\n\r\n\t// bias and freq arrays for learning\r\n\tvar bias;\r\n\tvar freq;\r\n\tvar radpower;\r\n\r\n\t/*\r\n      Private Method: init\r\n  \r\n      sets up arrays\r\n    */\r\n\tfunction init() {\r\n\t\tnetwork = [];\r\n\t\tnetindex = [];\r\n\t\tbias = [];\r\n\t\tfreq = [];\r\n\t\tradpower = [];\r\n\r\n\t\tvar i, v;\r\n\t\tfor (i = 0; i < netsize; i++) {\r\n\t\t\tv = (i << (netbiasshift + 8)) / netsize;\r\n\t\t\tnetwork[i] = [v, v, v];\r\n\t\t\tfreq[i] = intbias / netsize;\r\n\t\t\tbias[i] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n      Private Method: unbiasnet\r\n  \r\n      unbiases network to give byte values 0..255 and record position i to prepare for sort\r\n    */\r\n\tfunction unbiasnet() {\r\n\t\tfor (var i = 0; i < netsize; i++) {\r\n\t\t\tnetwork[i][0] >>= netbiasshift;\r\n\t\t\tnetwork[i][1] >>= netbiasshift;\r\n\t\t\tnetwork[i][2] >>= netbiasshift;\r\n\t\t\tnetwork[i][3] = i; // record color number\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n      Private Method: altersingle\r\n  \r\n      moves neuron *i* towards biased (b,g,r) by factor *alpha*\r\n    */\r\n\tfunction altersingle(alpha, i, b, g, r) {\r\n\t\tnetwork[i][0] -= (alpha * (network[i][0] - b)) / initalpha;\r\n\t\tnetwork[i][1] -= (alpha * (network[i][1] - g)) / initalpha;\r\n\t\tnetwork[i][2] -= (alpha * (network[i][2] - r)) / initalpha;\r\n\t}\r\n\r\n\t/*\r\n      Private Method: alterneigh\r\n  \r\n      moves neurons in *radius* around index *i* towards biased (b,g,r) by factor *alpha*\r\n    */\r\n\tfunction alterneigh(radius, i, b, g, r) {\r\n\t\tvar lo = Math.abs(i - radius);\r\n\t\tvar hi = Math.min(i + radius, netsize);\r\n\r\n\t\tvar j = i + 1;\r\n\t\tvar k = i - 1;\r\n\t\tvar m = 1;\r\n\r\n\t\tvar p, a;\r\n\t\twhile (j < hi || k > lo) {\r\n\t\t\ta = radpower[m++];\r\n\r\n\t\t\tif (j < hi) {\r\n\t\t\t\tp = network[j++];\r\n\t\t\t\tp[0] -= (a * (p[0] - b)) / alpharadbias;\r\n\t\t\t\tp[1] -= (a * (p[1] - g)) / alpharadbias;\r\n\t\t\t\tp[2] -= (a * (p[2] - r)) / alpharadbias;\r\n\t\t\t}\r\n\r\n\t\t\tif (k > lo) {\r\n\t\t\t\tp = network[k--];\r\n\t\t\t\tp[0] -= (a * (p[0] - b)) / alpharadbias;\r\n\t\t\t\tp[1] -= (a * (p[1] - g)) / alpharadbias;\r\n\t\t\t\tp[2] -= (a * (p[2] - r)) / alpharadbias;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n      Private Method: contest\r\n  \r\n      searches for biased BGR values\r\n    */\r\n\tfunction contest(b, g, r) {\r\n\t\t/*\r\n        finds closest neuron (min dist) and updates freq\r\n        finds best neuron (min dist-bias) and returns position\r\n        for frequently chosen neurons, freq[i] is high and bias[i] is negative\r\n        bias[i] = gamma * ((1 / netsize) - freq[i])\r\n      */\r\n\r\n\t\tvar bestd = ~(1 << 31);\r\n\t\tvar bestbiasd = bestd;\r\n\t\tvar bestpos = -1;\r\n\t\tvar bestbiaspos = bestpos;\r\n\r\n\t\tvar i, n, dist, biasdist, betafreq;\r\n\t\tfor (i = 0; i < netsize; i++) {\r\n\t\t\tn = network[i];\r\n\r\n\t\t\tdist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\r\n\t\t\tif (dist < bestd) {\r\n\t\t\t\tbestd = dist;\r\n\t\t\t\tbestpos = i;\r\n\t\t\t}\r\n\r\n\t\t\tbiasdist = dist - (bias[i] >> (intbiasshift - netbiasshift));\r\n\t\t\tif (biasdist < bestbiasd) {\r\n\t\t\t\tbestbiasd = biasdist;\r\n\t\t\t\tbestbiaspos = i;\r\n\t\t\t}\r\n\r\n\t\t\tbetafreq = freq[i] >> betashift;\r\n\t\t\tfreq[i] -= betafreq;\r\n\t\t\tbias[i] += betafreq << gammashift;\r\n\t\t}\r\n\r\n\t\tfreq[bestpos] += beta;\r\n\t\tbias[bestpos] -= betagamma;\r\n\r\n\t\treturn bestbiaspos;\r\n\t}\r\n\r\n\t/*\r\n      Private Method: inxbuild\r\n  \r\n      sorts network and builds netindex[0..255]\r\n    */\r\n\tfunction inxbuild() {\r\n\t\tvar i,\r\n\t\t\tj,\r\n\t\t\tp,\r\n\t\t\tq,\r\n\t\t\tsmallpos,\r\n\t\t\tsmallval,\r\n\t\t\tpreviouscol = 0,\r\n\t\t\tstartpos = 0;\r\n\t\tfor (i = 0; i < netsize; i++) {\r\n\t\t\tp = network[i];\r\n\t\t\tsmallpos = i;\r\n\t\t\tsmallval = p[1]; // index on g\r\n\t\t\t// find smallest in i..netsize-1\r\n\t\t\tfor (j = i + 1; j < netsize; j++) {\r\n\t\t\t\tq = network[j];\r\n\t\t\t\tif (q[1] < smallval) {\r\n\t\t\t\t\t// index on g\r\n\t\t\t\t\tsmallpos = j;\r\n\t\t\t\t\tsmallval = q[1]; // index on g\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tq = network[smallpos];\r\n\t\t\t// swap p (i) and q (smallpos) entries\r\n\t\t\tif (i != smallpos) {\r\n\t\t\t\tj = q[0];\r\n\t\t\t\tq[0] = p[0];\r\n\t\t\t\tp[0] = j;\r\n\t\t\t\tj = q[1];\r\n\t\t\t\tq[1] = p[1];\r\n\t\t\t\tp[1] = j;\r\n\t\t\t\tj = q[2];\r\n\t\t\t\tq[2] = p[2];\r\n\t\t\t\tp[2] = j;\r\n\t\t\t\tj = q[3];\r\n\t\t\t\tq[3] = p[3];\r\n\t\t\t\tp[3] = j;\r\n\t\t\t}\r\n\t\t\t// smallval entry is now in position i\r\n\r\n\t\t\tif (smallval != previouscol) {\r\n\t\t\t\tnetindex[previouscol] = (startpos + i) >> 1;\r\n\t\t\t\tfor (j = previouscol + 1; j < smallval; j++) netindex[j] = i;\r\n\t\t\t\tpreviouscol = smallval;\r\n\t\t\t\tstartpos = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tnetindex[previouscol] = (startpos + maxnetpos) >> 1;\r\n\t\tfor (j = previouscol + 1; j < 256; j++) netindex[j] = maxnetpos; // really 256\r\n\t}\r\n\r\n\t/*\r\n      Private Method: inxsearch\r\n  \r\n      searches for BGR values 0..255 and returns a color index\r\n    */\r\n\tfunction inxsearch(b, g, r) {\r\n\t\tvar a, p, dist;\r\n\r\n\t\tvar bestd = 1000; // biggest possible dist is 256*3\r\n\t\tvar best = -1;\r\n\r\n\t\tvar i = netindex[g]; // index on g\r\n\t\tvar j = i - 1; // start at netindex[g] and work outwards\r\n\r\n\t\twhile (i < netsize || j >= 0) {\r\n\t\t\tif (i < netsize) {\r\n\t\t\t\tp = network[i];\r\n\t\t\t\tdist = p[1] - g; // inx key\r\n\t\t\t\tif (dist >= bestd) i = netsize;\r\n\t\t\t\t// stop iter\r\n\t\t\t\telse {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tif (dist < 0) dist = -dist;\r\n\t\t\t\t\ta = p[0] - b;\r\n\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\tdist += a;\r\n\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\ta = p[2] - r;\r\n\t\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\t\tdist += a;\r\n\t\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\t\tbestd = dist;\r\n\t\t\t\t\t\t\tbest = p[3];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (j >= 0) {\r\n\t\t\t\tp = network[j];\r\n\t\t\t\tdist = g - p[1]; // inx key - reverse dif\r\n\t\t\t\tif (dist >= bestd) j = -1;\r\n\t\t\t\t// stop iter\r\n\t\t\t\telse {\r\n\t\t\t\t\tj--;\r\n\t\t\t\t\tif (dist < 0) dist = -dist;\r\n\t\t\t\t\ta = p[0] - b;\r\n\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\tdist += a;\r\n\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\ta = p[2] - r;\r\n\t\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\t\tdist += a;\r\n\t\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\t\tbestd = dist;\r\n\t\t\t\t\t\t\tbest = p[3];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn best;\r\n\t}\r\n\r\n\t/*\r\n      Private Method: learn\r\n  \r\n      \"Main Learning Loop\"\r\n    */\r\n\tfunction learn() {\r\n\t\tvar i;\r\n\r\n\t\tvar lengthcount = pixels.length;\r\n\t\tvar alphadec = toInt(30 + (samplefac - 1) / 3);\r\n\t\tvar samplepixels = toInt(lengthcount / (3 * samplefac));\r\n\t\tvar delta = toInt(samplepixels / ncycles);\r\n\t\tvar alpha = initalpha;\r\n\t\tvar radius = initradius;\r\n\r\n\t\tvar rad = radius >> radiusbiasshift;\r\n\r\n\t\tif (rad <= 1) rad = 0;\r\n\t\tfor (i = 0; i < rad; i++) radpower[i] = toInt(alpha * (((rad * rad - i * i) * radbias) / (rad * rad)));\r\n\r\n\t\tvar step;\r\n\t\tif (lengthcount < minpicturebytes) {\r\n\t\t\tsamplefac = 1;\r\n\t\t\tstep = 3;\r\n\t\t} else if (lengthcount % prime1 !== 0) {\r\n\t\t\tstep = 3 * prime1;\r\n\t\t} else if (lengthcount % prime2 !== 0) {\r\n\t\t\tstep = 3 * prime2;\r\n\t\t} else if (lengthcount % prime3 !== 0) {\r\n\t\t\tstep = 3 * prime3;\r\n\t\t} else {\r\n\t\t\tstep = 3 * prime4;\r\n\t\t}\r\n\r\n\t\tvar b, g, r, j;\r\n\t\tvar pix = 0; // current pixel\r\n\r\n\t\ti = 0;\r\n\t\twhile (i < samplepixels) {\r\n\t\t\tb = (pixels[pix] & 0xff) << netbiasshift;\r\n\t\t\tg = (pixels[pix + 1] & 0xff) << netbiasshift;\r\n\t\t\tr = (pixels[pix + 2] & 0xff) << netbiasshift;\r\n\r\n\t\t\tj = contest(b, g, r);\r\n\r\n\t\t\taltersingle(alpha, j, b, g, r);\r\n\t\t\tif (rad !== 0) alterneigh(rad, j, b, g, r); // alter neighbours\r\n\r\n\t\t\tpix += step;\r\n\t\t\tif (pix >= lengthcount) pix -= lengthcount;\r\n\r\n\t\t\ti++;\r\n\r\n\t\t\tif (delta === 0) delta = 1;\r\n\t\t\tif (i % delta === 0) {\r\n\t\t\t\talpha -= alpha / alphadec;\r\n\t\t\t\tradius -= radius / radiusdec;\r\n\t\t\t\trad = radius >> radiusbiasshift;\r\n\r\n\t\t\t\tif (rad <= 1) rad = 0;\r\n\t\t\t\tfor (j = 0; j < rad; j++) radpower[j] = toInt(alpha * (((rad * rad - j * j) * radbias) / (rad * rad)));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n      Method: buildColormap\r\n  \r\n      1. initializes network\r\n      2. trains it\r\n      3. removes misconceptions\r\n      4. builds colorindex\r\n    */\r\n\tfunction buildColormap() {\r\n\t\tinit();\r\n\t\tlearn();\r\n\t\tunbiasnet();\r\n\t\tinxbuild();\r\n\t}\r\n\tthis.buildColormap = buildColormap;\r\n\r\n\t/*\r\n      Method: getColormap\r\n  \r\n      builds colormap from the index\r\n  \r\n      returns array in the format:\r\n  \r\n      >\r\n      > [r, g, b, r, g, b, r, g, b, ..]\r\n      >\r\n    */\r\n\tfunction getColormap() {\r\n\t\tvar map = [];\r\n\t\tvar index = [];\r\n\r\n\t\tfor (var i = 0; i < netsize; i++) index[network[i][3]] = i;\r\n\r\n\t\tvar k = 0;\r\n\t\tfor (var l = 0; l < netsize; l++) {\r\n\t\t\tvar j = index[l];\r\n\t\t\tmap[k++] = network[j][0];\r\n\t\t\tmap[k++] = network[j][1];\r\n\t\t\tmap[k++] = network[j][2];\r\n\t\t}\r\n\t\treturn map;\r\n\t}\r\n\tthis.getColormap = getColormap;\r\n\r\n\t/*\r\n      Method: lookupRGB\r\n  \r\n      looks for the closest *r*, *g*, *b* color in the map and\r\n      returns its index\r\n    */\r\n\tthis.lookupRGB = inxsearch;\r\n}\r\n\r\n/* ----------------------------------------------NeuQuant END---------------------------------------------------------- */\r\n\r\n/* ----------------------------------------------ColorTableGen START---------------------------------------------------------- */\r\n\r\nexport class ColorTableGenerator {\r\n\tprivate _colorTable: number[] = [];\r\n\tprivate _GCT: string[] = [];\r\n\tprivate _neuQuant: NeuQuant;\r\n\tprivate _distribution = 51;\r\n\tprivate _colorLookup: {\r\n\t\t[index: string]: number;\r\n\t} = {};\r\n\r\n\tconstructor(frame: Uint8Array) {\r\n\t\tthis._neuQuant = new NeuQuant(frame, 20);\r\n\t\tthis._neuQuant.buildColormap();\r\n\t\tthis._colorTable = this._neuQuant.getColormap();\r\n\t}\r\n\r\n\tpublic generate(): Promise<[{ [index: string]: number }, string[]]> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet pixel: string = '';\r\n\t\t\tlet count = 0;\r\n\t\t\tthis._colorTable.forEach((value, index, array) => {\r\n\t\t\t\tpixel += this.pad(value);\r\n\t\t\t\tif ((index + 1) % 3 === 0) {\r\n\t\t\t\t\tthis._GCT.push(pixel);\r\n\t\t\t\t\tthis._colorLookup[pixel] = count;\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tpixel = '';\r\n\t\t\t\t}\r\n\t\t\t\tif (index === this._colorTable.length - 1) resolve([this._colorLookup, this._GCT]);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tpublic lookupRGB(pixel: string): number {\r\n\t\tconst R = parseInt(pixel.substr(0, 2), 16);\r\n\t\tconst G = parseInt(pixel.substr(2, 2), 16);\r\n\t\tconst B = parseInt(pixel.substr(4, 2), 16);\r\n\t\tconst pixelIndex = this._neuQuant.lookupRGB(R, G, B);\r\n\r\n\t\treturn pixelIndex as number;\r\n\t}\r\n\r\n\tprivate pad(color: number): string {\r\n\t\tif (color < 16) {\r\n\t\t\treturn `0${color.toString(16)}`;\r\n\t\t} else {\r\n\t\t\treturn color.toString(16);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* ----------------------------------------------ColorTableGen END---------------------------------------------------------- */\r\n\r\n/* ----------------------------------------------EncodedImage START---------------------------------------------------------- */\r\n\r\nexport class EncodedImage {\r\n\tdata: number[] = [];\r\n\r\n\tconstructor() {}\r\n\r\n\tpublic get(): number[] {\r\n\t\treturn this.data;\r\n\t}\r\n\r\n\tpublic write(byte: number): void {\r\n\t\tthis.data.push(byte);\r\n\t}\r\n\r\n\tpublic writeArray(array: number[], arraySize: number): void {\r\n\t\tfor (let i = 0; i < arraySize; i++) {\r\n\t\t\tthis.write(array[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writeUTF(UTF: string): void {\r\n\t\tfor (let i = 0; i < UTF.length; i++) {\r\n\t\t\tthis.write(UTF.charCodeAt(i));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writeColor(color: string): void {\r\n\t\tfor (let i = 0; i < color.length; i += 2) {\r\n\t\t\tconst intValue: number = parseInt(color[i] + color[i + 1], 16);\r\n\t\t\tthis.write(intValue);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writeLittleEndian(num: number): void {\r\n\t\tthis.write(num & 0xff);\r\n\t\tthis.write((num >> 8) & 0xff);\r\n\t}\r\n\r\n\tpublic reset() {\r\n\t\tthis.data = [];\r\n\t}\r\n}\r\n\r\n/* ----------------------------------------------EncodedImage END---------------------------------------------------------- */\r\n\r\n/* ----------------------------------------------TypedLZW START---------------------------------------------------------- */\r\n\r\n/**\r\n * This class handles LZW encoding\r\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\r\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n * @author Thibault Imbert (AS3 version - bytearray.org)\r\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n * @author Anthony Powell (TypeScript version)\r\n * @version 0.1 AS3 implementation\r\n */\r\n\r\nexport class LZWEncoder {\r\n\tprivate readonly EOF = 1;\r\n\r\n\t// GIFCOMPR.C - GIF Image compression routines\r\n\t// Lempel-Ziv compression based on 'compress'. GIF modifications by\r\n\t// David Rowley (mgardi@watdcsu.waterloo.edu)\r\n\t// General DEFINEs\r\n\r\n\tprivate readonly BITS = 12;\r\n\tprivate readonly HSIZE = 5003;\r\n\r\n\tprivate _imgW: number;\r\n\tprivate _imgH: number;\r\n\tprivate _pixels: number[];\r\n\tprivate _initCodeSize: number;\r\n\tprivate _remaining: number;\r\n\tprivate _curPixel: number;\r\n\r\n\t// GIF Image compression - modified 'compress'\r\n\t// Based on: compress.c - File compression ala IEEE Computer, June 1984.\r\n\t// By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\r\n\t// Jim McKie (decvax!mcvax!jim)\r\n\t// Steve Davies (decvax!vax135!petsd!peora!srd)\r\n\t// Ken Turkowski (decvax!decwrl!turtlevax!ken)\r\n\t// James A. Woods (decvax!ihnp4!ames!jaw)\r\n\t// Joe Orost (decvax!vax135!petsd!joe)\r\n\r\n\tprivate _n_bits: number; // number of bits/code\r\n\tprivate _maxbits = this.BITS; // user settable max # bits/code\r\n\tprivate _maxcode: number; // maximum code, given n_bits\r\n\tprivate _maxmaxcode = 1 << this.BITS; // should NEVER generate this code\r\n\tprivate _htab: number[] = [];\r\n\tprivate _codetab: number[] = [];\r\n\tprivate _hsize = this.HSIZE; // for dynamic table sizing\r\n\tprivate _free_ent = 0; // first unused entry\r\n\r\n\t// block compression parameters -- after all codes are used up,\r\n\t// and compression rate changes, start over.\r\n\r\n\tprivate _clear_flg = false;\r\n\r\n\t// Algorithm: use open addressing double hashing (no chaining) on the\r\n\t// prefix code / next character combination. We do a variant of Knuth's\r\n\t// algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\r\n\t// secondary probe. Here, the modular division first probe is gives way\r\n\t// to a faster exclusive-or manipulation. Also do block compression with\r\n\t// an adaptive reset, whereby the code table is cleared when the compression\r\n\t// ratio decreases, but after the table fills. The variable-length output\r\n\t// codes are re-sized at this point, and a special CLEAR code is generated\r\n\t// for the decompressor. Late addition: construct the table according to\r\n\t// file size for noticeable speed improvement on small files. Please direct\r\n\t// questions about this implementation to ames!jaw.\r\n\r\n\tprivate _g_init_bits: number;\r\n\tprivate _ClearCode: number;\r\n\tprivate _EOFCode: number;\r\n\r\n\t// output\r\n\t// Output the given code.\r\n\t// Inputs:\r\n\t// code: A n_bits-bit integer. If == -1, then EOF. This assumes\r\n\t// that n_bits =< wordsize - 1.\r\n\t// Outputs:\r\n\t// Outputs code to the file.\r\n\t// Assumptions:\r\n\t// Chars are 8 bits long.\r\n\t// Algorithm:\r\n\t// Maintain a BITS character long buffer (so that 8 codes will\r\n\t// fit in it exactly). Use the VAX insv instruction to insert each\r\n\t// code in turn. When the buffer fills up empty it and start over.\r\n\r\n\tprivate _cur_accum = 0;\r\n\tprivate _cur_bits = 0;\r\n\tprivate _masks = [\r\n\t\t0x0000,\r\n\t\t0x0001,\r\n\t\t0x0003,\r\n\t\t0x0007,\r\n\t\t0x000f,\r\n\t\t0x001f,\r\n\t\t0x003f,\r\n\t\t0x007f,\r\n\t\t0x00ff,\r\n\t\t0x01ff,\r\n\t\t0x03ff,\r\n\t\t0x07ff,\r\n\t\t0x0fff,\r\n\t\t0x1fff,\r\n\t\t0x3fff,\r\n\t\t0x7fff,\r\n\t\t0xffff,\r\n\t];\r\n\r\n\t// Number of characters so far in this 'packet'\r\n\tprivate _a_count: number;\r\n\r\n\t// Define the storage for the packet accumulator\r\n\tprivate _accum: number[] = [];\r\n\r\n\tconstructor(width: number, height: number, pixels: number[], colorDepth: number) {\r\n\t\tthis._imgW = width;\r\n\t\tthis._imgH = height;\r\n\t\tthis._pixels = pixels;\r\n\t\tthis._initCodeSize = Math.max(2, colorDepth);\r\n\t}\r\n\r\n\t// Add a character to the end of the current packet, and if it is 254\r\n\t// characters, flush the packet to disk.\r\n\tprivate writeCharToPacket(c: number, outs: EncodedImage): void {\r\n\t\tthis._accum[this._a_count++] = c;\r\n\t\tif (this._a_count >= 254) this.flush_char(outs);\r\n\t}\r\n\r\n\t// Clear out the hash table\r\n\t// table clear for block compress\r\n\r\n\tprivate cl_block(outs: EncodedImage): void {\r\n\t\tthis.cl_hash(this._hsize);\r\n\t\tthis._free_ent = this._ClearCode + 2;\r\n\t\tthis._clear_flg = true;\r\n\t\tthis.output(this._ClearCode, outs);\r\n\t}\r\n\r\n\t// reset code table\r\n\tprivate cl_hash(hsize: number): void {\r\n\t\tfor (let i = 0; i < hsize; ++i) this._htab[i] = -1;\r\n\t}\r\n\r\n\tprivate compress(init_bits: number, outs: EncodedImage) {\r\n\t\tlet fcode;\r\n\t\tlet i; /* = 0 */\r\n\t\tlet c;\r\n\t\tlet ent;\r\n\t\tlet disp;\r\n\t\tlet hsize_reg;\r\n\t\tlet hshift;\r\n\r\n\t\t// Set up the globals: g_init_bits - initial number of bits\r\n\t\tthis._g_init_bits = init_bits;\r\n\r\n\t\t// Set up the necessary values\r\n\t\tthis._clear_flg = false;\r\n\t\tthis._n_bits = this._g_init_bits;\r\n\t\tthis._maxcode = this.MAXCODE(this._n_bits);\r\n\r\n\t\tthis._ClearCode = 1 << (init_bits - 1);\r\n\t\tthis._EOFCode = this._ClearCode + 1;\r\n\t\tthis._free_ent = this._ClearCode + 2;\r\n\r\n\t\tthis._a_count = 0; // clear packet\r\n\r\n\t\tent = this.nextPixel();\r\n\r\n\t\thshift = 0;\r\n\t\tfor (fcode = this._hsize; fcode < 65536; fcode *= 2) ++hshift;\r\n\t\thshift = 8 - hshift; // set hash code range bound\r\n\r\n\t\thsize_reg = this._hsize;\r\n\t\tthis.cl_hash(hsize_reg); // clear hash table\r\n\r\n\t\tthis.output(this._ClearCode, outs);\r\n\r\n\t\touter_loop: while ((c = this.nextPixel()) != this.EOF) {\r\n\t\t\tfcode = (c << this._maxbits) + ent;\r\n\t\t\ti = (c << hshift) ^ ent; // xor hashing\r\n\r\n\t\t\tif (this._htab[i] == fcode) {\r\n\t\t\t\tent = this._codetab[i];\r\n\t\t\t\tcontinue;\r\n\t\t\t} else if (this._htab[i] >= 0) {\r\n\t\t\t\t// non-empty slot\r\n\r\n\t\t\t\tdisp = hsize_reg - i; // secondary hash (after G. Knott)\r\n\t\t\t\tif (i === 0) disp = 1;\r\n\r\n\t\t\t\tdo {\r\n\t\t\t\t\tif ((i -= disp) < 0) i += hsize_reg;\r\n\r\n\t\t\t\t\tif (this._htab[i] == fcode) {\r\n\t\t\t\t\t\tent = this._codetab[i];\r\n\t\t\t\t\t\tcontinue outer_loop;\r\n\t\t\t\t\t}\r\n\t\t\t\t} while (this._htab[i] >= 0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.output(ent, outs);\r\n\t\t\tent = c;\r\n\t\t\tif (this._free_ent < this._maxmaxcode) {\r\n\t\t\t\tthis._codetab[i] = this._free_ent++; // code -> hashtable\r\n\t\t\t\tthis._htab[i] = fcode;\r\n\t\t\t} else this.cl_block(outs);\r\n\t\t}\r\n\r\n\t\t// Put out the final code.\r\n\t\tthis.output(ent, outs);\r\n\t\tthis.output(this._EOFCode, outs);\r\n\t}\r\n\r\n\t// ----------------------------------------------------------------------------\r\n\tpublic encode(os: EncodedImage) {\r\n\t\tos.write(this._initCodeSize); // write \"initial code size\" byte\r\n\t\tthis._remaining = this._imgW * this._imgH; // reset navigation variables\r\n\t\tthis._curPixel = 0;\r\n\t\tthis.compress(this._initCodeSize + 1, os); // compress and write the pixel data\r\n\t\tos.write(0); // write block terminator\r\n\t}\r\n\r\n\t// Flush the packet to disk, and reset the accumulator\r\n\tprivate flush_char(outs: EncodedImage) {\r\n\t\tif (this._a_count > 0) {\r\n\t\t\touts.write(this._a_count);\r\n\t\t\touts.writeArray(this._accum, this._a_count);\r\n\t\t\tthis._a_count = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate MAXCODE(n_bits: number) {\r\n\t\treturn (1 << n_bits) - 1;\r\n\t}\r\n\r\n\t// ----------------------------------------------------------------------------\r\n\t// Return the next pixel from the image\r\n\t// ----------------------------------------------------------------------------\r\n\r\n\tprivate nextPixel() {\r\n\t\tif (this._remaining === 0) return this.EOF;\r\n\t\t--this._remaining;\r\n\t\tlet pix = this._pixels[this._curPixel++];\r\n\t\treturn pix & 0xff;\r\n\t}\r\n\r\n\tprivate output(code: number, outs: EncodedImage) {\r\n\t\tthis._cur_accum &= this._masks[this._cur_bits];\r\n\r\n\t\tif (this._cur_bits > 0) this._cur_accum |= code << this._cur_bits;\r\n\t\telse this._cur_accum = code;\r\n\r\n\t\tthis._cur_bits += this._n_bits;\r\n\r\n\t\twhile (this._cur_bits >= 8) {\r\n\t\t\tthis.writeCharToPacket(this._cur_accum & 0xff, outs);\r\n\t\t\tthis._cur_accum >>= 8;\r\n\t\t\tthis._cur_bits -= 8;\r\n\t\t}\r\n\r\n\t\t// If the next entry is going to be too big for the code size,\r\n\t\t// then increase it, if possible.\r\n\r\n\t\tif (this._free_ent > this._maxcode || this._clear_flg) {\r\n\t\t\tif (this._clear_flg) {\r\n\t\t\t\tthis._maxcode = this.MAXCODE((this._n_bits = this._g_init_bits));\r\n\t\t\t\tthis._clear_flg = false;\r\n\t\t\t} else {\r\n\t\t\t\t++this._n_bits;\r\n\t\t\t\tif (this._n_bits == this._maxbits) this._maxcode = this._maxmaxcode;\r\n\t\t\t\telse this._maxcode = this.MAXCODE(this._n_bits);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (code == this._EOFCode) {\r\n\t\t\t// At EOF, write the rest of the buffer.\r\n\t\t\twhile (this._cur_bits > 0) {\r\n\t\t\t\tthis.writeCharToPacket(this._cur_accum & 0xff, outs);\r\n\t\t\t\tthis._cur_accum >>= 8;\r\n\t\t\t\tthis._cur_bits -= 8;\r\n\t\t\t}\r\n\r\n\t\t\tthis.flush_char(outs);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* ----------------------------------------------TypedLZW END---------------------------------------------------------- */\r\n\r\n/* ----------------------------------------------GIFGen START---------------------------------------------------------- */\r\n\r\nexport class GIFGenerator {\r\n\tprivate stream: EncodedImage = new EncodedImage();\r\n\tprivate width: number;\r\n\tprivate height: number;\r\n\tprivate frameIndexedPixels: number[];\r\n\tprivate frameCount: number = 0;\r\n\tprivate GCT: string[];\r\n\r\n\tconstructor() {\r\n\t\tconsole.log(`Generator now running...`);\r\n\t}\r\n\r\n\tpublic init(width: number, height: number, GCT: string[]): void {\r\n\t\tthis.reset();\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.GCT = GCT;\r\n\t\tthis.writeHeader();\r\n\t\tthis.writeLogicalScreenDescriptor();\r\n\t\tthis.writeGlobalColorTable();\r\n\t\tthis.writeApplicationExtension();\r\n\t}\r\n\r\n\tpublic generateFrame(indexedPixels: number[]): void {\r\n\t\tthis.frameIndexedPixels = indexedPixels;\r\n\t\tthis.frameCount += 1;\r\n\t\tconsole.log(`generating frame ${this.frameCount}`);\r\n\t\tthis.writeGraphicControlExtension();\r\n\t\tthis.writeImageDescriptor();\r\n\t\tthis.writeImageData();\r\n\t}\r\n\r\n\tpublic getStream(): number[] {\r\n\t\tthis.writeTrailer();\r\n\t\treturn this.stream.get();\r\n\t}\r\n\r\n\tprivate writeHeader(): void {\r\n\t\tthis.stream.writeUTF('GIF89a'); /* GIF Header */\r\n\t}\r\n\r\n\tprivate writeLogicalScreenDescriptor(): void {\r\n\t\tthis.stream.writeLittleEndian(this.width); /* Canvas Width */\r\n\t\tthis.stream.writeLittleEndian(this.height); /* Canvas Height */\r\n\t\tthis.stream.write(0xf7); /* Packed Field */\r\n\t\tthis.stream.write(0); /* Background Color Index */\r\n\t\tthis.stream.write(0); /* Pixel Aspect Ration */\r\n\t}\r\n\r\n\tprivate writeGraphicControlExtension(): void {\r\n\t\tthis.stream.write(0x21); /* Extension Introducer */\r\n\t\tthis.stream.write(0xf9); /* Graphic Control Label */\r\n\t\tthis.stream.write(0x4); /* Byte Size */\r\n\t\tthis.stream.write(0x4); /* Packed Field */\r\n\t\tthis.stream.writeLittleEndian(0x9); /* Delay Time */\r\n\t\tthis.stream.write(0x0); /* Transparent Color Index */\r\n\t\tthis.stream.write(0x0); /* Block Terminator */\r\n\t}\r\n\r\n\tprivate writeImageDescriptor(): void {\r\n\t\tthis.stream.write(0x2c); /* Image Seperator Always 2C */\r\n\t\tthis.stream.writeLittleEndian(0x0); /* Image Left */\r\n\t\tthis.stream.writeLittleEndian(0x0); /* Image Top */\r\n\t\tthis.stream.writeLittleEndian(this.width); /* Image Width */\r\n\t\tthis.stream.writeLittleEndian(this.height); /* Image Height */\r\n\t\tthis.stream.write(0x0); /* Block Terminator */\r\n\t}\r\n\r\n\tprivate writeApplicationExtension(): void {\r\n\t\tthis.stream.write(0x21); /* extension introducer */\r\n\t\tthis.stream.write(0xff); /* app extension label */\r\n\t\tthis.stream.write(11); /* block size */\r\n\t\tthis.stream.writeUTF('NETSCAPE' + '2.0'); /* app id + auth code */\r\n\t\tthis.stream.write(3); /* sub-block size */\r\n\t\tthis.stream.write(1); /* loop sub-block id */\r\n\t\tthis.stream.writeLittleEndian(0); /* loop count (extra iterations, 0=repeat forever) */\r\n\t\tthis.stream.write(0); /* Block Terminator */\r\n\t}\r\n\r\n\tprivate writeTrailer(): void {\r\n\t\tthis.stream.write(0x3b); /* Trailer Marker */\r\n\t\tconsole.log(`Generator now finished.`);\r\n\t\tthis.frameCount = 0; /* Reset frame count for next GIF */\r\n\t}\r\n\r\n\tprivate writeGlobalColorTable(): void {\r\n\t\tlet count = 0;\r\n\r\n\t\tthis.GCT.forEach(color => {\r\n\t\t\tcount += 3;\r\n\t\t\tthis.stream.writeColor(color);\r\n\t\t});\r\n\r\n\t\tfor (let i = count; i < 3 * 256; i++) {\r\n\t\t\tthis.stream.write(0);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async writeImageData(): Promise<void> {\r\n\t\tconst encoder = new LZWEncoder(this.width, this.height, this.frameIndexedPixels, 8);\r\n\t\tencoder.encode(this.stream);\r\n\t\tconsole.log(`completed frame ${this.frameCount}`);\r\n\t}\r\n\r\n\tprivate writeLocalColorTable(): void {}\r\n\r\n\tprivate writePlainTextExtension(): void {}\r\n\r\n\tprivate writeCommentExtension(): void {}\r\n\r\n\tprivate reset() {\r\n\t\tthis.stream.reset();\r\n\t\tthis.frameCount = 0;\r\n\t}\r\n}\r\n\r\n/* ----------------------------------------------GIFGen END---------------------------------------------------------- */\r\n\r\nconst ctx: Worker = self as any;\r\nlet _colorTableGen: ColorTableGenerator;\r\n\r\naddEventListener('message', ev => {\r\n\tconsole.log(ev.data);\r\n});\r\n\r\nconst gifGenerator: GIFGenerator = new GIFGenerator();\r\n\r\nonmessage = ({ data: { job, params } }) => {\r\n\tif (job === 'createGIF') {\r\n\t\tconst { frames, width, height } = params;\r\n\t\tconst colorLookup: { [index: string]: number } = createColorTable(frames[0], width, height);\r\n\t\tconst { numericalRGBFrames, stringRGBFrames } = processFrames(frames, width, height);\r\n\t\tconst gifData = generateGIF(stringRGBFrames, colorLookup);\r\n\t\tctx.postMessage(gifData);\r\n\t}\r\n};\r\n\r\nfunction createColorTable(frame: Uint8Array, width: number, height: number): { [index: string]: number } {\r\n\t_colorTableGen = new ColorTableGenerator(frame);\r\n\tlet colorLookup: { [index: string]: number }, colorTable: string[];\r\n\t_colorTableGen.generate().then(([lookup, table]) => {\r\n\t\t[lookup, table] = [colorLookup, colorTable];\r\n\t\twriteColorTable(colorTable, width, height);\r\n\t});\r\n\treturn colorLookup;\r\n\r\n\tfunction writeColorTable(globalColorTable: string[], width: number, height: number): Promise<void> {\r\n\t\tgifGenerator.init(width, height, globalColorTable);\r\n\t\treturn;\r\n\t}\r\n}\r\n\r\nfunction processFrames(\r\n\tframes: Uint8Array[],\r\n\twidth: number,\r\n\theight: number\r\n): {\r\n\tnumericalRGBFrames: Uint8Array[];\r\n\tstringRGBFrames: string[][];\r\n} {\r\n\tfunction flipFrames(): {\r\n\t\tnumericalRGBFrames: Uint8Array[];\r\n\t\tstringRGBFrames: string[][];\r\n\t} {\r\n\t\tconst numericalRGBFrames: Uint8Array[] = [];\r\n\t\tconst stringRGBFrames: string[][] = [];\r\n\t\tframes.forEach(frame => {\r\n\t\t\tconst mid = (height / 2) | 0;\r\n\t\t\tconst rowLen = width * 4;\r\n\r\n\t\t\tlet flipRow = new Uint8Array(rowLen);\r\n\t\t\tfor (let rowNum = 0; rowNum < mid; ++rowNum) {\r\n\t\t\t\tlet topPointer = rowNum * rowLen;\r\n\t\t\t\tlet bottomPointer = (height - rowNum - 1) * rowLen;\r\n\t\t\t\tflipRow.set(frame.subarray(topPointer, topPointer + rowLen));\r\n\t\t\t\tframe.copyWithin(topPointer, bottomPointer, bottomPointer + rowLen);\r\n\t\t\t\tframe.set(flipRow, bottomPointer);\r\n\t\t\t}\r\n\t\t\tconst { numericalRGBData, stringRGBData } = toRGB(frame);\r\n\t\t\tnumericalRGBFrames.push(numericalRGBData);\r\n\t\t\tstringRGBFrames.push(stringRGBData);\r\n\t\t});\r\n\t\treturn { numericalRGBFrames, stringRGBFrames };\r\n\t}\r\n\tfunction toRGB(frame: Uint8Array): { numericalRGBData: Uint8Array; stringRGBData: string[] } {\r\n\t\tconst numericalRGBData = frame.filter((pixel: number, index: number) => (index + 1) % 4 !== 0);\r\n\r\n\t\tconst stringRGBData: string[] = [];\r\n\t\tlet pixel = '';\r\n\t\tnumericalRGBData.forEach((color, index) => {\r\n\t\t\tpixel += pad(color);\r\n\t\t\tif ((index + 1) % 3 === 0) {\r\n\t\t\t\tstringRGBData.push(pixel);\r\n\t\t\t\tpixel = '';\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn { numericalRGBData, stringRGBData };\r\n\t}\r\n\r\n\tfunction pad(color: number): string {\r\n\t\tif (color < 16) {\r\n\t\t\treturn `0${color.toString(16)}`;\r\n\t\t} else {\r\n\t\t\treturn color.toString(16);\r\n\t\t}\r\n\t}\r\n\treturn flipFrames();\r\n}\r\n\r\nfunction generateGIF(frames: string[][], colorLookup: { [index: string]: number }) {\r\n\treturn new Promise(async (resolve, reject) => {\r\n\t\tfunction mapPixelsToIndex(frames: string[][], colorLookup: { [index: string]: number }): Promise<number[][]> {\r\n\t\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\t\tconst indexedFrames: number[][] = [];\r\n\t\t\t\tframes.forEach(frame => {\r\n\t\t\t\t\tconst indexedPixels: number[] = [];\r\n\t\t\t\t\tframe.forEach(pixel => {\r\n\t\t\t\t\t\tif (colorLookup[pixel]) {\r\n\t\t\t\t\t\t\tindexedPixels.push(colorLookup[pixel]);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tindexedPixels.push(_colorTableGen.lookupRGB(pixel));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tindexedFrames.push(indexedPixels);\r\n\t\t\t\t});\r\n\t\t\t\tresolve(indexedFrames);\r\n\t\t\t});\r\n\t\t}\r\n\t\tconst indexedFrames = await mapPixelsToIndex(frames, colorLookup);\r\n\r\n\t\tindexedFrames.forEach(frame => {\r\n\t\t\tgifGenerator.generateFrame(frame);\r\n\t\t});\r\n\t\tresolve(gifGenerator.getStream());\r\n\t});\r\n}\r\n"]}