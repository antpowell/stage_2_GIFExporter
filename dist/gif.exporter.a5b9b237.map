{"version":3,"sources":["src\\js\\NeuQuant.js","src\\color.table.generator.ts","src\\encoded.image.ts","src\\LZW.ts","src\\gif.generator.ts","src\\gif.exporter.ts"],"names":["NeuQuant","toInt","v","ncycles","netsize","maxnetpos","netbiasshift","intbiasshift","intbias","gammashift","gamma","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","alphadec","radbiasshift","radbias","alpharadbshift","alpharadbias","prime1","prime2","prime3","prime4","minpicturebytes","pixels","samplefac","network","netindex","bias","freq","radpower","init","i","unbiasnet","altersingle","alpha","b","g","r","alterneigh","radius","lo","Math","abs","hi","min","j","k","m","p","a","contest","bestd","bestbiasd","bestpos","bestbiaspos","n","dist","biasdist","betafreq","inxbuild","q","smallpos","smallval","previouscol","startpos","inxsearch","best","learn","lengthcount","length","samplepixels","delta","rad","step","pix","buildColormap","getColormap","map","index","l","lookupRGB"],"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","file":"gif.exporter.a5b9b237.map","sourceRoot":"..","sourcesContent":["/* NeuQuant Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n * See \"Kohonen neural networks for optimal colour quantization\"\n * in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n * for a discussion of the algorithm.\n * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal\n * in this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons who receive\n * copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n *\n * (JavaScript port 2012 by Johan Nordberg)\n */\n\nfunction toInt(v) {\n  return ~~v;\n}\n\nvar ncycles = 100; // number of learning cycles\nvar netsize = 256; // number of colors used\nvar maxnetpos = netsize - 1;\n\n// defs for freq and bias\nvar netbiasshift = 4; // bias for colour values\nvar intbiasshift = 16; // bias for fractions\nvar intbias = (1 << intbiasshift);\nvar gammashift = 10;\nvar gamma = (1 << gammashift);\nvar betashift = 10;\nvar beta = (intbias >> betashift); /* beta = 1/1024 */\nvar betagamma = (intbias << (gammashift - betashift));\n\n// defs for decreasing radius factor\nvar initrad = (netsize >> 3); // for 256 cols, radius starts\nvar radiusbiasshift = 6; // at 32.0 biased by 6 bits\nvar radiusbias = (1 << radiusbiasshift);\nvar initradius = (initrad * radiusbias); //and decreases by a\nvar radiusdec = 30; // factor of 1/30 each cycle\n\n// defs for decreasing alpha factor\nvar alphabiasshift = 10; // alpha starts at 1.0\nvar initalpha = (1 << alphabiasshift);\nvar alphadec; // biased by 10 bits\n\n/* radbias and alpharadbias used for radpower calculation */\nvar radbiasshift = 8;\nvar radbias = (1 << radbiasshift);\nvar alpharadbshift = (alphabiasshift + radbiasshift);\nvar alpharadbias = (1 << alpharadbshift);\n\n// four primes near 500 - assume no image has a length so large that it is\n// divisible by all four primes\nvar prime1 = 499;\nvar prime2 = 491;\nvar prime3 = 487;\nvar prime4 = 503;\nvar minpicturebytes = (3 * prime4);\n\n/*\n  Constructor: NeuQuant\n\n  Arguments:\n\n  pixels - array of pixels in RGB format\n  samplefac - sampling factor 1 to 30 where lower is better quality\n\n  >\n  > pixels = [r, g, b, r, g, b, r, g, b, ..]\n  >\n*/\nexport default function NeuQuant(pixels, samplefac) {\n  var network; // int[netsize][4]\n  var netindex; // for network lookup - really 256\n\n  // bias and freq arrays for learning\n  var bias;\n  var freq;\n  var radpower;\n\n  /*\n    Private Method: init\n\n    sets up arrays\n  */\n  function init() {\n    network = [];\n    netindex = [];\n    bias = [];\n    freq = [];\n    radpower = [];\n\n    var i, v;\n    for (i = 0; i < netsize; i++) {\n      v = (i << (netbiasshift + 8)) / netsize;\n      network[i] = [v, v, v];\n      freq[i] = intbias / netsize;\n      bias[i] = 0;\n    }\n  }\n\n  /*\n    Private Method: unbiasnet\n\n    unbiases network to give byte values 0..255 and record position i to prepare for sort\n  */\n  function unbiasnet() {\n    for (var i = 0; i < netsize; i++) {\n      network[i][0] >>= netbiasshift;\n      network[i][1] >>= netbiasshift;\n      network[i][2] >>= netbiasshift;\n      network[i][3] = i; // record color number\n    }\n  }\n\n  /*\n    Private Method: altersingle\n\n    moves neuron *i* towards biased (b,g,r) by factor *alpha*\n  */\n  function altersingle(alpha, i, b, g, r) {\n    network[i][0] -= (alpha * (network[i][0] - b)) / initalpha;\n    network[i][1] -= (alpha * (network[i][1] - g)) / initalpha;\n    network[i][2] -= (alpha * (network[i][2] - r)) / initalpha;\n  }\n\n  /*\n    Private Method: alterneigh\n\n    moves neurons in *radius* around index *i* towards biased (b,g,r) by factor *alpha*\n  */\n  function alterneigh(radius, i, b, g, r) {\n    var lo = Math.abs(i - radius);\n    var hi = Math.min(i + radius, netsize);\n\n    var j = i + 1;\n    var k = i - 1;\n    var m = 1;\n\n    var p, a;\n    while ((j < hi) || (k > lo)) {\n      a = radpower[m++];\n\n      if (j < hi) {\n        p = network[j++];\n        p[0] -= (a * (p[0] - b)) / alpharadbias;\n        p[1] -= (a * (p[1] - g)) / alpharadbias;\n        p[2] -= (a * (p[2] - r)) / alpharadbias;\n      }\n\n      if (k > lo) {\n        p = network[k--];\n        p[0] -= (a * (p[0] - b)) / alpharadbias;\n        p[1] -= (a * (p[1] - g)) / alpharadbias;\n        p[2] -= (a * (p[2] - r)) / alpharadbias;\n      }\n    }\n  }\n\n  /*\n    Private Method: contest\n\n    searches for biased BGR values\n  */\n  function contest(b, g, r) {\n    /*\n      finds closest neuron (min dist) and updates freq\n      finds best neuron (min dist-bias) and returns position\n      for frequently chosen neurons, freq[i] is high and bias[i] is negative\n      bias[i] = gamma * ((1 / netsize) - freq[i])\n    */\n\n    var bestd = ~(1 << 31);\n    var bestbiasd = bestd;\n    var bestpos = -1;\n    var bestbiaspos = bestpos;\n\n    var i, n, dist, biasdist, betafreq;\n    for (i = 0; i < netsize; i++) {\n      n = network[i];\n\n      dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\n      if (dist < bestd) {\n        bestd = dist;\n        bestpos = i;\n      }\n\n      biasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));\n      if (biasdist < bestbiasd) {\n        bestbiasd = biasdist;\n        bestbiaspos = i;\n      }\n\n      betafreq = (freq[i] >> betashift);\n      freq[i] -= betafreq;\n      bias[i] += (betafreq << gammashift);\n    }\n\n    freq[bestpos] += beta;\n    bias[bestpos] -= betagamma;\n\n    return bestbiaspos;\n  }\n\n  /*\n    Private Method: inxbuild\n\n    sorts network and builds netindex[0..255]\n  */\n  function inxbuild() {\n    var i, j, p, q, smallpos, smallval, previouscol = 0,\n      startpos = 0;\n    for (i = 0; i < netsize; i++) {\n      p = network[i];\n      smallpos = i;\n      smallval = p[1]; // index on g\n      // find smallest in i..netsize-1\n      for (j = i + 1; j < netsize; j++) {\n        q = network[j];\n        if (q[1] < smallval) { // index on g\n          smallpos = j;\n          smallval = q[1]; // index on g\n        }\n      }\n      q = network[smallpos];\n      // swap p (i) and q (smallpos) entries\n      if (i != smallpos) {\n        j = q[0];\n        q[0] = p[0];\n        p[0] = j;\n        j = q[1];\n        q[1] = p[1];\n        p[1] = j;\n        j = q[2];\n        q[2] = p[2];\n        p[2] = j;\n        j = q[3];\n        q[3] = p[3];\n        p[3] = j;\n      }\n      // smallval entry is now in position i\n\n      if (smallval != previouscol) {\n        netindex[previouscol] = (startpos + i) >> 1;\n        for (j = previouscol + 1; j < smallval; j++)\n          netindex[j] = i;\n        previouscol = smallval;\n        startpos = i;\n      }\n    }\n    netindex[previouscol] = (startpos + maxnetpos) >> 1;\n    for (j = previouscol + 1; j < 256; j++)\n      netindex[j] = maxnetpos; // really 256\n  }\n\n  /*\n    Private Method: inxsearch\n\n    searches for BGR values 0..255 and returns a color index\n  */\n  function inxsearch(b, g, r) {\n    var a, p, dist;\n\n    var bestd = 1000; // biggest possible dist is 256*3\n    var best = -1;\n\n    var i = netindex[g]; // index on g\n    var j = i - 1; // start at netindex[g] and work outwards\n\n    while ((i < netsize) || (j >= 0)) {\n      if (i < netsize) {\n        p = network[i];\n        dist = p[1] - g; // inx key\n        if (dist >= bestd) i = netsize; // stop iter\n        else {\n          i++;\n          if (dist < 0) dist = -dist;\n          a = p[0] - b;\n          if (a < 0) a = -a;\n          dist += a;\n          if (dist < bestd) {\n            a = p[2] - r;\n            if (a < 0) a = -a;\n            dist += a;\n            if (dist < bestd) {\n              bestd = dist;\n              best = p[3];\n            }\n          }\n        }\n      }\n      if (j >= 0) {\n        p = network[j];\n        dist = g - p[1]; // inx key - reverse dif\n        if (dist >= bestd) j = -1; // stop iter\n        else {\n          j--;\n          if (dist < 0) dist = -dist;\n          a = p[0] - b;\n          if (a < 0) a = -a;\n          dist += a;\n          if (dist < bestd) {\n            a = p[2] - r;\n            if (a < 0) a = -a;\n            dist += a;\n            if (dist < bestd) {\n              bestd = dist;\n              best = p[3];\n            }\n          }\n        }\n      }\n    }\n\n    return best;\n  }\n\n  /*\n    Private Method: learn\n\n    \"Main Learning Loop\"\n  */\n  function learn() {\n    var i;\n\n    var lengthcount = pixels.length;\n    var alphadec = toInt(30 + ((samplefac - 1) / 3));\n    var samplepixels = toInt(lengthcount / (3 * samplefac));\n    var delta = toInt(samplepixels / ncycles);\n    var alpha = initalpha;\n    var radius = initradius;\n\n    var rad = radius >> radiusbiasshift;\n\n    if (rad <= 1) rad = 0;\n    for (i = 0; i < rad; i++)\n      radpower[i] = toInt(alpha * (((rad * rad - i * i) * radbias) / (rad * rad)));\n\n    var step;\n    if (lengthcount < minpicturebytes) {\n      samplefac = 1;\n      step = 3;\n    } else if ((lengthcount % prime1) !== 0) {\n      step = 3 * prime1;\n    } else if ((lengthcount % prime2) !== 0) {\n      step = 3 * prime2;\n    } else if ((lengthcount % prime3) !== 0) {\n      step = 3 * prime3;\n    } else {\n      step = 3 * prime4;\n    }\n\n    var b, g, r, j;\n    var pix = 0; // current pixel\n\n    i = 0;\n    while (i < samplepixels) {\n      b = (pixels[pix] & 0xff) << netbiasshift;\n      g = (pixels[pix + 1] & 0xff) << netbiasshift;\n      r = (pixels[pix + 2] & 0xff) << netbiasshift;\n\n      j = contest(b, g, r);\n\n      altersingle(alpha, j, b, g, r);\n      if (rad !== 0) alterneigh(rad, j, b, g, r); // alter neighbours\n\n      pix += step;\n      if (pix >= lengthcount) pix -= lengthcount;\n\n      i++;\n\n      if (delta === 0) delta = 1;\n      if (i % delta === 0) {\n        alpha -= alpha / alphadec;\n        radius -= radius / radiusdec;\n        rad = radius >> radiusbiasshift;\n\n        if (rad <= 1) rad = 0;\n        for (j = 0; j < rad; j++)\n          radpower[j] = toInt(alpha * (((rad * rad - j * j) * radbias) / (rad * rad)));\n      }\n    }\n  }\n\n  /*\n    Method: buildColormap\n\n    1. initializes network\n    2. trains it\n    3. removes misconceptions\n    4. builds colorindex\n  */\n  function buildColormap() {\n    init();\n    learn();\n    unbiasnet();\n    inxbuild();\n  }\n  this.buildColormap = buildColormap;\n\n  /*\n    Method: getColormap\n\n    builds colormap from the index\n\n    returns array in the format:\n\n    >\n    > [r, g, b, r, g, b, r, g, b, ..]\n    >\n  */\n  function getColormap() {\n    var map = [];\n    var index = [];\n\n    for (var i = 0; i < netsize; i++)\n      index[network[i][3]] = i;\n\n    var k = 0;\n    for (var l = 0; l < netsize; l++) {\n      var j = index[l];\n      map[k++] = (network[j][0]);\n      map[k++] = (network[j][1]);\n      map[k++] = (network[j][2]);\n    }\n    return map;\n  }\n  this.getColormap = getColormap;\n\n  /*\n    Method: lookupRGB\n\n    looks for the closest *r*, *g*, *b* color in the map and\n    returns its index\n  */\n  this.lookupRGB = inxsearch;\n}\n\n// export default NeuQuant;","import NeuQuant from './js/NeuQuant';\nexport class ColorTableGenerator {\n\tprivate _colorTable: number[] = [];\n\tprivate _GCT: string[] = [];\n\tprivate _neuQuant: NeuQuant;\n\tprivate _distribution = 51;\n\tprivate _colorLookup: {\n\t\t[index: string]: number;\n\t} = {};\n\n\tconstructor(frame: Uint8Array) {\n\t\tthis._neuQuant = new NeuQuant(frame, 20);\n\t\tthis._neuQuant.buildColormap();\n\t\tthis._colorTable = this._neuQuant.getColormap();\n\t}\n\n\tpublic generate(): Promise<[{ [index: string]: number }, string[]]> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet pixel: string = '';\n\t\t\tlet count = 0;\n\t\t\tthis._colorTable.forEach((value, index, array) => {\n\t\t\t\tpixel += this.pad(value);\n\t\t\t\tif ((index + 1) % 3 === 0) {\n\t\t\t\t\tthis._GCT.push(pixel);\n\t\t\t\t\tthis._colorLookup[pixel] = count;\n\t\t\t\t\tcount++;\n\t\t\t\t\tpixel = '';\n\t\t\t\t}\n\t\t\t\tif (index === this._colorTable.length - 1) resolve([this._colorLookup, this._GCT]);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic lookupRGB(pixel: string): number {\n\t\tconst R = parseInt(pixel.substr(0, 2), 16);\n\t\tconst G = parseInt(pixel.substr(2, 2), 16);\n\t\tconst B = parseInt(pixel.substr(4, 2), 16);\n\t\tconst pixelIndex = this._neuQuant.lookupRGB(R, G, B);\n\n\t\treturn pixelIndex as number;\n\t}\n\n\tprivate pad(color: number): string {\n\t\tif (color < 16) {\n\t\t\treturn `0${color.toString(16)}`;\n\t\t} else {\n\t\t\treturn color.toString(16);\n\t\t}\n\t}\n}\n","export class EncodedImage {\n\tdata: number[] = [];\n\n\tconstructor() {}\n\n\tpublic get(): number[] {\n\t\treturn this.data;\n\t}\n\n\tpublic write(byte: number): void {\n\t\tthis.data.push(byte);\n\t}\n\n\tpublic writeArray(array: number[], arraySize: number): void {\n\t\tfor (let i = 0; i < arraySize; i++) {\n\t\t\tthis.write(array[i]);\n\t\t}\n\t}\n\n\tpublic writeUTF(UTF: string): void {\n\t\tfor (let i = 0; i < UTF.length; i++) {\n\t\t\tthis.write(UTF.charCodeAt(i));\n\t\t}\n\t}\n\n\tpublic writeColor(color: string): void {\n\t\tfor (let i = 0; i < color.length; i += 2) {\n\t\t\tconst intValue: number = parseInt(color[i] + color[i + 1], 16);\n\t\t\tthis.write(intValue);\n\t\t}\n\t}\n\n\tpublic writeLittleEndian(num: number): void {\n\t\tthis.write(num & 0xff);\n\t\tthis.write((num >> 8) & 0xff);\n\t}\n\n\tpublic reset() {\n\t\tthis.data = [];\n\t}\n}\n","/**\r\n * This class handles LZW encoding\r\n * Adapted from Jef Poskanzer's Java port by way of J. M. G. Elliott.\r\n * @author Kevin Weiner (original Java version - kweiner@fmsware.com)\r\n * @author Thibault Imbert (AS3 version - bytearray.org)\r\n * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)\r\n * @author Anthony Powell (TypeScript version)\r\n * @version 0.1 AS3 implementation\r\n */\r\n\r\nimport { EncodedImage } from './encoded.image';\r\nexport class LZWEncoder {\r\n\tprivate readonly EOF = 1;\r\n\r\n\t// GIFCOMPR.C - GIF Image compression routines\r\n\t// Lempel-Ziv compression based on 'compress'. GIF modifications by\r\n\t// David Rowley (mgardi@watdcsu.waterloo.edu)\r\n\t// General DEFINEs\r\n\r\n\tprivate readonly BITS = 12;\r\n\tprivate readonly HSIZE = 5003;\r\n\r\n\tprivate _imgW: number;\r\n\tprivate _imgH: number;\r\n\tprivate _pixels: number[];\r\n\tprivate _initCodeSize: number;\r\n\tprivate _remaining: number;\r\n\tprivate _curPixel: number;\r\n\r\n\t// GIF Image compression - modified 'compress'\r\n\t// Based on: compress.c - File compression ala IEEE Computer, June 1984.\r\n\t// By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\r\n\t// Jim McKie (decvax!mcvax!jim)\r\n\t// Steve Davies (decvax!vax135!petsd!peora!srd)\r\n\t// Ken Turkowski (decvax!decwrl!turtlevax!ken)\r\n\t// James A. Woods (decvax!ihnp4!ames!jaw)\r\n\t// Joe Orost (decvax!vax135!petsd!joe)\r\n\r\n\tprivate _n_bits: number; // number of bits/code\r\n\tprivate _maxbits = this.BITS; // user settable max # bits/code\r\n\tprivate _maxcode: number; // maximum code, given n_bits\r\n\tprivate _maxmaxcode = 1 << this.BITS; // should NEVER generate this code\r\n\tprivate _htab: number[] = [];\r\n\tprivate _codetab: number[] = [];\r\n\tprivate _hsize = this.HSIZE; // for dynamic table sizing\r\n\tprivate _free_ent = 0; // first unused entry\r\n\r\n\t// block compression parameters -- after all codes are used up,\r\n\t// and compression rate changes, start over.\r\n\r\n\tprivate _clear_flg = false;\r\n\r\n\t// Algorithm: use open addressing double hashing (no chaining) on the\r\n\t// prefix code / next character combination. We do a variant of Knuth's\r\n\t// algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\r\n\t// secondary probe. Here, the modular division first probe is gives way\r\n\t// to a faster exclusive-or manipulation. Also do block compression with\r\n\t// an adaptive reset, whereby the code table is cleared when the compression\r\n\t// ratio decreases, but after the table fills. The variable-length output\r\n\t// codes are re-sized at this point, and a special CLEAR code is generated\r\n\t// for the decompressor. Late addition: construct the table according to\r\n\t// file size for noticeable speed improvement on small files. Please direct\r\n\t// questions about this implementation to ames!jaw.\r\n\r\n\tprivate _g_init_bits: number;\r\n\tprivate _ClearCode: number;\r\n\tprivate _EOFCode: number;\r\n\r\n\t// output\r\n\t// Output the given code.\r\n\t// Inputs:\r\n\t// code: A n_bits-bit integer. If == -1, then EOF. This assumes\r\n\t// that n_bits =< wordsize - 1.\r\n\t// Outputs:\r\n\t// Outputs code to the file.\r\n\t// Assumptions:\r\n\t// Chars are 8 bits long.\r\n\t// Algorithm:\r\n\t// Maintain a BITS character long buffer (so that 8 codes will\r\n\t// fit in it exactly). Use the VAX insv instruction to insert each\r\n\t// code in turn. When the buffer fills up empty it and start over.\r\n\r\n\tprivate _cur_accum = 0;\r\n\tprivate _cur_bits = 0;\r\n\tprivate _masks = [\r\n\t\t0x0000,\r\n\t\t0x0001,\r\n\t\t0x0003,\r\n\t\t0x0007,\r\n\t\t0x000f,\r\n\t\t0x001f,\r\n\t\t0x003f,\r\n\t\t0x007f,\r\n\t\t0x00ff,\r\n\t\t0x01ff,\r\n\t\t0x03ff,\r\n\t\t0x07ff,\r\n\t\t0x0fff,\r\n\t\t0x1fff,\r\n\t\t0x3fff,\r\n\t\t0x7fff,\r\n\t\t0xffff,\r\n\t];\r\n\r\n\t// Number of characters so far in this 'packet'\r\n\tprivate _a_count: number;\r\n\r\n\t// Define the storage for the packet accumulator\r\n\tprivate _accum: number[] = [];\r\n\r\n\tconstructor(width: number, height: number, pixels: number[], colorDepth: number) {\r\n\t\tthis._imgW = width;\r\n\t\tthis._imgH = height;\r\n\t\tthis._pixels = pixels;\r\n\t\tthis._initCodeSize = Math.max(2, colorDepth);\r\n\t}\r\n\r\n\t// Add a character to the end of the current packet, and if it is 254\r\n\t// characters, flush the packet to disk.\r\n\tprivate writeCharToPacket(c: number, outs: EncodedImage): void {\r\n\t\tthis._accum[this._a_count++] = c;\r\n\t\tif (this._a_count >= 254) this.flush_char(outs);\r\n\t}\r\n\r\n\t// Clear out the hash table\r\n\t// table clear for block compress\r\n\r\n\tprivate cl_block(outs: EncodedImage): void {\r\n\t\tthis.cl_hash(this._hsize);\r\n\t\tthis._free_ent = this._ClearCode + 2;\r\n\t\tthis._clear_flg = true;\r\n\t\tthis.output(this._ClearCode, outs);\r\n\t}\r\n\r\n\t// reset code table\r\n\tprivate cl_hash(hsize: number): void {\r\n\t\tfor (let i = 0; i < hsize; ++i) this._htab[i] = -1;\r\n\t}\r\n\r\n\tprivate compress(init_bits: number, outs: EncodedImage) {\r\n\t\tlet fcode;\r\n\t\tlet i; /* = 0 */\r\n\t\tlet c;\r\n\t\tlet ent;\r\n\t\tlet disp;\r\n\t\tlet hsize_reg;\r\n\t\tlet hshift;\r\n\r\n\t\t// Set up the globals: g_init_bits - initial number of bits\r\n\t\tthis._g_init_bits = init_bits;\r\n\r\n\t\t// Set up the necessary values\r\n\t\tthis._clear_flg = false;\r\n\t\tthis._n_bits = this._g_init_bits;\r\n\t\tthis._maxcode = this.MAXCODE(this._n_bits);\r\n\r\n\t\tthis._ClearCode = 1 << (init_bits - 1);\r\n\t\tthis._EOFCode = this._ClearCode + 1;\r\n\t\tthis._free_ent = this._ClearCode + 2;\r\n\r\n\t\tthis._a_count = 0; // clear packet\r\n\r\n\t\tent = this.nextPixel();\r\n\r\n\t\thshift = 0;\r\n\t\tfor (fcode = this._hsize; fcode < 65536; fcode *= 2) ++hshift;\r\n\t\thshift = 8 - hshift; // set hash code range bound\r\n\r\n\t\thsize_reg = this._hsize;\r\n\t\tthis.cl_hash(hsize_reg); // clear hash table\r\n\r\n\t\tthis.output(this._ClearCode, outs);\r\n\r\n\t\touter_loop: while ((c = this.nextPixel()) != this.EOF) {\r\n\t\t\tfcode = (c << this._maxbits) + ent;\r\n\t\t\ti = (c << hshift) ^ ent; // xor hashing\r\n\r\n\t\t\tif (this._htab[i] == fcode) {\r\n\t\t\t\tent = this._codetab[i];\r\n\t\t\t\tcontinue;\r\n\t\t\t} else if (this._htab[i] >= 0) {\r\n\t\t\t\t// non-empty slot\r\n\r\n\t\t\t\tdisp = hsize_reg - i; // secondary hash (after G. Knott)\r\n\t\t\t\tif (i === 0) disp = 1;\r\n\r\n\t\t\t\tdo {\r\n\t\t\t\t\tif ((i -= disp) < 0) i += hsize_reg;\r\n\r\n\t\t\t\t\tif (this._htab[i] == fcode) {\r\n\t\t\t\t\t\tent = this._codetab[i];\r\n\t\t\t\t\t\tcontinue outer_loop;\r\n\t\t\t\t\t}\r\n\t\t\t\t} while (this._htab[i] >= 0);\r\n\t\t\t}\r\n\r\n\t\t\tthis.output(ent, outs);\r\n\t\t\tent = c;\r\n\t\t\tif (this._free_ent < this._maxmaxcode) {\r\n\t\t\t\tthis._codetab[i] = this._free_ent++; // code -> hashtable\r\n\t\t\t\tthis._htab[i] = fcode;\r\n\t\t\t} else this.cl_block(outs);\r\n\t\t}\r\n\r\n\t\t// Put out the final code.\r\n\t\tthis.output(ent, outs);\r\n\t\tthis.output(this._EOFCode, outs);\r\n\t}\r\n\r\n\t// ----------------------------------------------------------------------------\r\n\tpublic encode(os: EncodedImage) {\r\n\t\tos.write(this._initCodeSize); // write \"initial code size\" byte\r\n\t\tthis._remaining = this._imgW * this._imgH; // reset navigation variables\r\n\t\tthis._curPixel = 0;\r\n\t\tthis.compress(this._initCodeSize + 1, os); // compress and write the pixel data\r\n\t\tos.write(0); // write block terminator\r\n\t}\r\n\r\n\t// Flush the packet to disk, and reset the accumulator\r\n\tprivate flush_char(outs: EncodedImage) {\r\n\t\tif (this._a_count > 0) {\r\n\t\t\touts.write(this._a_count);\r\n\t\t\touts.writeArray(this._accum, this._a_count);\r\n\t\t\tthis._a_count = 0;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate MAXCODE(n_bits: number) {\r\n\t\treturn (1 << n_bits) - 1;\r\n\t}\r\n\r\n\t// ----------------------------------------------------------------------------\r\n\t// Return the next pixel from the image\r\n\t// ----------------------------------------------------------------------------\r\n\r\n\tprivate nextPixel() {\r\n\t\tif (this._remaining === 0) return this.EOF;\r\n\t\t--this._remaining;\r\n\t\tlet pix = this._pixels[this._curPixel++];\r\n\t\treturn pix & 0xff;\r\n\t}\r\n\r\n\tprivate output(code: number, outs: EncodedImage) {\r\n\t\tthis._cur_accum &= this._masks[this._cur_bits];\r\n\r\n\t\tif (this._cur_bits > 0) this._cur_accum |= code << this._cur_bits;\r\n\t\telse this._cur_accum = code;\r\n\r\n\t\tthis._cur_bits += this._n_bits;\r\n\r\n\t\twhile (this._cur_bits >= 8) {\r\n\t\t\tthis.writeCharToPacket(this._cur_accum & 0xff, outs);\r\n\t\t\tthis._cur_accum >>= 8;\r\n\t\t\tthis._cur_bits -= 8;\r\n\t\t}\r\n\r\n\t\t// If the next entry is going to be too big for the code size,\r\n\t\t// then increase it, if possible.\r\n\r\n\t\tif (this._free_ent > this._maxcode || this._clear_flg) {\r\n\t\t\tif (this._clear_flg) {\r\n\t\t\t\tthis._maxcode = this.MAXCODE((this._n_bits = this._g_init_bits));\r\n\t\t\t\tthis._clear_flg = false;\r\n\t\t\t} else {\r\n\t\t\t\t++this._n_bits;\r\n\t\t\t\tif (this._n_bits == this._maxbits) this._maxcode = this._maxmaxcode;\r\n\t\t\t\telse this._maxcode = this.MAXCODE(this._n_bits);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (code == this._EOFCode) {\r\n\t\t\t// At EOF, write the rest of the buffer.\r\n\t\t\twhile (this._cur_bits > 0) {\r\n\t\t\t\tthis.writeCharToPacket(this._cur_accum & 0xff, outs);\r\n\t\t\t\tthis._cur_accum >>= 8;\r\n\t\t\t\tthis._cur_bits -= 8;\r\n\t\t\t}\r\n\r\n\t\t\tthis.flush_char(outs);\r\n\t\t}\r\n\t}\r\n}\r\n","import { EncodedImage } from './encoded.image';\nimport { LZWEncoder } from './LZW';\n\nexport class GIFGenerator {\n\tprivate stream: EncodedImage = new EncodedImage();\n\tprivate width: number;\n\tprivate height: number;\n\tprivate frameIndexedPixels: number[];\n\tprivate frameCount: number = 0;\n\tprivate GCT: string[];\n\n\tconstructor() {\n\t\tconsole.log(`Generator now running...`);\n\t}\n\n\tpublic init(width: number, height: number, GCT: string[]): void {\n\t\tthis.reset();\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.GCT = GCT;\n\t\tthis.writeHeader();\n\t\tthis.writeLogicalScreenDescriptor();\n\t\tthis.writeGlobalColorTable();\n\t\tthis.writeApplicationExtension();\n\t}\n\n\tpublic generateFrame(indexedPixels: number[]): void {\n\t\tthis.frameIndexedPixels = indexedPixels;\n\t\tthis.frameCount += 1;\n\t\tconsole.log(`generating frame ${this.frameCount}`);\n\t\tthis.writeGraphicControlExtension();\n\t\tthis.writeImageDescriptor();\n\t\tthis.writeImageData();\n\t}\n\n\tpublic getStream(): number[] {\n\t\tthis.writeTrailer();\n\t\treturn this.stream.get();\n\t}\n\n\tprivate writeHeader(): void {\n\t\tthis.stream.writeUTF('GIF89a'); /* GIF Header */\n\t}\n\n\tprivate writeLogicalScreenDescriptor(): void {\n\t\tthis.stream.writeLittleEndian(this.width); /* Canvas Width */\n\t\tthis.stream.writeLittleEndian(this.height); /* Canvas Height */\n\t\tthis.stream.write(0xf7); /* Packed Field */\n\t\tthis.stream.write(0); /* Background Color Index */\n\t\tthis.stream.write(0); /* Pixel Aspect Ration */\n\t}\n\n\tprivate writeGraphicControlExtension(): void {\n\t\tthis.stream.write(0x21); /* Extension Introducer */\n\t\tthis.stream.write(0xf9); /* Graphic Control Label */\n\t\tthis.stream.write(0x4); /* Byte Size */\n\t\tthis.stream.write(0x4); /* Packed Field */\n\t\tthis.stream.writeLittleEndian(0x9); /* Delay Time */\n\t\tthis.stream.write(0x0); /* Transparent Color Index */\n\t\tthis.stream.write(0x0); /* Block Terminator */\n\t}\n\n\tprivate writeImageDescriptor(): void {\n\t\tthis.stream.write(0x2c); /* Image Seperator Always 2C */\n\t\tthis.stream.writeLittleEndian(0x0); /* Image Left */\n\t\tthis.stream.writeLittleEndian(0x0); /* Image Top */\n\t\tthis.stream.writeLittleEndian(this.width); /* Image Width */\n\t\tthis.stream.writeLittleEndian(this.height); /* Image Height */\n\t\tthis.stream.write(0x0); /* Block Terminator */\n\t}\n\n\tprivate writeApplicationExtension(): void {\n\t\tthis.stream.write(0x21); /* extension introducer */\n\t\tthis.stream.write(0xff); /* app extension label */\n\t\tthis.stream.write(11); /* block size */\n\t\tthis.stream.writeUTF('NETSCAPE' + '2.0'); /* app id + auth code */\n\t\tthis.stream.write(3); /* sub-block size */\n\t\tthis.stream.write(1); /* loop sub-block id */\n\t\tthis.stream.writeLittleEndian(0); /* loop count (extra iterations, 0=repeat forever) */\n\t\tthis.stream.write(0); /* Block Terminator */\n\t}\n\n\tprivate writeTrailer(): void {\n\t\tthis.stream.write(0x3b); /* Trailer Marker */\n\t\tconsole.log(`Generator now finished.`);\n\t\tthis.frameCount = 0; /* Reset frame count for next GIF */\n\t}\n\n\tprivate writeGlobalColorTable(): void {\n\t\tlet count = 0;\n\n\t\tthis.GCT.forEach(color => {\n\t\t\tcount += 3;\n\t\t\tthis.stream.writeColor(color);\n\t\t});\n\n\t\tfor (let i = count; i < 3 * 256; i++) {\n\t\t\tthis.stream.write(0);\n\t\t}\n\t}\n\n\tprivate async writeImageData(): Promise<void> {\n\t\tconst encoder = new LZWEncoder(this.width, this.height, this.frameIndexedPixels, 8);\n\t\tencoder.encode(this.stream);\n\t\tconsole.log(`completed frame ${this.frameCount}`);\n\t}\n\n\tprivate writeLocalColorTable(): void {}\n\n\tprivate writePlainTextExtension(): void {}\n\n\tprivate writeCommentExtension(): void {}\n\n\tprivate reset() {\n\t\tthis.stream.reset();\n\t\tthis.frameCount = 0;\n\t}\n}\n","import { ColorTableGenerator } from './color.table.generator';\nimport { GIFGenerator } from './gif.generator';\nimport { flipFrames } from './process.frame';\n\nexport class GIFExporter {\n\tprivate _gifGenerator = new GIFGenerator();\n\tprivate _canvas: HTMLCanvasElement;\n\tprivate _gl: WebGLRenderingContext;\n\tprivate _delay: number;\n\tprivate _duration: number;\n\tprivate _width: number;\n\tprivate _height: number;\n\tprivate _colorTableGen: ColorTableGenerator;\n\tprivate _gifWorker: Worker;\n\tprivate _message: { job: string; params: {} };\n\n\tconstructor(engine: BABYLON.Engine, options?: { delay?: number; duration?: number }) {\n\t\tthis._canvas = engine.getRenderingCanvas();\n\t\tthis._delay = options.delay;\n\t\tthis._duration = options.duration;\n\n\t\t// this._gifWorker = new Worker('./gif.generator.service.ts');\n\t}\n\n\tpublic start(): Promise<number[]> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis.init();\n\t\t\tconst colorLookup = await this.createColorTable();\n\t\t\tconst frames: Uint8Array[] = await this.recordCanvas();\n\t\t\tconsole.log('timeout done');\n\n\t\t\tconst {\n\t\t\t\tnumericalRGBFrames: [numericalRGBData],\n\t\t\t\tstringRGBFrames,\n\t\t\t} = await this.processFrames(frames);\n\t\t\tconsole.log('process done');\n\n\t\t\tconst mappedFrames = await this.mapPixelsToIndex(stringRGBFrames, colorLookup);\n\t\t\tawait this.writeFrames(mappedFrames);\n\n\t\t\tthis._message = { job: 'getStream', params: {} };\n\t\t\tthis._gifWorker.postMessage(this._message);\n\n\t\t\tthis._gifWorker.onmessage = ({ data: { status, data } }) => {\n\t\t\t\tconsole.log(status, data);\n\n\t\t\t\tif (status === 'getStreamComplete') resolve(data);\n\t\t\t};\n\n\t\t\t// resolve(this._gifGenerator.getStream());\n\t\t});\n\t}\n\n\tpublic stop(): void {}\n\n\tpublic cancel(): void {}\n\n\tpublic async download(filename = 'canvasGIF.gif'): Promise<void> {\n\t\tconst gif = await this.start();\n\t\tconst url = URL.createObjectURL(\n\t\t\tnew Blob([new Uint8Array(gif)], {\n\t\t\t\ttype: 'image/gif',\n\t\t\t})\n\t\t);\n\t\tconst download = document.createElement('a');\n\t\tdocument.body.appendChild(download);\n\t\tdownload.target = '_blank';\n\t\tdownload.setAttribute('target', '_blank');\n\t\tdownload.style.display = 'none';\n\t\tdownload.href = url;\n\t\tdownload.download = filename;\n\t\tdownload.click();\n\t\tURL.revokeObjectURL(url);\n\t\tdownload.parentElement.removeChild(download);\n\t}\n\n\t/**\n\t * Records Canvas - Create a collection of snapshots from the canvas of the Babylon Engine\n\t *\n\t * @returns {frameCollection} @type {Uint8Array}- collection of frames\n\t */\n\tprivate recordCanvas(): Promise<Uint8Array[]> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconsole.log('record canvas');\n\t\t\tconst frameCollection: Uint8Array[] = [];\n\t\t\tlet intervalRef = setInterval(async () => {\n\t\t\t\tframeCollection.push(await this.getFrame());\n\t\t\t}, this._delay);\n\t\t\tsetTimeout(() => {\n\t\t\t\tclearInterval(intervalRef);\n\t\t\t\tconsole.log('timeout');\n\n\t\t\t\tresolve(frameCollection);\n\t\t\t}, this._duration);\n\t\t});\n\t}\n\n\t/**\n\t * Creates color table from Babylon Engine and writes it in the GIF header\n\t *\n\t * @returns nothing\n\t */\n\tprivate createColorTable(): Promise<{ [index: string]: number }> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst frame = await this.getFrame();\n\t\t\tconst frames: Uint8Array[] = [];\n\t\t\tframes.push(frame);\n\t\t\tconst {\n\t\t\t\tnumericalRGBFrames: [numericalRGBData],\n\t\t\t\tstringRGBFrames,\n\t\t\t} = await this.processFrames(frames);\n\t\t\tthis._colorTableGen = new ColorTableGenerator(numericalRGBData);\n\t\t\tconst [colorLookup, colorTable] = await this._colorTableGen.generate();\n\t\t\tawait this.writeColorTable(colorTable);\n\t\t\tresolve(colorLookup);\n\t\t});\n\t}\n\n\t/**\n\t * Takes a snapshot of the Babylon Engine\n\t *\n\t * @return {Uint8Array} pixels - representing a snapshot from the canvas\n\t */\n\tprivate getFrame(): Promise<Uint8Array> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst gl = this._canvas.getContext('webgl2') || this._canvas.getContext('webgl');\n\t\t\tlet pixels = new Uint8Array(this._width * this._height * 4);\n\t\t\tgl.readPixels(0, 0, this._width, this._height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n\t\t\tresolve(pixels);\n\t\t});\n\t}\n\n\tprivate processFrames(frames: Uint8Array[]): Promise<{ numericalRGBFrames: Uint8Array[]; stringRGBFrames: string[][] }> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t/**\n\t\t\t * Uncomment below to process frames on worker thread\n\t\t\t */\n\t\t\tconst worker = new Worker('./process.frame.service.ts');\n\t\t\tthis._message = { job: 'flipFrames', params: { frames, width: this._width, height: this._height } };\n\n\t\t\tworker.postMessage(this._message);\n\n\t\t\tworker.onmessage = ({ data: { numericalRGBFrames, stringRGBFrames } }) => {\n\t\t\t\tresolve({ numericalRGBFrames, stringRGBFrames });\n\t\t\t};\n\n\t\t\t/**\n\t\t\t * Uncommnet below to process frames on main thread\n\t\t\t */\n\t\t\t// resolve(await flipFrames(frames, this._width, this._height));\n\t\t});\n\t}\n\n\tprivate writeColorTable(globalColorTable: string[]): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis._message = { job: 'init', params: { width: this._width, height: this._height, globalColorTable } };\n\t\t\tthis._gifWorker.postMessage(this._message);\n\t\t\tthis._gifWorker.onmessage = ({ data: { status } }) => {\n\t\t\t\tif (status === 'initComplete') resolve();\n\t\t\t};\n\n\t\t\t// this._gifGenerator.init(this._width, this._height, globalColorTable);\n\t\t\t// resolve();\n\t\t});\n\t}\n\n\tprivate writeFrames(mappedFrames: number[][]): Promise<void> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis._message = { job: 'generateFrame', params: { frames: mappedFrames } };\n\t\t\tthis._gifWorker.postMessage(this._message);\n\t\t\tthis._gifWorker.onmessage = ({ data: { status } }) => {\n\t\t\t\tif (status === 'generateFramesComplete') resolve();\n\t\t\t};\n\n\t\t\t// mappedFrames.forEach(async frame => {\n\t\t\t// \tawait this._gifGenerator.generateFrame(frame);\n\t\t\t// \tresolve();\n\t\t\t// });\n\t\t});\n\t}\n\n\tprivate mapPixelsToIndex(frames: string[][], colorLookup: { [index: string]: number }): Promise<number[][]> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst indexedFrames: number[][] = [];\n\t\t\tframes.forEach(frame => {\n\t\t\t\tconst indexedPixels: number[] = [];\n\t\t\t\tframe.forEach(pixel => {\n\t\t\t\t\tif (colorLookup[pixel]) {\n\t\t\t\t\t\tindexedPixels.push(colorLookup[pixel]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tindexedPixels.push(this._colorTableGen.lookupRGB(pixel));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tindexedFrames.push(indexedPixels);\n\t\t\t});\n\t\t\tresolve(indexedFrames);\n\t\t});\n\t}\n\n\tprivate init() {\n\t\tthis._width = this._canvas.width;\n\t\tthis._height = this._canvas.height;\n\t\tthis._gl = this._canvas.getContext('webgl2') || this._canvas.getContext('webgl');\n\t\tthis._gifWorker = new Worker('./gif.generator.service.ts');\n\t}\n\n\tprivate workerReturnMessageHandler(ev: MessageEvent) {\n\t\tconst {\n\t\t\tdata: { status, data },\n\t\t} = ev.data;\n\t\tswitch (status) {\n\t\t\tcase 'initComplete':\n\t\t\t\treturn;\n\t\t\tcase 'addFramesComplete':\n\t\t\t\treturn;\n\t\t\tcase 'getStreamComplete':\n\t\t\t\treturn data;\n\t\t}\n\t}\n}\n"]}