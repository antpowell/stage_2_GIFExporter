{"version":3,"sources":["src\\NeuQuant.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAA,WAAA,aAAA,YAAA;AAmDC;;;;;;;;;;;;AAaA,aAAA,QAAA,CAAY,MAAZ,EAA8B,YAA9B,EAAkD;AA/DjC,aAAA,QAAA,GAAW,GAAX,CA+DiC,CA/DjB;AAChB,aAAA,QAAA,GAAW,GAAX,CA8DiC,CA9DjB;AAChB,aAAA,UAAA,GAAa,KAAK,QAAL,GAAgB,CAA7B;AAEjB;AACiB,aAAA,aAAA,GAAgB,CAAhB,CA0DiC,CA1Dd;AACnB,aAAA,aAAA,GAAgB,EAAhB,CAyDiC,CAzDb;AACpB,aAAA,QAAA,GAAW,KAAK,KAAK,aAArB;AACA,aAAA,WAAA,GAAc,EAAd;AACA,aAAA,MAAA,GAAS,KAAK,KAAK,WAAnB;AACA,aAAA,UAAA,GAAa,EAAb;AACA,aAAA,KAAA,GAAQ,KAAK,QAAL,IAAiB,KAAK,UAA9B,CAoDiC,CApDS;AAC1C,aAAA,UAAA,GAChB,KAAK,QAAL,IAAkB,KAAK,WAAL,GAAmB,KAAK,UAD1B;AAGjB;AACiB,aAAA,QAAA,GAAW,KAAK,QAAL,IAAiB,CAA5B,CA+CiC,CA/CF;AAC/B,aAAA,gBAAA,GAAmB,CAAnB,CA8CiC,CA9CX;AACtB,aAAA,WAAA,GAAc,KAAK,KAAK,gBAAxB;AACA,aAAA,WAAA,GAAc,KAAK,QAAL,GAAgB,KAAK,WAAnC,CA4CiC,CA5Ce;AAChD,aAAA,UAAA,GAAa,EAAb,CA2CiC,CA3ChB;AAElC;AACQ,aAAA,eAAA,GAAkB,EAAlB,CAwC0C,CAxCpB;AACtB,aAAA,UAAA,GAAa,KAAK,KAAK,eAAvB;AAGR;AACQ,aAAA,aAAA,GAAgB,CAAhB;AACA,aAAA,QAAA,GAAW,KAAK,KAAK,aAArB;AACA,aAAA,eAAA,GAAkB,KAAK,eAAL,GAAuB,KAAK,aAA9C;AACA,aAAA,aAAA,GAAgB,KAAK,KAAK,eAA1B;AAER;AACA;AACiB,aAAA,OAAA,GAAU,GAAV;AACA,aAAA,OAAA,GAAU,GAAV;AACA,aAAA,OAAA,GAAU,GAAV;AACA,aAAA,OAAA,GAAU,GAAV;AACA,aAAA,gBAAA,GAAmB,IAAI,KAAK,OAA5B;AAET,aAAA,QAAA,GAAuB,EAAvB;AACA,aAAA,SAAA,GAAsB,EAAtB;AACA,aAAA,KAAA,GAAkB,EAAlB;AACA,aAAA,KAAA,GAAkB,EAAlB;AACA,aAAA,SAAA,GAAsB,EAAtB;AAEA,aAAA,OAAA,GAAoB,EAApB;AAiBP,aAAK,OAAL,GAAe,MAAf;AACA,aAAK,aAAL,GAAqB,YAArB;AACA,aAAK,aAAL;AACA;AAEO,aAAA,SAAA,CAAA,KAAA,GAAR,UAAc,CAAd,EAAuB;AACtB,eAAO,CAAC,CAAC,CAAT;AACA,KAFO;AAIR;;;;AAIQ,aAAA,SAAA,CAAA,gBAAA,GAAR,YAAA;AACC,YAAI,CAAJ,EAAe,CAAf;AACA,aAAK,IAAI,CAAT,EAAY,IAAI,KAAK,QAArB,EAA+B,GAA/B,EAAoC;AACnC,gBAAI,CAAC,KAAM,KAAK,aAAL,GAAqB,CAA5B,IAAkC,KAAK,QAA3C;AACA,iBAAK,QAAL,CAAc,CAAd,IAAmB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAnB;AACA,iBAAK,KAAL,CAAW,CAAX,IAAgB,KAAK,QAAL,GAAgB,KAAK,QAArC;AACA,iBAAK,KAAL,CAAW,CAAX,IAAgB,CAAhB;AACA;AACD,KARO;AAUR;;;;;AAKQ,aAAA,SAAA,CAAA,SAAA,GAAR,YAAA;AACC,aAAK,IAAI,QAAQ,CAAjB,EAAoB,QAAQ,KAAK,QAAjC,EAA2C,OAA3C,EAAoD;AACnD,iBAAK,QAAL,CAAc,KAAd,EAAqB,CAArB,MAA4B,KAAK,aAAjC;AACA,iBAAK,QAAL,CAAc,KAAd,EAAqB,CAArB,MAA4B,KAAK,aAAjC;AACA,iBAAK,QAAL,CAAc,KAAd,EAAqB,CAArB,MAA4B,KAAK,aAAjC;AACA,iBAAK,QAAL,CAAc,KAAd,EAAqB,CAArB,MAA4B,KAA5B,CAJmD,CAIhB;AACnC;AACD,KAPO;AASR;;;;;;;;;AASQ,aAAA,SAAA,CAAA,WAAA,GAAR,UACC,CADD,EAEC,CAFD,EAGC,CAHD,EAIC,KAJD,EAKC,KALD,EAKc;AAEb,aAAK,QAAL,CAAc,KAAd,EAAqB,CAArB,KACE,SAAS,KAAK,QAAL,CAAc,KAAd,EAAqB,CAArB,IAA0B,CAAnC,CAAD,GAA0C,KAAK,UADhD;AAEA,aAAK,QAAL,CAAc,KAAd,EAAqB,CAArB,KACE,SAAS,KAAK,QAAL,CAAc,KAAd,EAAqB,CAArB,IAA0B,CAAnC,CAAD,GAA0C,KAAK,UADhD;AAEA,aAAK,QAAL,CAAc,KAAd,EAAqB,CAArB,KACE,SAAS,KAAK,QAAL,CAAc,KAAd,EAAqB,CAArB,IAA0B,CAAnC,CAAD,GAA0C,KAAK,UADhD;AAEA,KAbO;AAeR;;;;AAIQ,aAAA,SAAA,CAAA,UAAA,GAAR,UACC,CADD,EAEC,CAFD,EAGC,CAHD,EAIC,MAJD,EAKC,KALD,EAKc;AAEb,YAAM,MAAM,KAAK,GAAL,CAAS,QAAQ,MAAjB,CAAZ;AACA,YAAM,KAAK,KAAK,GAAL,CAAS,QAAQ,MAAjB,EAAyB,KAAK,QAA9B,CAAX;AAEA,YAAI,IAAI,QAAQ,CAAhB;AACA,YAAI,IAAI,QAAQ,CAAhB;AACA,YAAI,IAAI,CAAR;AAEA,YAAI,CAAJ,EAAiB,CAAjB;AACA,eAAO,IAAI,EAAJ,IAAU,IAAI,GAArB,EAA0B;AACzB,gBAAI,KAAK,SAAL,CAAe,GAAf,CAAJ;AAEA,gBAAI,IAAI,EAAR,EAAY;AACX,oBAAI,KAAK,QAAL,CAAc,GAAd,CAAJ;AACA,kBAAE,CAAF,KAAS,KAAK,EAAE,CAAF,IAAO,CAAZ,CAAD,GAAmB,KAAK,eAAhC;AACA,kBAAE,CAAF,KAAS,KAAK,EAAE,CAAF,IAAO,CAAZ,CAAD,GAAmB,KAAK,eAAhC;AACA,kBAAE,CAAF,KAAS,KAAK,EAAE,CAAF,IAAO,CAAZ,CAAD,GAAmB,KAAK,eAAhC;AACA;AAED,gBAAI,IAAI,GAAR,EAAa;AACZ,oBAAI,KAAK,QAAL,CAAc,GAAd,CAAJ;AACA,kBAAE,CAAF,KAAS,KAAK,EAAE,CAAF,IAAO,CAAZ,CAAD,GAAmB,KAAK,eAAhC;AACA,kBAAE,CAAF,KAAS,KAAK,EAAE,CAAF,IAAO,CAAZ,CAAD,GAAmB,KAAK,eAAhC;AACA,kBAAE,CAAF,KAAS,KAAK,EAAE,CAAF,IAAO,CAAZ,CAAD,GAAmB,KAAK,eAAhC;AACA;AACD;AACD,KAhCO;AAkCR;;;;;;;AAOQ,aAAA,SAAA,CAAA,OAAA,GAAR,UAAgB,CAAhB,EAA2B,CAA3B,EAAsC,CAAtC,EAA+C;AAC9C;;;;;;AAOA,YAAI,QAAQ,EAAE,KAAK,EAAP,CAAZ;AACA,YAAI,YAAY,KAAhB;AACA,YAAI,UAAU,CAAC,CAAf;AACA,YAAI,cAAc,OAAlB;AAEA,YAAI,CAAJ,EAAiB,QAAjB,EAAmC,QAAnC,EAAqD,QAArD;AAEA,aAAK,IAAI,QAAQ,CAAjB,EAAoB,QAAQ,KAAK,QAAjC,EAA2C,OAA3C,EAAoD;AACnD,gBAAI,KAAK,QAAL,CAAc,KAAd,CAAJ;AAEA,uBAAW,KAAK,GAAL,CAAS,EAAE,CAAF,IAAO,CAAhB,IAAqB,KAAK,GAAL,CAAS,EAAE,CAAF,IAAO,CAAhB,CAArB,GAA0C,KAAK,GAAL,CAAS,EAAE,CAAF,IAAO,CAAhB,CAArD;AACA,gBAAI,WAAW,KAAf,EAAsB;AACrB,wBAAQ,QAAR;AACA,0BAAU,KAAV;AACA;AAED,uBACC,YACC,KAAK,KAAL,CAAW,KAAX,KAAsB,KAAK,aAAL,GAAqB,KAAK,aADjD,CADD;AAGA,gBAAI,WAAW,SAAf,EAA0B;AACzB,4BAAY,QAAZ;AACA,8BAAc,KAAd;AACA;AAED,uBAAW,KAAK,KAAL,CAAW,KAAX,KAAqB,KAAK,UAArC;AACA,iBAAK,KAAL,CAAW,KAAX,KAAqB,QAArB;AACA,iBAAK,KAAL,CAAW,KAAX,KAAqB,YAAY,KAAK,WAAtC;AAEA,iBAAK,KAAL,CAAW,OAAX,KAAuB,KAAK,KAA5B;AACA,iBAAK,KAAL,CAAW,OAAX,KAAuB,KAAK,UAA5B;AAEA,mBAAO,WAAP;AACA;AACD,KAzCO;AA2CR;;;;AAIQ,aAAA,SAAA,CAAA,QAAA,GAAR,YAAA;;AACC,YAAI,CAAJ;AAAA,YACC,CADD;AAAA,YAEC,CAFD;AAAA,YAGC,QAHD;AAAA,YAIC,QAJD;AAAA,YAKC,cAAc,CALf;AAAA,YAMC,WAAW,CANZ;AAQA,aAAK,IAAI,QAAQ,CAAjB,EAAoB,QAAQ,KAAK,QAAjC,EAA2C,OAA3C,EAAoD;AACnD,gBAAI,KAAK,QAAL,CAAc,KAAd,CAAJ;AACA,uBAAW,KAAX;AACA,uBAAW,EAAE,CAAF,CAAX,CAHmD,CAGlC;AACjB;AACA,iBAAK,IAAI,QAAQ,CAAjB,EAAoB,IAAI,KAAK,QAA7B,EAAuC,GAAvC,EAA4C;AAC3C,oBAAI,KAAK,QAAL,CAAc,CAAd,CAAJ;AACA,oBAAI,EAAE,CAAF,IAAO,QAAX,EAAqB;AACpB,+BAAW,CAAX;AACA,+BAAW,EAAE,CAAF,CAAX;AACA;AACD;AACD,gBAAI,KAAK,QAAL,CAAc,QAAd,CAAJ;AACA;AACA,gBAAI,SAAS,QAAb,EAAuB;AACtB,qBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,EAAC,EAAA,CAAA,IAAA,GAAA,CAAA,CAAD,EAAO,EAAA,CAAA,IAAA,GAAA,CAAA,CAAP;AACA,qBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,EAAC,EAAA,CAAA,IAAA,GAAA,CAAA,CAAD,EAAO,EAAA,CAAA,IAAA,GAAA,CAAA,CAAP;AACA,qBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,EAAC,EAAA,CAAA,IAAA,GAAA,CAAA,CAAD,EAAO,EAAA,CAAA,IAAA,GAAA,CAAA,CAAP;AACA;AAED;AACA,gBAAI,YAAY,WAAhB,EAA6B;AAC5B,qBAAK,SAAL,CAAe,WAAf,IAA+B,WAAW,KAAZ,IAAsB,CAApD;AACA,qBAAK,IAAI,cAAc,CAAvB,EAA0B,IAAI,QAA9B,EAAwC,GAAxC,EAA6C;AAC5C,yBAAK,SAAL,CAAe,CAAf,IAAoB,KAApB;AACA,kCAAc,QAAd;AACA,+BAAW,KAAX;AACA;AACD;AACD,iBAAK,SAAL,CAAe,WAAf,IAA+B,WAAW,KAAK,UAAjB,IAAgC,CAA9D;AACA,iBAAK,IAAI,cAAc,CAAvB,EAA0B,IAAI,GAA9B,EAAmC,GAAnC,EAAwC;AACvC,qBAAK,SAAL,CAAe,CAAf,IAAoB,KAAK,UAAzB,CADuC,CACF;AACrC;AACD;AACD,KA3CO;AA6CR;;;;;;;AAOO,aAAA,SAAA,CAAA,aAAA,GAAP,UAAqB,CAArB,EAAgC,CAAhC,EAA2C,CAA3C,EAAoD;AACnD,YAAI,CAAJ,EAAe,CAAf,EAA4B,IAA5B;AAEA,YAAI,QAAQ,IAAZ,CAHmD,CAGjC;AAClB,YAAI,OAAO,CAAC,CAAZ;AAEA,YAAI,IAAI,KAAK,SAAL,CAAe,CAAf,CAAR,CANmD,CAMxB;AAC3B,YAAI,IAAI,IAAI,CAAZ,CAPmD,CAOpC;AAEf,eAAO,IAAI,KAAK,QAAT,IAAqB,KAAK,CAAjC,EAAoC;AACnC,gBAAI,IAAI,KAAK,QAAb,EAAuB;AACtB,oBAAI,KAAK,QAAL,CAAc,CAAd,CAAJ;AACA,uBAAO,EAAE,CAAF,IAAO,CAAd,CAFsB,CAEL;AACjB,oBAAI,QAAQ,KAAZ,EAAmB,IAAI,KAAK,QAAT;AACnB,+BADA,KACqB;AACpB;AACA,4BAAI,OAAO,CAAX,EAAc,OAAO,CAAC,IAAR;AACd,4BAAI,EAAE,CAAF,IAAO,CAAX;AACA,4BAAI,IAAI,CAAR,EAAW,IAAI,CAAC,CAAL;AACX,gCAAQ,CAAR;AACA,4BAAI,OAAO,KAAX,EAAkB;AACjB,gCAAI,EAAE,CAAF,IAAO,CAAX;AACA,gCAAI,IAAI,CAAR,EAAW,IAAI,CAAC,CAAL;AACX,oCAAQ,CAAR;AACA,gCAAI,OAAO,KAAX,EAAkB;AACjB,wCAAQ,IAAR;AACA,uCAAO,EAAE,CAAF,CAAP;AACA;AACD;AACD;AACD;AACD,gBAAI,KAAK,CAAT,EAAY;AACX,oBAAI,KAAK,QAAL,CAAc,CAAd,CAAJ;AACA,uBAAO,IAAI,EAAE,CAAF,CAAX,CAFW,CAEM;AACjB,oBAAI,QAAQ,KAAZ,EAAmB,IAAI,CAAC,CAAL;AACnB,+BADA,KACqB;AACpB;AACA,4BAAI,OAAO,CAAX,EAAc,OAAO,CAAC,IAAR;AACd,4BAAI,EAAE,CAAF,IAAO,CAAX;AACA,4BAAI,IAAI,CAAR,EAAW,IAAI,CAAC,CAAL;AACX,gCAAQ,CAAR;AACA,4BAAI,OAAO,KAAX,EAAkB;AACjB,gCAAI,EAAE,CAAF,IAAO,CAAX;AACA,gCAAI,IAAI,CAAR,EAAW,IAAI,CAAC,CAAL;AACX,oCAAQ,CAAR;AACA,gCAAI,OAAO,KAAX,EAAkB;AACjB,wCAAQ,IAAR;AACA,uCAAO,EAAE,CAAF,CAAP;AACA;AACD;AACD;AACD;AACD;AACD,eAAO,IAAP;AACA,KAtDM;AAwDP;;;;AAIQ,aAAA,SAAA,CAAA,KAAA,GAAR,YAAA;AACC,gBAAQ,GAAR,CAAY,2BAAZ;AACA,YAAI,CAAJ;AAEA,YAAI,cAAc,KAAK,OAAL,CAAa,MAA/B;AACA,YAAI,WAAW,KAAK,KAAL,CAAW,KAAK,CAAC,KAAK,aAAL,GAAqB,CAAtB,IAA2B,CAA3C,CAAf;AACA,YAAI,eAAe,KAAK,KAAL,CAAW,eAAe,IAAI,KAAK,aAAxB,CAAX,CAAnB;AACA,YAAI,QAAQ,KAAK,KAAL,CAAW,eAAe,KAAK,QAA/B,CAAZ;AACA,YAAI,QAAQ,KAAK,UAAjB;AACA,YAAI,SAAS,KAAK,WAAlB;AAEA,YAAI,MAAM,UAAU,KAAK,gBAAzB;AAEA,YAAI,OAAO,CAAX,EAAc,MAAM,CAAN;AACd,aAAK,IAAI,CAAT,EAAY,IAAI,GAAhB,EAAqB,GAArB;AACC,iBAAK,SAAL,CAAe,CAAf,IAAoB,KAAK,KAAL,CACnB,SAAU,CAAC,MAAM,GAAN,GAAY,IAAI,CAAjB,IAAsB,KAAK,QAA5B,IAAyC,MAAM,GAA/C,CAAT,CADmB,CAApB;AADD,SAKA,IAAI,IAAJ;AACA,YAAI,cAAc,KAAK,gBAAvB,EAAyC;AACxC,iBAAK,aAAL,GAAqB,CAArB;AACA,mBAAO,CAAP;AACA,SAHD,MAGO,IAAI,cAAc,KAAK,OAAnB,KAA+B,CAAnC,EAAsC;AAC5C,mBAAO,IAAI,KAAK,OAAhB;AACA,SAFM,MAEA,IAAI,cAAc,KAAK,OAAnB,KAA+B,CAAnC,EAAsC;AAC5C,mBAAO,IAAI,KAAK,OAAhB;AACA,SAFM,MAEA,IAAI,cAAc,KAAK,OAAnB,KAA+B,CAAnC,EAAsC;AAC5C,mBAAO,IAAI,KAAK,OAAhB;AACA,SAFM,MAEA;AACN,mBAAO,IAAI,KAAK,OAAhB;AACA;AAED,YAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb;AACA,YAAI,MAAM,CAAV,CAlCD,CAkCc;AAEb,YAAI,CAAJ;AACA,eAAO,IAAI,YAAX,EAAyB;AACxB,gBAAI,CAAC,KAAK,OAAL,CAAa,GAAb,IAAoB,IAArB,KAA8B,KAAK,aAAvC;AACA,gBAAI,CAAC,KAAK,OAAL,CAAa,MAAM,CAAnB,IAAwB,IAAzB,KAAkC,KAAK,aAA3C;AACA,gBAAI,CAAC,KAAK,OAAL,CAAa,MAAM,CAAnB,IAAwB,IAAzB,KAAkC,KAAK,aAA3C;AAEA,gBAAI,KAAK,OAAL,CAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,CAAJ;AACA,oBAAQ,GAAR,CAAY,CAAZ;AAEA,iBAAK,WAAL,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,KAA1B,EAAiC,CAAjC;AACA,gBAAI,QAAQ,CAAZ,EAAe,KAAK,UAAL,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,GAAzB,EAA8B,CAA9B,EATS,CASyB;AAEjD,mBAAO,IAAP;AACA,gBAAI,OAAO,WAAX,EAAwB,OAAO,WAAP;AAExB;AAEA,gBAAI,UAAU,CAAd,EAAiB,QAAQ,CAAR;AACjB,gBAAI,IAAI,KAAJ,KAAc,CAAlB,EAAqB;AACpB,yBAAS,QAAQ,QAAjB;AACA,0BAAU,SAAS,KAAK,UAAxB;AACA,sBAAM,UAAU,KAAK,gBAArB;AAEA,oBAAI,OAAO,CAAX,EAAc,MAAM,CAAN;AACd,qBAAK,IAAI,CAAT,EAAY,IAAI,GAAhB,EAAqB,GAArB;AACC,yBAAK,SAAL,CAAe,CAAf,IAAoB,KAAK,KAAL,CACnB,SAAU,CAAC,MAAM,GAAN,GAAY,IAAI,CAAjB,IAAsB,KAAK,QAA5B,IAAyC,MAAM,GAA/C,CAAT,CADmB,CAApB;AADD;AAIA;AACD;AACD,KAlEO;AAoER;;;;;;;;;AAUO,aAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACC,YAAI,MAAgB,EAApB;AACA,YAAI,QAAkB,EAAtB;AAEA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,QAAzB,EAAmC,GAAnC;AAAwC,kBAAM,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAN,IAA6B,CAA7B;AAAxC,SAEA,IAAI,IAAI,CAAR;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAAK,QAAzB,EAAmC,GAAnC,EAAwC;AACvC,gBAAI,IAAI,MAAM,CAAN,CAAR;AACA,gBAAI,GAAJ,IAAW,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAX;AACA,gBAAI,GAAJ,IAAW,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAX;AACA,gBAAI,GAAJ,IAAW,KAAK,QAAL,CAAc,CAAd,EAAiB,CAAjB,CAAX;AACA;AACD,eAAO,GAAP;AACA,KAdM;AAgBC,aAAA,SAAA,CAAA,aAAA,GAAR,YAAA;AACC,aAAK,gBAAL;AACA,aAAK,KAAL;AACA,aAAK,SAAL;AACA,aAAK,QAAL;AACA,KALO;AAMT,WAAA,QAAA;AA9aA,CAAA,EAAA;AAAa,QAAA,QAAA,GAAA,QAAA","file":"NeuQuant.81cf871b.map","sourceRoot":"..","sourcesContent":["/** NeuQuant Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\r\n * See \"Kohonen neural networks for optimal colour quantization\"\r\n * in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\r\n * for a discussion of the algorithm.\r\n * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal\r\n * in this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons who receive\r\n * copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n *\r\n * (JavaScript port 2012 by Johan Nordberg)\r\n * @author Anthony Powell (TypeScript port 2018)\r\n */\r\n\r\nexport class NeuQuant {\r\n\tprivate readonly _ncycles = 100; // number of learning cycles\r\n\tprivate readonly _netsize = 256; // number of colors used\r\n\tprivate readonly _maxnetpos = this._netsize - 1;\r\n\r\n\t// defs for freq and bias\r\n\tprivate readonly _netbiasshift = 4; // bias for colour values\r\n\tprivate readonly _intbiasshift = 16; // bias for fractions\r\n\tprivate readonly _intbias = 1 << this._intbiasshift;\r\n\tprivate readonly _gammashift = 10;\r\n\tprivate readonly _gamma = 1 << this._gammashift;\r\n\tprivate readonly _betashift = 10;\r\n\tprivate readonly _beta = this._intbias >> this._betashift; /* beta = 1/1024 */\r\n\tprivate readonly _betagamma =\r\n\t\tthis._intbias << (this._gammashift - this._betashift);\r\n\r\n\t// defs for decreasing radius factor\r\n\tprivate readonly _initrad = this._netsize >> 3; // for 256 cols, radius starts\r\n\tprivate readonly _radiusbiasshift = 6; // at 32.0 biased by 6 bits\r\n\tprivate readonly _radiusbias = 1 << this._radiusbiasshift;\r\n\tprivate readonly _initradius = this._initrad * this._radiusbias; //and decreases by a\r\n\tprivate readonly _radiusdec = 30; // factor of 1/30 each cycle\r\n\r\n\t// defs for decreasing alpha factor\r\n\tprivate _alphabiasshift = 10; // alpha starts at 1.0\r\n\tprivate _initalpha = 1 << this._alphabiasshift;\r\n\tprivate _alphadec; // biased by 10 bits\r\n\r\n\t/* radbias and alpharadbias used for radpower calculation */\r\n\tprivate _radbiasshift = 8;\r\n\tprivate _radbias = 1 << this._radbiasshift;\r\n\tprivate _alpharadbshift = this._alphabiasshift + this._radbiasshift;\r\n\tprivate _alpharadbias = 1 << this._alpharadbshift;\r\n\r\n\t// four primes near 500 - assume no image has a length so large that it is\r\n\t// divisible by all four primes\r\n\tprivate readonly _prime1 = 499;\r\n\tprivate readonly _prime2 = 491;\r\n\tprivate readonly _prime3 = 487;\r\n\tprivate readonly _prime4 = 503;\r\n\tprivate readonly _minpicturebytes = 3 * this._prime4;\r\n\r\n\tprivate _network: number[][] = [];\r\n\tprivate _netindex: number[] = [];\r\n\tprivate _bias: number[] = [];\r\n\tprivate _freq: number[] = [];\r\n\tprivate _radpower: number[] = [];\r\n\r\n\tprivate _pixels: number[] = [];\r\n\tprivate _sampleFactor: number;\r\n\r\n\t/*\r\n        Constructor: NeuQuant\r\n      \r\n        Arguments:\r\n      \r\n        pixels - array of pixels in RGB format\r\n        samplefac - sampling factor 1 to 30 where lower is better quality\r\n      \r\n        >\r\n        > pixels = [r, g, b, r, g, b, r, g, b, ..]\r\n        >\r\n    */\r\n\r\n\tconstructor(pixels: number[], sampleFactor: number) {\r\n\t\tthis._pixels = pixels;\r\n\t\tthis._sampleFactor = sampleFactor;\r\n\t\tthis.buildColorMap();\r\n\t}\r\n\r\n\tprivate toInt(v: number): number {\r\n\t\treturn ~~v;\r\n\t}\r\n\r\n\t/**\r\n\t * Private Method: init\r\n\t * sets up arrays\r\n\t */\r\n\tprivate initColorMapSize(): void {\r\n\t\tlet i: number, v: number;\r\n\t\tfor (i = 0; i < this._netsize; i++) {\r\n\t\t\tv = (i << (this._netbiasshift + 8)) / this._netsize;\r\n\t\t\tthis._network[i] = [v, v, v];\r\n\t\t\tthis._freq[i] = this._intbias / this._netsize;\r\n\t\t\tthis._bias[i] = 0;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Private Meothd: unbiasnet\r\n\t * unbiases network to give byte values 0...255 and record position\r\n\t * i to prepare for sort\r\n\t */\r\n\tprivate unbiasnet(): void {\r\n\t\tfor (let index = 0; index < this._netsize; index++) {\r\n\t\t\tthis._network[index][0] >>= this._netbiasshift;\r\n\t\t\tthis._network[index][1] >>= this._netbiasshift;\r\n\t\t\tthis._network[index][2] >>= this._netbiasshift;\r\n\t\t\tthis._network[index][3] >>= index; /* index of color */\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Private Method: altersingle\r\n\t * moves neuron *i* towards biased(r,g,b) by factor *alpha*\r\n\t * @param r\r\n\t * @param g\r\n\t * @param b\r\n\t * @param alpha\r\n\t * @param index\r\n\t */\r\n\tprivate altersingle(\r\n\t\tr: number,\r\n\t\tg: number,\r\n\t\tb: number,\r\n\t\talpha: number,\r\n\t\tindex: number\r\n\t): void {\r\n\t\tthis._network[index][0] -=\r\n\t\t\t(alpha * (this._network[index][0] - b)) / this._initalpha;\r\n\t\tthis._network[index][1] -=\r\n\t\t\t(alpha * (this._network[index][1] - g)) / this._initalpha;\r\n\t\tthis._network[index][2] -=\r\n\t\t\t(alpha * (this._network[index][2] - r)) / this._initalpha;\r\n\t}\r\n\r\n\t/**\r\n\t * Private Method: alterneigh\r\n\t * moves neurons in *radius* around index *i* towards biased (b,g,r) by factor *alpha*\r\n\t */\r\n\tprivate alterneigh(\r\n\t\tr: number,\r\n\t\tg: number,\r\n\t\tb: number,\r\n\t\tradius: number,\r\n\t\tindex: number\r\n\t): void {\r\n\t\tconst low = Math.abs(index - radius);\r\n\t\tconst hi = Math.min(index + radius, this._netsize);\r\n\r\n\t\tlet j = index + 1;\r\n\t\tlet k = index - 1;\r\n\t\tlet m = 1;\r\n\r\n\t\tlet p: number[], a: number;\r\n\t\twhile (j < hi || k > low) {\r\n\t\t\ta = this._radpower[m++];\r\n\r\n\t\t\tif (j < hi) {\r\n\t\t\t\tp = this._network[j++];\r\n\t\t\t\tp[0] -= (a * (p[0] - b)) / this._alphabiasshift;\r\n\t\t\t\tp[1] -= (a * (p[1] - g)) / this._alphabiasshift;\r\n\t\t\t\tp[2] -= (a * (p[2] - r)) / this._alphabiasshift;\r\n\t\t\t}\r\n\r\n\t\t\tif (k > low) {\r\n\t\t\t\tp = this._network[k--];\r\n\t\t\t\tp[0] -= (a * (p[0] - b)) / this._alphabiasshift;\r\n\t\t\t\tp[1] -= (a * (p[1] - g)) / this._alphabiasshift;\r\n\t\t\t\tp[2] -= (a * (p[2] - r)) / this._alphabiasshift;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Private Method: Contest\r\n\t * searches for biased RGB values\r\n\t * @param r\r\n\t * @param g\r\n\t * @param b\r\n\t */\r\n\tprivate contest(r: number, g: number, b: number): number {\r\n\t\t/**\r\n\t\t * finds closest neuron (min distance) and updates freq\r\n\t\t * finds best neuron (min distance-bias) and returns position\r\n\t\t * for frequently chosen neurons, freq[i]  is high and bias[i] is\r\n\t\t * negative bias[i] = gamma * ((1 / netsize) - freq[i])\r\n\t\t */\r\n\r\n\t\tlet bestd = ~(1 << 31);\r\n\t\tlet bestbiasd = bestd;\r\n\t\tlet bestpos = -1;\r\n\t\tlet bestbiaspos = bestpos;\r\n\r\n\t\tlet n: number[], distance: number, biasdist: number, betafreq: number;\r\n\r\n\t\tfor (let index = 0; index < this._netsize; index++) {\r\n\t\t\tn = this._network[index];\r\n\r\n\t\t\tdistance = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\r\n\t\t\tif (distance < bestd) {\r\n\t\t\t\tbestd = distance;\r\n\t\t\t\tbestpos = index;\r\n\t\t\t}\r\n\r\n\t\t\tbiasdist =\r\n\t\t\t\tdistance -\r\n\t\t\t\t(this._bias[index] >> (this._intbiasshift - this._netbiasshift));\r\n\t\t\tif (biasdist < bestbiasd) {\r\n\t\t\t\tbestbiasd = biasdist;\r\n\t\t\t\tbestbiaspos = index;\r\n\t\t\t}\r\n\r\n\t\t\tbetafreq = this._freq[index] >> this._betashift;\r\n\t\t\tthis._freq[index] -= betafreq;\r\n\t\t\tthis._bias[index] += betafreq << this._gammashift;\r\n\r\n\t\t\tthis._freq[bestpos] += this._beta;\r\n\t\t\tthis._bias[bestpos] -= this._betagamma;\r\n\r\n\t\t\treturn bestbiaspos;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Private Method: inxbuild\r\n\t * sorts network and builds netindex[0...255]\r\n\t */\r\n\tprivate inxbuild(): void {\r\n\t\tlet j: number,\r\n\t\t\tp: number[],\r\n\t\t\tq: number[],\r\n\t\t\tsmallpos: number,\r\n\t\t\tsmallval: number,\r\n\t\t\tpreviouscol = 0,\r\n\t\t\tstartpos = 0;\r\n\r\n\t\tfor (let index = 0; index < this._netsize; index++) {\r\n\t\t\tp = this._network[index];\r\n\t\t\tsmallpos = index;\r\n\t\t\tsmallval = p[1]; /* index on g */\r\n\t\t\t/* find smallest in i ...netsize -1 */\r\n\t\t\tfor (j = index + 1; j < this._netsize; j++) {\r\n\t\t\t\tq = this._network[j];\r\n\t\t\t\tif (q[1] < smallval) {\r\n\t\t\t\t\tsmallpos = j;\r\n\t\t\t\t\tsmallval = q[1];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tq = this._network[smallpos];\r\n\t\t\t/* swap p[i] and q[smallpos] entries */\r\n\t\t\tif (index != smallpos) {\r\n\t\t\t\t[q[0], p[0]] = [p[0], q[0]];\r\n\t\t\t\t[q[1], p[1]] = [p[1], q[1]];\r\n\t\t\t\t[q[2], p[2]] = [p[2], q[2]];\r\n\t\t\t}\r\n\r\n\t\t\t/* smallval entry is now in position i */\r\n\t\t\tif (smallval != previouscol) {\r\n\t\t\t\tthis._netindex[previouscol] = (startpos + index) >> 1;\r\n\t\t\t\tfor (j = previouscol + 1; j < smallval; j++) {\r\n\t\t\t\t\tthis._netindex[j] = index;\r\n\t\t\t\t\tpreviouscol = smallval;\r\n\t\t\t\t\tstartpos = index;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._netindex[previouscol] = (startpos + this._maxnetpos) >> 1;\r\n\t\t\tfor (j = previouscol + 1; j < 256; j++) {\r\n\t\t\t\tthis._netindex[j] = this._maxnetpos; /* really 256 */\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Private Method: inxsearch\r\n\t * searches for BGR values 0 ... 255 and return a color index\r\n\t * @param r\r\n\t * @param g\r\n\t * @param b\r\n\t */\r\n\tpublic getPixelIndex(r: number, g: number, b: number): number {\r\n\t\tlet a: number, p: number[], dist: number;\r\n\r\n\t\tlet bestd = 1000; /* biggest possible dist is 256*3 */\r\n\t\tlet best = -1;\r\n\r\n\t\tlet i = this._netindex[g]; /* index on g */\r\n\t\tlet j = i - 1; /* start a netindex[g] and work outwards */\r\n\r\n\t\twhile (i < this._netsize || j >= 0) {\r\n\t\t\tif (i < this._netsize) {\r\n\t\t\t\tp = this._network[i];\r\n\t\t\t\tdist = p[1] - g; /* index key */\r\n\t\t\t\tif (dist >= bestd) i = this._netsize;\r\n\t\t\t\t/* stop iter */ else {\r\n\t\t\t\t\ti++;\r\n\t\t\t\t\tif (dist < 0) dist = -dist;\r\n\t\t\t\t\ta = p[0] - b;\r\n\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\tdist += a;\r\n\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\ta = p[2] - r;\r\n\t\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\t\tdist += a;\r\n\t\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\t\tbestd = dist;\r\n\t\t\t\t\t\t\tbest = p[3];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (j >= 0) {\r\n\t\t\t\tp = this._network[j];\r\n\t\t\t\tdist = g - p[1]; /* index key - reverse dif */\r\n\t\t\t\tif (dist >= bestd) j = -1;\r\n\t\t\t\t/* stop iter */ else {\r\n\t\t\t\t\tj--;\r\n\t\t\t\t\tif (dist < 0) dist = -dist;\r\n\t\t\t\t\ta = p[0] - b;\r\n\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\tdist += a;\r\n\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\ta = p[2] - r;\r\n\t\t\t\t\t\tif (a < 0) a = -a;\r\n\t\t\t\t\t\tdist += a;\r\n\t\t\t\t\t\tif (dist < bestd) {\r\n\t\t\t\t\t\t\tbestd = dist;\r\n\t\t\t\t\t\t\tbest = p[3];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn best;\r\n\t}\r\n\r\n\t/**\r\n\t * Private Method: learn\r\n\t * Main learning loop\r\n\t */\r\n\tprivate learn() {\r\n\t\tconsole.log(`NeuQuant learning started`);\r\n\t\tlet i;\r\n\r\n\t\tlet lengthcount = this._pixels.length;\r\n\t\tlet alphadec = this.toInt(30 + (this._sampleFactor - 1) / 3);\r\n\t\tlet samplepixels = this.toInt(lengthcount / (3 * this._sampleFactor));\r\n\t\tlet delta = this.toInt(samplepixels / this._ncycles);\r\n\t\tlet alpha = this._initalpha;\r\n\t\tlet radius = this._initradius;\r\n\r\n\t\tlet rad = radius >> this._radiusbiasshift;\r\n\r\n\t\tif (rad <= 1) rad = 0;\r\n\t\tfor (i = 0; i < rad; i++)\r\n\t\t\tthis._radpower[i] = this.toInt(\r\n\t\t\t\talpha * (((rad * rad - i * i) * this._radbias) / (rad * rad))\r\n\t\t\t);\r\n\r\n\t\tlet step;\r\n\t\tif (lengthcount < this._minpicturebytes) {\r\n\t\t\tthis._sampleFactor = 1;\r\n\t\t\tstep = 3;\r\n\t\t} else if (lengthcount % this._prime1 !== 0) {\r\n\t\t\tstep = 3 * this._prime1;\r\n\t\t} else if (lengthcount % this._prime2 !== 0) {\r\n\t\t\tstep = 3 * this._prime2;\r\n\t\t} else if (lengthcount % this._prime3 !== 0) {\r\n\t\t\tstep = 3 * this._prime3;\r\n\t\t} else {\r\n\t\t\tstep = 3 * this._prime4;\r\n\t\t}\r\n\r\n\t\tlet b, g, r, j;\r\n\t\tlet pix = 0; // current pixel\r\n\r\n\t\ti = 0;\r\n\t\twhile (i < samplepixels) {\r\n\t\t\tb = (this._pixels[pix] & 0xff) << this._netbiasshift;\r\n\t\t\tg = (this._pixels[pix + 1] & 0xff) << this._netbiasshift;\r\n\t\t\tr = (this._pixels[pix + 2] & 0xff) << this._netbiasshift;\r\n\r\n\t\t\tj = this.contest(b, g, r);\r\n\t\t\tconsole.log(j);\r\n\r\n\t\t\tthis.altersingle(b, g, r, alpha, j);\r\n\t\t\tif (rad !== 0) this.alterneigh(b, g, r, rad, j); // alter neighbours\r\n\r\n\t\t\tpix += step;\r\n\t\t\tif (pix >= lengthcount) pix -= lengthcount;\r\n\r\n\t\t\ti++;\r\n\r\n\t\t\tif (delta === 0) delta = 1;\r\n\t\t\tif (i % delta === 0) {\r\n\t\t\t\talpha -= alpha / alphadec;\r\n\t\t\t\tradius -= radius / this._radiusdec;\r\n\t\t\t\trad = radius >> this._radiusbiasshift;\r\n\r\n\t\t\t\tif (rad <= 1) rad = 0;\r\n\t\t\t\tfor (j = 0; j < rad; j++)\r\n\t\t\t\t\tthis._radpower[j] = this.toInt(\r\n\t\t\t\t\t\talpha * (((rad * rad - j * j) * this._radbias) / (rad * rad))\r\n\t\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t *\r\n\t * Method: getColormap\r\n\t * builds colormap from the index\r\n\t * returns array in the format:\r\n\t *\r\n\t *  [r, g, b, r, g, b, r, g, b, ..]\r\n\t *\r\n\t */\r\n\r\n\tpublic getColormap(): number[] {\r\n\t\tlet map: number[] = [];\r\n\t\tlet index: number[] = [];\r\n\r\n\t\tfor (let i = 0; i < this._netsize; i++) index[this._network[i][3]] = i;\r\n\r\n\t\tlet k = 0;\r\n\t\tfor (let l = 0; l < this._netsize; l++) {\r\n\t\t\tlet j = index[l];\r\n\t\t\tmap[k++] = this._network[j][0];\r\n\t\t\tmap[k++] = this._network[j][1];\r\n\t\t\tmap[k++] = this._network[j][2];\r\n\t\t}\r\n\t\treturn map;\r\n\t}\r\n\r\n\tprivate buildColorMap() {\r\n\t\tthis.initColorMapSize();\r\n\t\tthis.learn();\r\n\t\tthis.unbiasnet();\r\n\t\tthis.inxbuild();\r\n\t}\r\n}\r\n"]}