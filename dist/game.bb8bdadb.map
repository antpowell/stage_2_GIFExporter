{"version":3,"sources":["src\\EncodedImage.ts","src\\WebWoker.ts","src\\GIFGenerator.ts","src\\js\\NeuQuant.js","src\\ColorTableGenerator.ts","src\\GIFExporter.ts","src\\game.ts"],"names":["NeuQuant","toInt","v","ncycles","netsize","maxnetpos","netbiasshift","intbiasshift","intbias","gammashift","gamma","betashift","beta","betagamma","initrad","radiusbiasshift","radiusbias","initradius","radiusdec","alphabiasshift","initalpha","alphadec","radbiasshift","radbias","alpharadbshift","alpharadbias","prime1","prime2","prime3","prime4","minpicturebytes","pixels","samplefac","network","netindex","bias","freq","radpower","init","i","unbiasnet","altersingle","alpha","b","g","r","alterneigh","radius","lo","Math","abs","hi","min","j","k","m","p","a","contest","bestd","bestbiasd","bestpos","bestbiaspos","n","dist","biasdist","betafreq","inxbuild","q","smallpos","smallval","previouscol","startpos","inxsearch","best","learn","lengthcount","length","samplepixels","delta","rad","step","pix","buildColormap","getColormap","map","index","l","lookupRGB"],"mappings":"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","file":"game.bb8bdadb.map","sourceRoot":"..","sourcesContent":["export class EncodedImage {\r\n\tdata: number[] = [];\r\n\r\n\tconstructor() {}\r\n\r\n\tpublic get(): number[] {\r\n\t\treturn this.data;\r\n\t}\r\n\r\n\tpublic write(byte: number): void {\r\n\t\tthis.data.push(byte);\r\n\t}\r\n\r\n\tpublic writeArray(array: number[], arraySize: number): void {\r\n\t\tfor (let i = 0; i < arraySize; i++) {\r\n\t\t\tthis.write(array[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writeUTF(UTF: string): void {\r\n\t\tfor (let i = 0; i < UTF.length; i++) {\r\n\t\t\tthis.write(UTF.charCodeAt(i));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writeColor(color: string): void {\r\n\t\tfor (let i = 0; i < color.length; i += 2) {\r\n\t\t\tconst intValue: number = parseInt(color[i] + color[i + 1], 16);\r\n\t\t\tthis.write(intValue);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic writeLittleEndian(num: number): void {\r\n\t\tthis.write(num & 0xff);\r\n\t\tthis.write((num >> 8) & 0xff);\r\n\t}\r\n}\r\n","export class WebWork {\r\n\tconstructor() {}\r\n\r\n\tpublic LZWEncoding() {\r\n\t\tconst now = performance.now();\r\n\t\tconsole.log(`LZW time taken: ${performance.now() - now}`);\r\n\t}\r\n}\r\n","import { EncodedImage } from './EncodedImage';\r\nimport { WebWork } from './WebWoker';\r\n///<reference path = '../JS/LZWEncoder.js'/>\r\n\r\nexport class GIFGenerator {\r\n\tprivate stream: EncodedImage = new EncodedImage();\r\n\tprivate width: number;\r\n\tprivate height: number;\r\n\tprivate frameIndexedPixels: number[];\r\n\tprivate frameCount: number = 0;\r\n\tprivate GCT: string[];\r\n\tprivate _webWorker: WebWork;\r\n\r\n\tconstructor(width: number, height: number, GCT: string[]) {\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.GCT = GCT;\r\n\t\tconsole.log(`Generator now running...`);\r\n\t}\r\n\r\n\tpublic init(): void {\r\n\t\tthis._webWorker = new WebWork();\r\n\t\tthis.headerGenerator();\r\n\t\tthis.LSDGenerator();\r\n\t\tthis.GCTWriter();\r\n\t\tthis.AppExtGenerator();\r\n\t}\r\n\r\n\tpublic generateFrame(indexedPixels: number[]): void {\r\n\t\tthis.frameIndexedPixels = indexedPixels;\r\n\t\tthis.frameCount += 1;\r\n\t\tconsole.log(`generating frame ${this.frameCount}`);\r\n\t\tthis.GCEGenerator();\r\n\t\tthis.imgDescGenerator();\r\n\t\tthis.imgDataGenerator();\r\n\t}\r\n\r\n\tpublic getStream(): number[] {\r\n\t\tthis.TrailerGenerator();\r\n\t\treturn this.stream.get();\r\n\t}\r\n\r\n\tprivate headerGenerator(): void {\r\n\t\tthis.stream.writeUTF('GIF89a'); /* GIF Header */\r\n\t}\r\n\r\n\tprivate LSDGenerator(): void {\r\n\t\tthis.stream.writeLittleEndian(this.width); /* Canvas Width */\r\n\t\tthis.stream.writeLittleEndian(this.height); /* Canvas Height */\r\n\t\tthis.stream.write(0xf7); /* Packed Field */\r\n\t\tthis.stream.write(0); /* Background Color Index */\r\n\t\tthis.stream.write(0); /* Pixel Aspect Ration */\r\n\t}\r\n\r\n\tprivate GCEGenerator(): void {\r\n\t\tthis.stream.write(0x21); /* Extension Introducer */\r\n\t\tthis.stream.write(0xf9); /* Graphic Control Label */\r\n\t\tthis.stream.write(0x4); /* Byte Size */\r\n\t\tthis.stream.write(0x4); /* Packed Field */\r\n\t\tthis.stream.writeLittleEndian(0x9); /* Delay Time */\r\n\t\tthis.stream.write(0x0); /* Transparent Color Index */\r\n\t\tthis.stream.write(0x0); /* Block Terminator */\r\n\t}\r\n\r\n\tprivate imgDescGenerator(): void {\r\n\t\tthis.stream.write(0x2c); /* Image Seperator Always 2C */\r\n\t\tthis.stream.writeLittleEndian(0x0); /* Image Left */\r\n\t\tthis.stream.writeLittleEndian(0x0); /* Image Top */\r\n\t\tthis.stream.writeLittleEndian(this.width); /* Image Width */\r\n\t\tthis.stream.writeLittleEndian(this.height); /* Image Height */\r\n\t\tthis.stream.write(0x0); /* Block Terminator */\r\n\t}\r\n\r\n\tprivate AppExtGenerator(): void {\r\n\t\tthis.stream.write(0x21); /* extension introducer */\r\n\t\tthis.stream.write(0xff); /* app extension label */\r\n\t\tthis.stream.write(11); /* block size */\r\n\t\tthis.stream.writeUTF('NETSCAPE' + '2.0'); /* app id + auth code */\r\n\t\tthis.stream.write(3); /* sub-block size */\r\n\t\tthis.stream.write(1); /* loop sub-block id */\r\n\t\tthis.stream.writeLittleEndian(\r\n\t\t\t0\r\n\t\t); /* loop count (extra iterations, 0=repeat forever) */\r\n\t\tthis.stream.write(0); /* Block Terminator */\r\n\t}\r\n\r\n\tprivate TrailerGenerator(): void {\r\n\t\tthis.stream.write(0x3b); /* Trailer Marker */\r\n\t\tconsole.log(`Generator now finished.`);\r\n\t\tthis.frameCount = 0; /* Reset frame count for next GIF */\r\n\t}\r\n\r\n\tprivate GCTWriter(): void {\r\n\t\tlet count = 0;\r\n\r\n\t\tthis.GCT.forEach(color => {\r\n\t\t\tcount += 3;\r\n\t\t\tthis.stream.writeColor(color);\r\n\t\t});\r\n\r\n\t\tfor (let i = count; i < 3 * 256; i++) {\r\n\t\t\tthis.stream.write(0);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate imgDataGenerator(): void {\r\n\t\t// this._webWorker.LZWEncoder(this.width,\r\n\t\t// \tthis.height,\r\n\t\t// \tthis.frameIndexedPixels,\r\n\t\t// \t8);\r\n\t\tconst encoder = new LZWEncoder(\r\n\t\t\tthis.width,\r\n\t\t\tthis.height,\r\n\t\t\tthis.frameIndexedPixels,\r\n\t\t\t8\r\n\t\t);\r\n\t\tencoder.encode(this.stream);\r\n\t\tconsole.log(`completed frame ${this.frameCount}`);\r\n\t}\r\n\r\n\tprivate LCTGenerator(): void {}\r\n\r\n\tprivate PlainTextExtGenerator(): void {}\r\n\r\n\tprivate CommentExtGenerator(): void {}\r\n\r\n\tprivate writeLittleEndian(num: number): void {\r\n\t\tthis.stream.write(num & 0xff);\r\n\t\tthis.stream.write((num >> 8) & 0xff);\r\n\t}\r\n}\r\n","/* NeuQuant Neural-Net Quantization Algorithm\r\n * ------------------------------------------\r\n *\r\n * Copyright (c) 1994 Anthony Dekker\r\n *\r\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\r\n * See \"Kohonen neural networks for optimal colour quantization\"\r\n * in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\r\n * for a discussion of the algorithm.\r\n * See also  http://members.ozemail.com.au/~dekker/NEUQUANT.HTML\r\n *\r\n * Any party obtaining a copy of these files from the author, directly or\r\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\r\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal\r\n * in this software and documentation files (the \"Software\"), including without\r\n * limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n * and/or sell copies of the Software, and to permit persons who receive\r\n * copies from any such party to do so, with the only requirement being\r\n * that this copyright notice remain intact.\r\n *\r\n * (JavaScript port 2012 by Johan Nordberg)\r\n */\r\n\r\nfunction toInt(v) {\r\n  return ~~v;\r\n}\r\n\r\nvar ncycles = 100; // number of learning cycles\r\nvar netsize = 256; // number of colors used\r\nvar maxnetpos = netsize - 1;\r\n\r\n// defs for freq and bias\r\nvar netbiasshift = 4; // bias for colour values\r\nvar intbiasshift = 16; // bias for fractions\r\nvar intbias = (1 << intbiasshift);\r\nvar gammashift = 10;\r\nvar gamma = (1 << gammashift);\r\nvar betashift = 10;\r\nvar beta = (intbias >> betashift); /* beta = 1/1024 */\r\nvar betagamma = (intbias << (gammashift - betashift));\r\n\r\n// defs for decreasing radius factor\r\nvar initrad = (netsize >> 3); // for 256 cols, radius starts\r\nvar radiusbiasshift = 6; // at 32.0 biased by 6 bits\r\nvar radiusbias = (1 << radiusbiasshift);\r\nvar initradius = (initrad * radiusbias); //and decreases by a\r\nvar radiusdec = 30; // factor of 1/30 each cycle\r\n\r\n// defs for decreasing alpha factor\r\nvar alphabiasshift = 10; // alpha starts at 1.0\r\nvar initalpha = (1 << alphabiasshift);\r\nvar alphadec; // biased by 10 bits\r\n\r\n/* radbias and alpharadbias used for radpower calculation */\r\nvar radbiasshift = 8;\r\nvar radbias = (1 << radbiasshift);\r\nvar alpharadbshift = (alphabiasshift + radbiasshift);\r\nvar alpharadbias = (1 << alpharadbshift);\r\n\r\n// four primes near 500 - assume no image has a length so large that it is\r\n// divisible by all four primes\r\nvar prime1 = 499;\r\nvar prime2 = 491;\r\nvar prime3 = 487;\r\nvar prime4 = 503;\r\nvar minpicturebytes = (3 * prime4);\r\n\r\n/*\r\n  Constructor: NeuQuant\r\n\r\n  Arguments:\r\n\r\n  pixels - array of pixels in RGB format\r\n  samplefac - sampling factor 1 to 30 where lower is better quality\r\n\r\n  >\r\n  > pixels = [r, g, b, r, g, b, r, g, b, ..]\r\n  >\r\n*/\r\nexport default function NeuQuant(pixels, samplefac) {\r\n  var network; // int[netsize][4]\r\n  var netindex; // for network lookup - really 256\r\n\r\n  // bias and freq arrays for learning\r\n  var bias;\r\n  var freq;\r\n  var radpower;\r\n\r\n  /*\r\n    Private Method: init\r\n\r\n    sets up arrays\r\n  */\r\n  function init() {\r\n    network = [];\r\n    netindex = [];\r\n    bias = [];\r\n    freq = [];\r\n    radpower = [];\r\n\r\n    var i, v;\r\n    for (i = 0; i < netsize; i++) {\r\n      v = (i << (netbiasshift + 8)) / netsize;\r\n      network[i] = [v, v, v];\r\n      freq[i] = intbias / netsize;\r\n      bias[i] = 0;\r\n    }\r\n  }\r\n\r\n  /*\r\n    Private Method: unbiasnet\r\n\r\n    unbiases network to give byte values 0..255 and record position i to prepare for sort\r\n  */\r\n  function unbiasnet() {\r\n    for (var i = 0; i < netsize; i++) {\r\n      network[i][0] >>= netbiasshift;\r\n      network[i][1] >>= netbiasshift;\r\n      network[i][2] >>= netbiasshift;\r\n      network[i][3] = i; // record color number\r\n    }\r\n  }\r\n\r\n  /*\r\n    Private Method: altersingle\r\n\r\n    moves neuron *i* towards biased (b,g,r) by factor *alpha*\r\n  */\r\n  function altersingle(alpha, i, b, g, r) {\r\n    network[i][0] -= (alpha * (network[i][0] - b)) / initalpha;\r\n    network[i][1] -= (alpha * (network[i][1] - g)) / initalpha;\r\n    network[i][2] -= (alpha * (network[i][2] - r)) / initalpha;\r\n  }\r\n\r\n  /*\r\n    Private Method: alterneigh\r\n\r\n    moves neurons in *radius* around index *i* towards biased (b,g,r) by factor *alpha*\r\n  */\r\n  function alterneigh(radius, i, b, g, r) {\r\n    var lo = Math.abs(i - radius);\r\n    var hi = Math.min(i + radius, netsize);\r\n\r\n    var j = i + 1;\r\n    var k = i - 1;\r\n    var m = 1;\r\n\r\n    var p, a;\r\n    while ((j < hi) || (k > lo)) {\r\n      a = radpower[m++];\r\n\r\n      if (j < hi) {\r\n        p = network[j++];\r\n        p[0] -= (a * (p[0] - b)) / alpharadbias;\r\n        p[1] -= (a * (p[1] - g)) / alpharadbias;\r\n        p[2] -= (a * (p[2] - r)) / alpharadbias;\r\n      }\r\n\r\n      if (k > lo) {\r\n        p = network[k--];\r\n        p[0] -= (a * (p[0] - b)) / alpharadbias;\r\n        p[1] -= (a * (p[1] - g)) / alpharadbias;\r\n        p[2] -= (a * (p[2] - r)) / alpharadbias;\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n    Private Method: contest\r\n\r\n    searches for biased BGR values\r\n  */\r\n  function contest(b, g, r) {\r\n    /*\r\n      finds closest neuron (min dist) and updates freq\r\n      finds best neuron (min dist-bias) and returns position\r\n      for frequently chosen neurons, freq[i] is high and bias[i] is negative\r\n      bias[i] = gamma * ((1 / netsize) - freq[i])\r\n    */\r\n\r\n    var bestd = ~(1 << 31);\r\n    var bestbiasd = bestd;\r\n    var bestpos = -1;\r\n    var bestbiaspos = bestpos;\r\n\r\n    var i, n, dist, biasdist, betafreq;\r\n    for (i = 0; i < netsize; i++) {\r\n      n = network[i];\r\n\r\n      dist = Math.abs(n[0] - b) + Math.abs(n[1] - g) + Math.abs(n[2] - r);\r\n      if (dist < bestd) {\r\n        bestd = dist;\r\n        bestpos = i;\r\n      }\r\n\r\n      biasdist = dist - ((bias[i]) >> (intbiasshift - netbiasshift));\r\n      if (biasdist < bestbiasd) {\r\n        bestbiasd = biasdist;\r\n        bestbiaspos = i;\r\n      }\r\n\r\n      betafreq = (freq[i] >> betashift);\r\n      freq[i] -= betafreq;\r\n      bias[i] += (betafreq << gammashift);\r\n    }\r\n\r\n    freq[bestpos] += beta;\r\n    bias[bestpos] -= betagamma;\r\n\r\n    return bestbiaspos;\r\n  }\r\n\r\n  /*\r\n    Private Method: inxbuild\r\n\r\n    sorts network and builds netindex[0..255]\r\n  */\r\n  function inxbuild() {\r\n    var i, j, p, q, smallpos, smallval, previouscol = 0,\r\n      startpos = 0;\r\n    for (i = 0; i < netsize; i++) {\r\n      p = network[i];\r\n      smallpos = i;\r\n      smallval = p[1]; // index on g\r\n      // find smallest in i..netsize-1\r\n      for (j = i + 1; j < netsize; j++) {\r\n        q = network[j];\r\n        if (q[1] < smallval) { // index on g\r\n          smallpos = j;\r\n          smallval = q[1]; // index on g\r\n        }\r\n      }\r\n      q = network[smallpos];\r\n      // swap p (i) and q (smallpos) entries\r\n      if (i != smallpos) {\r\n        j = q[0];\r\n        q[0] = p[0];\r\n        p[0] = j;\r\n        j = q[1];\r\n        q[1] = p[1];\r\n        p[1] = j;\r\n        j = q[2];\r\n        q[2] = p[2];\r\n        p[2] = j;\r\n        j = q[3];\r\n        q[3] = p[3];\r\n        p[3] = j;\r\n      }\r\n      // smallval entry is now in position i\r\n\r\n      if (smallval != previouscol) {\r\n        netindex[previouscol] = (startpos + i) >> 1;\r\n        for (j = previouscol + 1; j < smallval; j++)\r\n          netindex[j] = i;\r\n        previouscol = smallval;\r\n        startpos = i;\r\n      }\r\n    }\r\n    netindex[previouscol] = (startpos + maxnetpos) >> 1;\r\n    for (j = previouscol + 1; j < 256; j++)\r\n      netindex[j] = maxnetpos; // really 256\r\n  }\r\n\r\n  /*\r\n    Private Method: inxsearch\r\n\r\n    searches for BGR values 0..255 and returns a color index\r\n  */\r\n  function inxsearch(b, g, r) {\r\n    var a, p, dist;\r\n\r\n    var bestd = 1000; // biggest possible dist is 256*3\r\n    var best = -1;\r\n\r\n    var i = netindex[g]; // index on g\r\n    var j = i - 1; // start at netindex[g] and work outwards\r\n\r\n    while ((i < netsize) || (j >= 0)) {\r\n      if (i < netsize) {\r\n        p = network[i];\r\n        dist = p[1] - g; // inx key\r\n        if (dist >= bestd) i = netsize; // stop iter\r\n        else {\r\n          i++;\r\n          if (dist < 0) dist = -dist;\r\n          a = p[0] - b;\r\n          if (a < 0) a = -a;\r\n          dist += a;\r\n          if (dist < bestd) {\r\n            a = p[2] - r;\r\n            if (a < 0) a = -a;\r\n            dist += a;\r\n            if (dist < bestd) {\r\n              bestd = dist;\r\n              best = p[3];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (j >= 0) {\r\n        p = network[j];\r\n        dist = g - p[1]; // inx key - reverse dif\r\n        if (dist >= bestd) j = -1; // stop iter\r\n        else {\r\n          j--;\r\n          if (dist < 0) dist = -dist;\r\n          a = p[0] - b;\r\n          if (a < 0) a = -a;\r\n          dist += a;\r\n          if (dist < bestd) {\r\n            a = p[2] - r;\r\n            if (a < 0) a = -a;\r\n            dist += a;\r\n            if (dist < bestd) {\r\n              bestd = dist;\r\n              best = p[3];\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return best;\r\n  }\r\n\r\n  /*\r\n    Private Method: learn\r\n\r\n    \"Main Learning Loop\"\r\n  */\r\n  function learn() {\r\n    var i;\r\n\r\n    var lengthcount = pixels.length;\r\n    var alphadec = toInt(30 + ((samplefac - 1) / 3));\r\n    var samplepixels = toInt(lengthcount / (3 * samplefac));\r\n    var delta = toInt(samplepixels / ncycles);\r\n    var alpha = initalpha;\r\n    var radius = initradius;\r\n\r\n    var rad = radius >> radiusbiasshift;\r\n\r\n    if (rad <= 1) rad = 0;\r\n    for (i = 0; i < rad; i++)\r\n      radpower[i] = toInt(alpha * (((rad * rad - i * i) * radbias) / (rad * rad)));\r\n\r\n    var step;\r\n    if (lengthcount < minpicturebytes) {\r\n      samplefac = 1;\r\n      step = 3;\r\n    } else if ((lengthcount % prime1) !== 0) {\r\n      step = 3 * prime1;\r\n    } else if ((lengthcount % prime2) !== 0) {\r\n      step = 3 * prime2;\r\n    } else if ((lengthcount % prime3) !== 0) {\r\n      step = 3 * prime3;\r\n    } else {\r\n      step = 3 * prime4;\r\n    }\r\n\r\n    var b, g, r, j;\r\n    var pix = 0; // current pixel\r\n\r\n    i = 0;\r\n    while (i < samplepixels) {\r\n      b = (pixels[pix] & 0xff) << netbiasshift;\r\n      g = (pixels[pix + 1] & 0xff) << netbiasshift;\r\n      r = (pixels[pix + 2] & 0xff) << netbiasshift;\r\n\r\n      j = contest(b, g, r);\r\n\r\n      altersingle(alpha, j, b, g, r);\r\n      if (rad !== 0) alterneigh(rad, j, b, g, r); // alter neighbours\r\n\r\n      pix += step;\r\n      if (pix >= lengthcount) pix -= lengthcount;\r\n\r\n      i++;\r\n\r\n      if (delta === 0) delta = 1;\r\n      if (i % delta === 0) {\r\n        alpha -= alpha / alphadec;\r\n        radius -= radius / radiusdec;\r\n        rad = radius >> radiusbiasshift;\r\n\r\n        if (rad <= 1) rad = 0;\r\n        for (j = 0; j < rad; j++)\r\n          radpower[j] = toInt(alpha * (((rad * rad - j * j) * radbias) / (rad * rad)));\r\n      }\r\n    }\r\n  }\r\n\r\n  /*\r\n    Method: buildColormap\r\n\r\n    1. initializes network\r\n    2. trains it\r\n    3. removes misconceptions\r\n    4. builds colorindex\r\n  */\r\n  function buildColormap() {\r\n    init();\r\n    learn();\r\n    unbiasnet();\r\n    inxbuild();\r\n  }\r\n  this.buildColormap = buildColormap;\r\n\r\n  /*\r\n    Method: getColormap\r\n\r\n    builds colormap from the index\r\n\r\n    returns array in the format:\r\n\r\n    >\r\n    > [r, g, b, r, g, b, r, g, b, ..]\r\n    >\r\n  */\r\n  function getColormap() {\r\n    var map = [];\r\n    var index = [];\r\n\r\n    for (var i = 0; i < netsize; i++)\r\n      index[network[i][3]] = i;\r\n\r\n    var k = 0;\r\n    for (var l = 0; l < netsize; l++) {\r\n      var j = index[l];\r\n      map[k++] = (network[j][0]);\r\n      map[k++] = (network[j][1]);\r\n      map[k++] = (network[j][2]);\r\n    }\r\n    return map;\r\n  }\r\n  this.getColormap = getColormap;\r\n\r\n  /*\r\n    Method: lookupRGB\r\n\r\n    looks for the closest *r*, *g*, *b* color in the map and\r\n    returns its index\r\n  */\r\n  this.lookupRGB = inxsearch;\r\n}\r\n\r\n// export default NeuQuant;","import NeuQuant from './js/NeuQuant';\r\nexport class ColorTableGenerator {\r\n\tprivate _colorTable: number[] = [];\r\n\tprivate _GCT: string[] = [];\r\n\tprivate _neuQuant: NeuQuant;\r\n\tprivate _distribution = 51;\r\n\tprivate _colorLookup: {\r\n\t\t[index: string]: number;\r\n\t} = {};\r\n\r\n\tconstructor(frame: number[]) {\r\n\t\tthis._neuQuant = new NeuQuant(frame, 20);\r\n\t\tthis._neuQuant.buildColormap();\r\n\t\tthis._colorTable = this._neuQuant.getColormap();\r\n\t}\r\n\r\n\tpublic generate(): Promise<[{ [index: string]: number }, string[]]> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tlet pixel: string = '';\r\n\t\t\tlet count = 0;\r\n\t\t\tthis._colorTable.forEach((value, index, array) => {\r\n\t\t\t\tpixel += this.pad(value);\r\n\t\t\t\tif ((index + 1) % 3 === 0) {\r\n\t\t\t\t\tthis._GCT.push(pixel);\r\n\t\t\t\t\tthis._colorLookup[pixel] = count;\r\n\t\t\t\t\tcount++;\r\n\t\t\t\t\tpixel = '';\r\n\t\t\t\t}\r\n\t\t\t\tif (index === this._colorTable.length - 1)\r\n\t\t\t\t\tresolve([this._colorLookup, this._GCT]);\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tpublic lookupRGB(pixel: string): number {\r\n\t\tconst R = parseInt(pixel.substr(0, 2), 16);\r\n\t\tconst G = parseInt(pixel.substr(2, 2), 16);\r\n\t\tconst B = parseInt(pixel.substr(4, 2), 16);\r\n\t\tconst pixelIndex = this._neuQuant.lookupRGB(R, G, B);\r\n\r\n\t\treturn pixelIndex as number;\r\n\t}\r\n\r\n\tprivate pad(color: number): string {\r\n\t\tif (color < 16) {\r\n\t\t\treturn `0${color.toString(16)}`;\r\n\t\t} else {\r\n\t\t\treturn color.toString(16);\r\n\t\t}\r\n\t}\r\n}\r\n","import { GIFGenerator } from './GIFGenerator';\r\nimport { ColorTableGenerator } from './ColorTableGenerator';\r\nimport NeuQuant from './js/NeuQuant';\r\n\r\nexport class GIFExporter {\r\n\tprivate _engine: BABYLON.Engine;\r\n\tprivate _canvas: HTMLCanvasElement;\r\n\tprivate _delay: number;\r\n\tprivate _duration: number;\r\n\tprivate _GCT: string[];\r\n\tprivate _intervalRef: number;\r\n\tprivate _width: number;\r\n\tprivate _height: number;\r\n\tprivate _imageDataCollection: Uint8Array[] = [];\r\n\tprivate _gifGenerator: GIFGenerator;\r\n\tprivate _colorLookUpTable: { [index: string]: number };\r\n\tprivate _colorTableGenerator: ColorTableGenerator;\r\n\tprivate _downloading: any;\r\n\r\n\tconstructor(\r\n\t\tengine: BABYLON.Engine,\r\n\t\toptions?: { delay?: number; duration?: number; GCT?: string[] }\r\n\t) {\r\n\t\tthis._engine = engine;\r\n\t\tthis._canvas = engine.getRenderingCanvas();\r\n\t\tthis._delay = options.delay;\r\n\t\tthis._duration = options.duration;\r\n\t\tthis._width = engine.getRenderWidth();\r\n\t\tthis._height = engine.getRenderHeight();\r\n\t}\r\n\r\n\tpublic async start(): Promise<number[]> {\r\n\t\tawait this.generateColorTable();\r\n\t\tconsole.log('​GIFExporter3 -> start -> ');\r\n\t\treturn new Promise<number[]>(async (resolve, reject) => {\r\n\t\t\tawait this.getSnapShotDataFromCanvas();\r\n\t\t\tthis.bootstrapGIF();\r\n\r\n\t\t\tconsole.log('setupImg complete');\r\n\r\n\t\t\tawait this.processFrames(this._imageDataCollection);\r\n\t\t\tresolve(this._gifGenerator.getStream());\r\n\t\t});\r\n\t}\r\n\r\n\tpublic stop(): void {\r\n\t\tconsole.log('​GIFExporter3 -> stop -> ');\r\n\t\tclearInterval(this._intervalRef);\r\n\t}\r\n\r\n\tpublic async download(filename = 'canvasGIF.gif'): Promise<void> {\r\n\t\tconst imgData = await this.start();\r\n\t\tconsole.log('​GIFExporter3 -> download -> ');\r\n\t\tconst url = URL.createObjectURL(\r\n\t\t\tnew Blob([new Uint8Array(imgData)], {\r\n\t\t\t\ttype: 'image/gif',\r\n\t\t\t})\r\n\t\t);\r\n\t\tconst download = document.createElement('a');\r\n\t\tdocument.body.appendChild(download);\r\n\t\tdownload.target = '_blank';\r\n\t\tdownload.setAttribute('target', '_blank');\r\n\t\tdownload.style.display = 'none';\r\n\t\tdownload.href = url;\r\n\t\tdownload.download = filename;\r\n\t\tdownload.click();\r\n\t\tURL.revokeObjectURL(url);\r\n\t\tdownload.parentElement.removeChild(download);\r\n\t\t// this._gifGenerator.download('testingGE3.gif');\r\n\t}\r\n\r\n\tprivate getSnapShotDataFromCanvas(): Promise<{}> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis._intervalRef = setInterval(async () => {\r\n\t\t\t\tconst pixels = await this.getWebGLPixels();\r\n\t\t\t\tthis._imageDataCollection.push(pixels);\r\n\t\t\t}, this._delay);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tthis.stop();\r\n\t\t\t\tresolve();\r\n\t\t\t}, this._duration);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate processFrames(imageDataCollection: Uint8Array[]): Promise<{}> {\r\n\t\tconsole.log('​GIFExporter3 -> privateprocessFrames -> ');\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tlet count = imageDataCollection.length;\r\n\t\t\timageDataCollection.forEach(async imgData => {\r\n\t\t\t\timgData = (await this.flipFrame(imgData)) as Uint8Array;\r\n\t\t\t\tconst [rgbData] = this.removeAlpha(imgData);\r\n\t\t\t\tconst indexedData = this.mapPixelIndex(rgbData as string[]);\r\n\t\t\t\tthis._gifGenerator.generateFrame(indexedData);\r\n\t\t\t\tif (--count === 0) resolve();\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\tprivate flipFrame(frame: Uint8Array): Promise<Uint8Array> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst split =\r\n\t\t\t\t(this._height / 2) |\r\n\t\t\t\t0; /* | 0 faster version of Math.floor for positive numbers */\r\n\t\t\tconst bytesPerRow = this._width * 4;\r\n\r\n\t\t\t// make a temp buffer to hold one row\r\n\t\t\tvar row = new Uint8Array(this._width * 4);\r\n\t\t\tfor (var rowIndex = 0; rowIndex < split; ++rowIndex) {\r\n\t\t\t\tvar topOffset = rowIndex * bytesPerRow;\r\n\t\t\t\tvar bottomOffset = (this._height - rowIndex - 1) * bytesPerRow;\r\n\r\n\t\t\t\t// make copy of a row on the top half\r\n\t\t\t\trow.set(frame.subarray(topOffset, topOffset + bytesPerRow));\r\n\r\n\t\t\t\t// copy a row from the bottom half to the top\r\n\t\t\t\tframe.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\r\n\r\n\t\t\t\t// copy the copy of the top half row to the bottom half\r\n\t\t\t\tframe.set(row, bottomOffset);\r\n\r\n\t\t\t\tif (rowIndex < split) resolve(frame);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tprivate removeAlpha(colorArray: Uint8ClampedArray): [string[], number[]] {\r\n\t\tlet RGBPixelData: string[] = [];\r\n\t\tlet RGBNumerical: number[] = [];\r\n\t\tfor (let i = 0; i < colorArray.length; i += 4) {\r\n\t\t\tconst pixel =\r\n\t\t\t\tthis.pad(colorArray[i]) +\r\n\t\t\t\tthis.pad(colorArray[i + 1]) +\r\n\t\t\t\tthis.pad(colorArray[i + 2]);\r\n\r\n\t\t\tRGBPixelData.push(pixel);\r\n\t\t\tRGBNumerical.push(colorArray[i]);\r\n\t\t\tRGBNumerical.push(colorArray[i + 1]);\r\n\t\t\tRGBNumerical.push(colorArray[i + 2]);\r\n\t\t}\r\n\r\n\t\treturn [RGBPixelData, RGBNumerical];\r\n\t}\r\n\r\n\tprivate pad(color: number): string {\r\n\t\tif (color < 16) {\r\n\t\t\treturn `0${color.toString(16)}`;\r\n\t\t} else {\r\n\t\t\treturn color.toString(16);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate mapPixelIndex(rgbData: string[]): number[] {\r\n\t\tconst indexedPixels: number[] = [];\r\n\t\trgbData.forEach(pixel => {\r\n\t\t\tif (this._colorLookUpTable[pixel]) {\r\n\t\t\t\tindexedPixels.push(this._colorLookUpTable[pixel]);\r\n\t\t\t} else {\r\n\t\t\t\tindexedPixels.push(this._colorTableGenerator.lookupRGB(pixel));\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn indexedPixels;\r\n\t}\r\n\r\n\tprivate async getColorFrame(): Promise<number[]> {\r\n\t\tconst pixels = await this.getWebGLPixels();\r\n\t\tconst img = (await this.flipFrame(pixels)) as Uint8Array;\r\n\t\tconst [, RBGData] = this.removeAlpha(img);\r\n\r\n\t\treturn RBGData;\r\n\t}\r\n\r\n\tprivate generateColorTable(): Promise<{}> {\r\n\t\treturn new Promise(async (resolve, reject) => {\r\n\t\t\tconst RGBFrame = await this.getColorFrame();\r\n\t\t\tthis._colorTableGenerator = new ColorTableGenerator(RGBFrame);\r\n\r\n\t\t\t[\r\n\t\t\t\tthis._colorLookUpTable,\r\n\t\t\t\tthis._GCT,\r\n\t\t\t] = await this._colorTableGenerator.generate();\r\n\r\n\t\t\tthis._gifGenerator = new GIFGenerator(\r\n\t\t\t\tthis._width,\r\n\t\t\t\tthis._height,\r\n\t\t\t\tthis._GCT\r\n\t\t\t);\r\n\t\t\tthis._gifGenerator.init();\r\n\t\t\tresolve();\r\n\t\t});\r\n\t}\r\n\r\n\tprivate bootstrapGIF(): void {\r\n\t\tthis._gifGenerator = new GIFGenerator(this._width, this._height, this._GCT);\r\n\t\tthis._gifGenerator.init();\r\n\t}\r\n\r\n\tprivate getWebGLPixels(): Promise<Uint8Array> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst gl =\r\n\t\t\t\tthis._canvas.getContext('webgl2') || this._canvas.getContext('webgl');\r\n\t\t\tconst pixels = new Uint8Array(\r\n\t\t\t\tgl.drawingBufferWidth * gl.drawingBufferHeight * 4\r\n\t\t\t);\r\n\t\t\tgl.readPixels(\r\n\t\t\t\t0,\r\n\t\t\t\t0,\r\n\t\t\t\tgl.drawingBufferWidth,\r\n\t\t\t\tgl.drawingBufferHeight,\r\n\t\t\t\tgl.RGBA,\r\n\t\t\t\tgl.UNSIGNED_BYTE,\r\n\t\t\t\tpixels\r\n\t\t\t);\r\n\t\t\tresolve(pixels);\r\n\t\t});\r\n\t}\r\n}\r\n","import { GIFExporter } from './GIFExporter';\r\nexport class Game {\r\n\tprivate _canvas: HTMLCanvasElement;\r\n\tprivate _engine: BABYLON.Engine;\r\n\tprivate _scene: BABYLON.Scene;\r\n\tprivate _camera: BABYLON.FreeCamera;\r\n\tprivate _light: BABYLON.Light;\r\n\tprivate _gifExporter: GIFExporter;\r\n\r\n\tconstructor(canvasElement: string) {\r\n\t\tthis._canvas = document.getElementById(canvasElement) as HTMLCanvasElement;\r\n\t\tthis._engine = new BABYLON.Engine(this._canvas, true, {\r\n\t\t\tpreserveDrawingBuffer: true,\r\n\t\t});\r\n\t\tthis._gifExporter = new GIFExporter(this._engine, {\r\n\t\t\tdelay: 60,\r\n\t\t\tduration: 2000,\r\n\t\t});\r\n\t}\r\n\r\n\tcreateScene(): void {\r\n\t\t// Create a basic BJS Scene object.\r\n\t\tthis._scene = new BABYLON.Scene(this._engine);\r\n\r\n\t\t// Create a FreeCamera, and set its position to (x:0, y:5, z:-10).\r\n\t\tthis._camera = new BABYLON.FreeCamera(\r\n\t\t\t'camera1',\r\n\t\t\tnew BABYLON.Vector3(0, 5, -10),\r\n\t\t\tthis._scene\r\n\t\t);\r\n\r\n\t\t// Target the camera to scene origin.\r\n\t\tthis._camera.setTarget(BABYLON.Vector3.Zero());\r\n\r\n\t\t// Attach the camera to the canvas.\r\n\t\tthis._camera.attachControl(this._canvas, false);\r\n\r\n\t\t// Create a basic light, aiming 0,1,0 - meaning, to the sky.\r\n\t\tthis._light = new BABYLON.HemisphericLight(\r\n\t\t\t'light1',\r\n\t\t\tnew BABYLON.Vector3(0, 1, 0),\r\n\t\t\tthis._scene\r\n\t\t);\r\n\r\n\t\t// Create a built-in \"sphere\" shape; with 16 segments and diameter of 2.\r\n\t\tlet sphere = BABYLON.MeshBuilder.CreateSphere(\r\n\t\t\t'sphere',\r\n\t\t\t{\r\n\t\t\t\tsegments: 16,\r\n\t\t\t\tdiameter: 2,\r\n\t\t\t},\r\n\t\t\tthis._scene\r\n\t\t);\r\n\r\n\t\t// Move the sphere upward 1/2 of its height.\r\n\t\tsphere.position.y = 1;\r\n\r\n\t\t// Create a built-in \"ground\" shape.\r\n\t\tlet ground = BABYLON.MeshBuilder.CreateGround(\r\n\t\t\t'ground',\r\n\t\t\t{\r\n\t\t\t\twidth: 6,\r\n\t\t\t\theight: 6,\r\n\t\t\t\tsubdivisions: 2,\r\n\t\t\t},\r\n\t\t\tthis._scene\r\n\t\t);\r\n\t}\r\n\r\n\tdoRender(): void {\r\n\t\t// Run the render loop.\r\n\t\tthis._engine.runRenderLoop(() => {\r\n\t\t\tthis._scene.render();\r\n\t\t});\r\n\r\n\t\t// The canvas/window resize event handler.\r\n\t\twindow.addEventListener('resize', () => {\r\n\t\t\tthis._engine.resize();\r\n\t\t});\r\n\t}\r\n\r\n\tdownloadGIF() {\r\n\t\tthis._gifExporter.download();\r\n\t}\r\n\tstopGIF() {\r\n\t\tthis._gifExporter.start();\r\n\t}\r\n}\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n\tconst recordBtn: HTMLCanvasElement = document.getElementById(\r\n\t\t'recordBtn'\r\n\t) as HTMLCanvasElement;\r\n\tconst stopBtn = document.getElementById('recStopBtn');\r\n\t// Setup GIF generator\r\n\r\n\t// Create the game using the 'renderCanvas'.\r\n\tlet game = new Game('renderCanvas');\r\n\r\n\t// Create the scene.\r\n\tgame.createScene();\r\n\r\n\t// Start render loop.\r\n\tgame.doRender();\r\n\r\n\trecordBtn.addEventListener('click', () => {\r\n\t\tgame.downloadGIF();\r\n\t});\r\n\tstopBtn.addEventListener('click', () => {\r\n\t\tgame.stopGIF();\r\n\t});\r\n});\r\n"]}